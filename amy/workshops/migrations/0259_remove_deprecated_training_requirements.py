# Generated by elichad on 2023-05-12 13:40

from django.db import migrations
from django.db.models import Q


def rename_discussion_to_welcome_session(apps, schema_editor) -> None:
    TrainingRequirement = apps.get_model("workshops", "TrainingRequirement")

    try:
        requirement = TrainingRequirement.objects.get(name="Discussion")
        requirement.name = "Welcome Session"
        requirement.save()
    except TrainingRequirement.DoesNotExist:
        pass


def rename_welcome_session_to_discussion(apps, schema_editor) -> None:
    TrainingRequirement = apps.get_model("workshops", "TrainingRequirement")

    try:
        requirement = TrainingRequirement.objects.get(name="Welcome Session")
        requirement.name = "Discussion"
        requirement.save()
    except TrainingRequirement.DoesNotExist:
        pass


def delete_outdated_requirements(apps, schema_editor) -> None:
    TrainingRequirement = apps.get_model("workshops", "TrainingRequirement")
    TrainingProgress = apps.get_model("workshops", "TrainingProgress")

    # migrate SWC/DC/LC specific progress to generic demo/lesson contribution
    # this was already done in production AMY but not in local databases
    demo, _ = TrainingRequirement.objects.get_or_create(
        name="Demo", defaults={"url_required": False}
    )
    contribution, _ = TrainingRequirement.objects.get_or_create(
        name="Lesson Contribution", defaults={"url_required": True}
    )
    progresses = TrainingProgress.objects.filter(
        Q(requirement__name__startswith="SWC")
        | Q(requirement__name__startswith="DC")
        | Q(requirement__name__startswith="LC")
    )
    progresses.filter(requirement__name__endswith="Demo").update(requirement=demo)
    progresses.filter(requirement__name__endswith="Homework").update(
        requirement=contribution
    )

    # remove SWC/DC/LC specific requirements
    TrainingRequirement.objects.filter(
        Q(name__startswith="SWC") | Q(name__startswith="DC") | Q(name__startswith="LC")
    ).delete()


def add_outdated_requirements(apps, schema_editor) -> None:
    TrainingRequirement = apps.get_model("workshops", "TrainingRequirement")

    outdated_requirements = [
        {"name": "DC Homework", "url_required": True, "event_required": False},
        {"name": "SWC Homework", "url_required": True, "event_required": False},
        {"name": "LC Homework", "url_required": True, "event_required": False},
        {"name": "DC Demo", "url_required": False, "event_required": False},
        {"name": "SWC Demo", "url_required": False, "event_required": False},
        {"name": "LC Demo", "url_required": False, "event_required": False},
    ]
    requirements_to_add = [TrainingRequirement(**r) for r in outdated_requirements]

    TrainingRequirement.objects.bulk_create(requirements_to_add)


class Migration(migrations.Migration):
    dependencies = [
        ("workshops", "0258_remove_trainingprogress_evaluated_by"),
    ]

    operations = [
        migrations.RunPython(
            rename_discussion_to_welcome_session,
            rename_welcome_session_to_discussion,
        ),
        migrations.RunPython(
            delete_outdated_requirements,
            add_outdated_requirements,
        ),
    ]
