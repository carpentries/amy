{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AMY Documentation","text":"<p>AMY is a database application for The Carpentries.  It allows The Carpentries to track programmatic activity including:</p> <ul> <li>workshops</li> <li>instructor training</li> <li>individual roles and badges</li> <li>institutional membership</li> </ul> <p>Most functionality is limited to authorized administrative users.  Individuals whose data is tracked in AMY can view only their own profile page.</p> <ul> <li>Review the community users guide</li> <li>Review the administrator users guide</li> </ul> <p>The code base can be found in the AMY GitHub repo. The web based application can be found here.</p>"},{"location":"accessibility_testing/","title":"Accessibility Testing in AMY","text":""},{"location":"accessibility_testing/#automated-testing","title":"Automated Testing","text":"<p>The automated tests aim to test one page corresponding to each template in <code>amy/templates</code> (including base templates and the <code>includes</code> subfolder). New templates should have a corresponding URL added to the <code>.pa11yci</code> config file. As such, templates added since the last update to <code>.pa11yci</code> are not tested.</p>"},{"location":"accessibility_testing/#workflow","title":"Workflow","text":"<p>The GitHub Actions workflow includes options for testing with both pa11y and Google Lighthouse. In both cases, the report can be found in the artifacts attached to the workflow run. The report contains one HTML file for each page covered by the tests, plus a summary file (something like <code>index.html</code>).</p>"},{"location":"accessibility_testing/#local-testing","title":"Local testing","text":"<p>See the AMY README for instructions on running the tests on your own machine.</p>"},{"location":"accessibility_testing/#limitations","title":"Limitations","text":"<p>The following pages cannot be effectively tested automatically at the moment. Problems include:</p> <ul> <li>page inaccessible to logged-in admin (`/terms/action_required``)</li> <li>objects unavailable (e.g. no available signups for instructors to view)</li> <li>file upload required (bulk uploads)</li> <li>domain/slug required in URL, but organizations and events are randomly generated</li> </ul> <pre><code>\"http://127.0.0.1:8000/terms/action_required/\",\n\"http://127.0.0.1:8000/dashboard/instructor/teaching_opportunities/&lt;int:recruitment_pk&gt;/signup\",\n\"http://127.0.0.1:8000/requests/bulk_upload_training_request_scores/\",\n\"http://127.0.0.1:8000/requests/bulk_upload_training_request_scores/confirm/\",\n\"http://127.0.0.1:8000/fiscal/organization/&lt;str:org_domain&gt;/\",\n\"http://127.0.0.1:8000/workshops/event/&lt;slug:slug&gt;/\",\n\"http://127.0.0.1:8000/workshops/event/&lt;slug:slug&gt;/review_metadata_changes/\",\n\"http://127.0.0.1:8000/workshops/event/&lt;slug:slug&gt;/delete/\",\n\"http://127.0.0.1:8000/workshops/event/&lt;slug:slug&gt;/edit/\",\n\"http://127.0.0.1:8000/workshops/persons/bulk_upload/confirm/\",\n\"http://127.0.0.1:8000/workshops/event/&lt;slug:slug&gt;/validate/\",\n</code></pre>"},{"location":"accessibility_testing/#manual-testing-workflow","title":"Manual Testing Workflow","text":"<p>This assumes you are testing in Google Chrome on a Windows computer. It's also possible to test in other browsers and OSs (indeed, this is encouraged), but some tools and features may differ (e.g. Device Mode). The AMY team are not experts, so this workflow is likely to evolve over time.</p> <ol> <li>Bookmark the Web Content Accessibility Guidelines 2.1, which we'll be using as a reference throughout.</li> <li>Create a spreadsheet which lists all the criteria, so you can mark each one passed or failed. Alternatively, use the WCAG-EM Report Tool, but note that it won't save your data if you close the page.</li> <li>Install the WAVE and axe devTools extensions (you don't need the Pro version of axe devTools)</li> <li>Run WAVE and axe devTools on the target page. Where there are failures, the extensions will state the associated WCAG criterion - mark this criterion failed.</li> <li>Run Lighthouse and/or Pa11y on a local version of the page (see Run accessibility tests locally), and note any failures. These should broadly match the output of axe devTools, but each package is slightly different in what info it provides.</li> <li>Step through the A11y Project Checklist and note any failures. Each checklist item is matched to a WCAG criterion.</li> <li>Use the Nu Html Checker to validate the HTML. You can do this by setting the input to 'Check by text input' and copy-pasting the test page's source code into it. Note: don't do this with the DJDT panel enabled, it makes the source code much larger and the checker will crash. (WCAG criterion: 4.1.1 Parsing)</li> <li>Use the Device Mode features in Chrome DevTools to simulate a mobile viewport. Use the 'Mobile S - 320px' width preset (on the bar just below the dimensions). Check if the page scrolls in two dimensions (bad) and if any content or functionality is lost. (WCAG criteria: 1.3.4 Orientation and 1.4.10 Reflow)</li> <li>Use a screen reader (e.g. NVDA, which is free) and keyboard-only navigation to operate the page. Is anything confusing or inaccessible? Map it to the appropriate WCAG criterion. (This step requires some practice with NVDA to effectively model how full-time screen reader users navigate pages. See Further Reading below.)</li> <li>Manually study the page to fill in any gaps that need some human assessment (e.g. WCAG 1.3.5 Identify Input Purpose, 2.4.5 Multiple Ways, 2.5.x Input Modalities, 3.2.3 Consistent Navigation, 3.2.4 Consistent Identification, 3.3.x Input Assistance)</li> <li>If the page has multiple states (e.g. a dropdown expanded, date picker activated, content appearing on hover/focus, etc.), repeat the process with the page in each state.</li> <li>If unsure if a pattern is a failure of a particular criterion X, read the 'Understanding X' and 'How to Meet X' pages, linked from X in the WCAG 2.1 document. If still unsure, make a note and move on.</li> </ol>"},{"location":"accessibility_testing/#further-reading","title":"Further Reading","text":"<ul> <li>Website Accessibility Conformance Evaluation Methodology (WCAG-EM) 1.0 - Procedure for selecting and auditing pages.</li> <li>How I Use My Screen Reader - Rhea Guntalalib (52 minute video)</li> <li>How A Screen Reader User Accesses The Web - L\u00e9onie Watson (1 hour, 12 minute video)</li> <li>Keyboard Shortcuts for NVDA - WebAIM</li> <li>Using NVDA to Evaluate Web Accessibility - WebAIM</li> <li>Perform an accessibility review on your website - Indiana University</li> <li>A 'learn as you do' accessibility checklist</li> <li>Introduction to Web Accessibility - edX (self-paced course)</li> <li>A11y Bookmarklets - A collection of accessibility-focused tools</li> </ul>"},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p>This project was funded in part by a grant from the National Science Foundation (0953694) to Prof. Ethan White.</p>"},{"location":"amy_database_structure/","title":"AMY Database structure","text":"<p>The primary tables used in AMY (that will appear in most queries) are those that store information on events, persons, memberships, organizations, and instructor training.  Additional tables provide more information about events, persons, memberships, and organizations.  This information can be useful in writing SQL queries in redash.</p>"},{"location":"amy_database_structure/#primary-tables-in-amy","title":"Primary Tables in AMY","text":""},{"location":"amy_database_structure/#events","title":"Events","text":"<p><code>workshops_event</code> - Primary table for all event data.</p>"},{"location":"amy_database_structure/#commonly-used-fields","title":"Commonly used fields","text":"<ul> <li><code>id</code> Sequential, automatically assigned integer</li> <li><code>start</code> and <code>end</code> Event start and end dates</li> <li><code>slug</code> Event's unique identifier in the form YYYY-MM-DD-sitename</li> <li><code>url</code> Event's website. Typically in the format username.github.io/YYYY-MM-DD-sitename (but not required)</li> <li><code>host_id</code> An integer representing the Event Host.  This is linked to the <code>workshops_organization</code> table</li> <li>Location based fields:</li> <li><code>venue</code> The venue name of the event</li> <li><code>address</code> The street address of the event</li> <li><code>latitude</code> and <code>longitude</code> Stored as floating point (decimal) numbers</li> <li><code>country</code> Stored as the two character country code</li> <li><code>contact</code> A list of email addresses listed as contacts for that workshop</li> <li><code>completed</code> A Boolean field to note that all work (including workshop coordination and data entry) is complete.</li> <li><code>assigned_to_id</code> The id of the Regional Coordinator or other Carpentries Core Team member assigned to this event. This is linked to the <code>workshops_person</code> table.</li> <li><code>language_id</code> The integer id of the language used at the workshop. This is not typically recorded. This is linked to the <code>workshops_language</code> table</li> <li><code>open_TTT_applications</code> Used only for instructor training events</li> <li><code>adminstrator_id</code> An integer representing the event organizer.  This is linked to the <code>workshops_organization</code> table. Historically any organization could be listed as an administrator. Recent updates to AMY limit this to Data Carpentry, Library Carpentry, Software Carpentry, Instructor Training, Collaborative Lesson Development Training, or self-organized. This enforcement is at the AMY app level, not at the database level.</li> <li><code>reg_key</code> Eventbrite registration key</li> <li><code>instructors_pre</code> Link to both pre- and post-workshop survey results.</li> </ul>"},{"location":"amy_database_structure/#unused-fields","title":"Unused fields","text":"<ul> <li><code>manual_attendance</code> We are no longer collecting or recording attendance</li> <li><code>admin_fee</code>, <code>invoice_status</code> We are not recording financial data in AMY</li> <li><code>repository_last_commit_hash</code>, <code>repository_metadata</code>, <code>metadata_all_changes</code>, <code>metadata_changed</code> Previously used to store metadata changes</li> <li><code>instructors_post</code> <code>learners_longterm</code> <code>learners_post</code> <code>learners_pre</code> Previously used to store links to surveys.</li> </ul>"},{"location":"amy_database_structure/#persons","title":"Persons","text":"<p><code>workshops_person</code> - Primary table for all person data. This includes all individuals, regardless of their role with The Carpentries.</p>"},{"location":"amy_database_structure/#commonly-used-fields_1","title":"Commonly used fields","text":"<ul> <li><code>id</code> Sequential, automatically assigned integer</li> <li><code>personal</code> <code>middle</code> <code>family</code> Three fields to hold the individual's name.  Only <code>personal</code> is required.</li> <li><code>email</code> Individual's primary email address. Used for user log in</li> <li><code>secondary_email</code> Alternate email address. Optional.</li> <li><code>gender</code> Options are <code>Prefer not to say (undisclosed)</code> <code>Female</code> <code>Gender variant / non-conforming</code> <code>Male</code> <code>Other</code>.</li> <li><code>gender_other</code> Text if individual selected <code>Other</code></li> <li><code>may_contact</code> A boolean field. We may not contact people if this field is false. This field has been replaced by new-style consents (see also 2021 Consents Project).</li> <li><code>github</code> Individual's GitHub user id</li> <li><code>twitter</code> Individual's Twitter user id</li> <li><code>bluesky</code> Individual's Bluesky user id</li> <li><code>mastodon</code> Individual's Mastodon url</li> <li><code>orcid</code> Individual's ORCID iD</li> <li><code>url</code> Link to the individual's personal website</li> <li><code>airport_id</code> An integer representing the person's self identified nearest.  This is linked to the <code>workshops_airport</code> table</li> <li><code>affiliation</code> A free text field representing the person's self identified institutional affliation. This is not linked to the <code>workshops_organization</code> table.</li> <li><code>occupation</code> A free text field representing the person's self identified occupation</li> <li><code>user_notes</code> Free text field with notes from the individual</li> <li><code>publish_profile</code> A boolean field that acknowledges permission to publish the individual's profile on our website pages such as the Instructors, Trainers, or Maintainers pages. This field has been replaced by new-style consents.</li> <li><code>country</code> Self identified country of residence. Stored as the [two character country code]</li> <li><code>lesson_publication_consent</code> Allows individual to consent to publishing their name associated with lesson contributions. Individual can select publication by name, ORCID iD, or GitHub id, or not consent to publishing their name or identity. This field has been replaced by new-style consents.</li> </ul>"},{"location":"amy_database_structure/#less-commonly-used-fields","title":"Less commonly used fields","text":"<ul> <li><code>last_login</code> When the user last logged in (regardless of their activity or permissions)</li> <li><code>is_superuser</code> Boolean field to note whether the person is a superuser, giving them all administrative privileges</li> <li><code>created_at</code> Autogenerated timestamp when the record is created</li> <li><code>last_updated_at</code> Autogenerated timestamp when the record was last updated</li> <li><code>duplication_reviewed_on</code> Timestamp tracking when a potential duplicate individual's record was reviewed</li> <li><code>is_active</code> A boolean field.  Only active users are able to log in to AMY</li> <li><code>data_privacy_agreement</code> Acknowledges user has read our data policy. Required the first time any user logs in</li> </ul>"},{"location":"amy_database_structure/#other-fields","title":"Other fields","text":"<ul> <li><code>password</code> Not stored as plain text. Do not use or modify this field for anything.</li> </ul>"},{"location":"amy_database_structure/#memberships","title":"Memberships","text":"<p><code>workshops_membership</code> - Stores information about each membership agreement.</p> <ul> <li><code>id</code> Sequential, automatically assigned integer.</li> <li><code>variant</code> Membership type (Gold, Silver, etc.)</li> <li><code>agreement_start</code> and <code>agreement_end</code> Membership term start and end dates</li> <li><code>extended</code> Integer; number of days the membership term end date has been extended by; <code>NULL</code> value indicates no extension</li> <li><code>contribution_type</code> Financial, Person-days, or Other</li> <li><code>workshops_without_admin_fee_per_agreement</code> Integer; number of centrally organized workshops allowed</li> <li><code>workshops_without_admin_fee_rolled_from_previous</code> Integer; number of centrally-organised workshops allowed that was rolled over from previous membership. This should be the same as <code>workshops_without_admin_fee_rolled_over</code> in preceding membership</li> <li><code>workshops_without_admin_fee_rolled_over</code> Integer; number of centrally-organised workshops allowed that was rolled over to succeeding membership. The same number should be recorded in <code>workshops_without_admin_fee_rolled_from_previous</code> in succeeding membership</li> <li><code>public_instructor_training_seats</code> Integer; number of public seats allowed in instructor training events in the original contract.</li> <li><code>additional_public_instructor_training_seats</code>  Integer; number of additional public seats allowed in instructor training events beyond the original contract.</li> <li><code>public_instructor_training_seats_rolled_from_previous</code> Integer; number of public instructor training seats allowed that was rolled over from previous membership. This should be the same as <code>public_instructor_training_seats_rolled_over</code> in preceding membership</li> <li><code>public_instructor_training_seats_rolled_over</code> Integer; number of public instructor training seats allowed that was rolled over to succeeding membership. The same number should be recorded in <code>public_instructor_training_seats_rolled_from_previous</code> in succeeding membership</li> <li><code>inhouse_instructor_training_seats</code> Integer; number of in-house seats allowed in instructor training events in the original contract.</li> <li><code>additional_inhouse_instructor_training_seats</code>  Integer; number of additional in-house seats allowed in instructor training events beyond the original contract.</li> <li><code>inhouse_instructor_training_seats_rolled_from_previous</code> Integer; number of in-house instructor training seats allowed that was rolled over from previous membership. This should be the same as <code>inhouse_instructor_training_seats_rolled_over</code> in preceding membership</li> <li><code>inhouse_instructor_training_seats_rolled_over</code> Integer; number of in-house instructor training seats allowed that was rolled over to succeeding membership. The same number should be recorded in <code>inhouse_instructor_training_seats_rolled_from_previous</code> in succeeding membership</li> <li><code>agreement_link</code> A link to the Member agreement in Google Drive</li> <li><code>registration_code</code> A string representing the code used by the Member site for Eventbrite registration and the instructor training application</li> <li><code>public_status</code> a string indicating agreement to publicising membership on The Carpentries websites</li> <li><code>emergency_contact</code> text with emergency contact data for the membership</li> <li><code>consortium</code> a boolean value indicating consortium (umbrella for more than one organisation member)</li> </ul>"},{"location":"amy_database_structure/#member","title":"Member","text":"<p><code>workshops_member</code> - Stores information about organisations and their roles in memberships.</p> <ul> <li><code>id</code> Sequential, automatically assigned integer.</li> <li><code>membership_id</code> - Integer linking membership instance</li> <li><code>organization_id</code> - Integer linking organisation instance</li> <li><code>role_id</code> - Integer linking member role instance</li> </ul>"},{"location":"amy_database_structure/#memberrole","title":"MemberRole","text":"<p><code>workshops_memberrole</code> - Stores roles for organisations in memberships.</p> <ul> <li><code>id</code> Sequential, automatically assigned integer.</li> <li><code>name</code> string with role's name, e.g. <code>contact_signatory</code> - preferably a computer-friendly format</li> <li><code>verbose_name</code> string with role's name suitable for humans, e.g. <code>Contact Signatory</code></li> </ul>"},{"location":"amy_database_structure/#membershiptask","title":"MembershipTask","text":"<p><code>fiscal_membershiptask</code> - Stores information about persons and their roles in memberships.</p> <ul> <li><code>id</code> Sequential, automatically assigned integer.</li> <li><code>membership_id</code> - Integer linking membership instance</li> <li><code>person_id</code> - Integer linking person instance</li> <li><code>role_id</code> - Integer linking membership person role instance</li> </ul>"},{"location":"amy_database_structure/#membershippersonrole","title":"MembershipPersonRole","text":"<p><code>fiscal_membershippersonrole</code> - Stores roles for persons in memberships.</p> <ul> <li><code>id</code> Sequential, automatically assigned integer.</li> <li><code>name</code> string with role's name - preferably a computer-friendly format</li> <li><code>verbose_name</code> string with role's name suitable for humans</li> </ul>"},{"location":"amy_database_structure/#organizations","title":"Organizations","text":"<p><code>workshops_organization</code> - Stores all organizations in AMY.</p> <ul> <li><code>id</code> Sequential, automatically assigned integer.  This is used by the <code>host_id</code> and <code>administrator_id</code> fields in the <code>workshops_event</code> table, and the <code>organization_id</code> field in the <code>workshops_membership</code> table.</li> <li><code>domain</code> Website of the organization</li> <li><code>fullname</code> Human friendly name of the organization</li> <li><code>country</code> Stored as the [two character country code]</li> <li><code>latitude</code> and <code>longitude</code> Stored as floating point (decimal) numbers</li> <li><code>affiliated_organizations</code> Many-to-many relationship between organizations; the purpose of this field is to \"link together\" organisations that in some way are related. For example, \"University of California\" organisation can be linked to \"University of California, Berkeley\", \"University of California, Davis\", and \"University of California, Los Angeles\".  This field is not being used.</li> </ul>"},{"location":"amy_database_structure/#training-applications","title":"Training applications","text":"<p><code>workshops_trainingrequest</code> - Primary table for all Instructor Training applications</p> <ul> <li><code>personal</code>, <code>middle</code>, <code>family</code> Three fields to hold the individual's name.</li> <li><code>person_id</code> This is linked to the <code>workshops_person</code> table after the trainee is matched to a Person</li> <li><code>state</code> State of the individual's application. Options are <code>a</code> (accepted), <code>p</code> (pending), <code>w</code> (withdrawn), <code>d</code> (discarded)</li> <li><code>email</code> Individual's primary email address. Used for user log in</li> <li><code>secondary_email</code> Alternate email address. Optional.</li> <li><code>affiliation</code> A free text field representing the person's self identified institutional affliation. This is not linked to the <code>workshops_organization</code> table.</li> <li><code>country</code> Stored as the [two character country code]</li> <li><code>location</code> Free text field to share location within country (city, province, state, etc.)</li> <li><code>underresourced</code> Boolean field whether individual is from an underresourced area</li> <li><code>underrepresented</code> Boolean field whether individual is from an underrepresented demographic<ul> <li><code>underrepresented_details</code> Details on the individual's underrepresented status</li> </ul> </li> <li><code>github</code> Individual's GitHub user id</li> <li><code>review_process</code> Whether this is an open or pre-approved (usually member) Training application</li> <li><code>group_name</code> Registration code used for pre-approved requests</li> <li><code>score_auto</code> Automatically generated score from application review</li> <li><code>score_manual</code> Manually adjusted score from application review</li> <li><code>score_notes</code> Notes about the individual's score</li> <li><code>workshop_teaching_agreement</code> Agreement that applicant agrees to teach a Carpentries workshop</li> <li><code>max_travelling_frequency</code> Frequency individual may travel to teach. Select one of given options.</li> <li><code>teaching_frequency_expectation</code> Frequency individual may teach. Select one of given options.</li> <li><code>occupation</code> Applicant's current occupation/career stage. Select one of given options.<ul> <li><code>occupation_other</code> Text if individual selected <code>Other</code></li> </ul> </li> <li><code>previous_training</code> Level of previous training as a teacher/instructor.  Select one of given options.<ul> <li><code>previous_training_other</code>  Text if individual selected <code>Other</code></li> </ul> </li> <li><code>programming_language_usage_frequency</code> Frequency in using programming languages.  Select one of given options.</li> <li><code>previous_experience</code> Applicant's previous experience teaching. Select one of given options.</li> <li><code>previous_experience_other</code> Text if individual selected <code>Other</code></li> <li><code>previous_experience_explanation</code> Free text field to describe teaching experience</li> <li><code>nonprofit_teaching_experience</code> Free text field to describe nonprofit teaching experience</li> <li><code>reason</code> Free text field to describe why individual wants to attend Instructor Training</li> <li><code>data_privacy_agreement</code> Consent agreeing to The Carpentries' data privacy policy</li> <li><code>code_of_conduct_agreement</code> Consent agreeing to The Carpentries' Code of Conduct</li> <li><code>user_notes</code> Free text field with notes from the individual</li> <li><code>created_at</code> and <code>last_updated_at</code>  Dates the record was created and last updated. Automatically generated by database.</li> </ul>"},{"location":"amy_database_structure/#training-progress","title":"Training progress","text":"<p><code>workshops_trainingrequirement</code> - Lists all available steps towards Instructor certification (Training Event, Welcome Session, etc.)</p> <ul> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>name</code> Name of requirement (Demo, Welcome Session, etc.)</li> <li><code>url_required</code> Notes whether a URL is required for this type of training requirement. Currently, no requirements require a URL, but some Get Involved activities do (see below).</li> <li><code>event_required</code> Notes whether an event is required for this type of training requirement.  This only applies to the Training (the actual event they attended).</li> <li><code>involvement_required</code> Notes whether an activity must be provided for this type of training requirement. This only applies to the Get Involved requirement where multiple different activities are acceptable.</li> </ul> <p><code>trainings_involvement</code> - Lists all activities that are accepted as part of the Get Involved training requirement (GitHub contribution, Workshop Instructor/helper, etc.) Note that this table uses the <code>trainings_</code> prefix, rather than <code>workshops_</code>.</p> <ul> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>name</code> A short name for the activity (GitHub Contribution, Community Meeting, etc.)</li> <li><code>display_name</code> A fully descriptive name for the activity (e.g. Attended an Instructor meeting, regional meetup, or other community meeting)</li> <li><code>url_required</code> Notes whether a URL must be provided for this type of activity.</li> <li><code>date_required</code> Notes whether a date must be provided for this type of activity. Currently, all activities require a date.</li> <li><code>notes_required</code> Notes whether text notes must be provided for this type of activity (such as when tracking an activity that is not covered by the existing options). These notes can come from either the trainee or an administrator.</li> </ul> <p><code>workshops_trainingprogress</code> - Connects <code>workshops_trainingrequirement</code>, <code>trainings_involvement</code>, and <code>workshops_person</code> to show what Persons have completed what steps of the checkout process.</p> <ul> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>created_at</code> and <code>last_updated_at</code>  Dates the record was created and last updated. Automatically generated by database.</li> <li><code>state</code> State of the trainee's progress.<ul> <li><code>p</code>: pass</li> <li><code>a</code>: ask to repeat</li> <li><code>f</code>: fail</li> <li><code>n</code>: not evaluated yet</li> </ul> </li> <li><code>requirement_id</code> id of the requirement that is being recorded. This is linked to the <code>workshops_trainingrequirement</code> table</li> <li><code>involvement_type_id</code> only for Get Involved requirement, id of the activity that is being recorded. This is linked to the <code>trainings_involvement</code> table</li> <li><code>trainee_id</code> id of the trainee being evaluated.  This is linked to the <code>workshops_person</code> table</li> <li><code>url</code> Link to a GitHub contribution, workshop website, etc.</li> <li><code>event_id</code> id of the event this trainee was at.  This is linked to the <code>workshops_event</code> table</li> <li><code>date</code> only for Get Involved requirement, the date of the activity (first day if the activity covered multiple days)</li> <li><code>trainee_notes</code> only for Get Involved requirement, notes submitted by the trainee</li> <li><code>notes</code> Notes written by an administrator</li> </ul>"},{"location":"amy_database_structure/#consents","title":"Consents","text":""},{"location":"amy_database_structure/#consent-terms","title":"Consent Terms","text":"<p><code>consents_term</code> - Stores all types of consent terms in AMY (e.g. privacy policy, permission to contact).</p> <ul> <li><code>slug</code> slug of the term. Used to uniquely identify the term.</li> <li><code>content</code> content of the term. This text is shown to users when they consent.</li> <li><code>training_request_content</code> if set, the regular <code>content</code> is replaced with this text when displaying this term on the instructor training request form.</li> <li><code>required_type</code> determines whether or not a term is considered required for the user or not. If required it is presented to the user when they first log in.</li> <li><code>help_text</code> additional text shown to the user in order to give more context on the term.</li> <li><code>short_description</code> a short description of the consent, shown in the admin view of a profile</li> <li><code>archived_at</code> if this term is archived, a timestamp of when it was archived</li> </ul>"},{"location":"amy_database_structure/#consent-term-options","title":"Consent Term Options","text":"<p><code>consents_termoption</code> - Stores all options for all terms in AMY. Options are displayed when the user is asked to consent to a particular term. Options are considered answer choices for the term.</p> <ul> <li><code>term_id</code> id of the term this option belongs to. This is linked to the <code>consents_term</code> table. Unarchived term options attached to a term will be displayed to the user when the term is rendered.</li> <li><code>option_type</code> determines whether or not a term option is considered as an agreement or a decline for that term.</li> <li><code>content</code> the text displayed to the user when the term is rendered.</li> <li><code>archived_at</code> a timestamp of when the option was archived or <code>NULL</code> if it wasn't</li> </ul>"},{"location":"amy_database_structure/#individual-consent","title":"Individual Consent","text":"<p><code>consents_consent</code> - Stores all consents for all users in AMY.</p> <ul> <li><code>person_id</code> id of the person providing the consent. This is linked to the <code>workshops_person</code> table.</li> <li><code>term_id</code> id of the term this consent applies to. This is linked to the <code>consents_term</code> table. There is a check on the Consent model to ensure the given TermOption belongs to the Term.</li> <li><code>term_option_id</code> id of the term option chosen in this consent. This is linked to the <code>consents_termoption</code> table. When this field is null, the consent has not been set by the user.</li> <li><code>archived_at</code> if this consent is archived, a timestamp of when it was archived.</li> </ul>"},{"location":"amy_database_structure/#training-request-consent","title":"Training Request Consent","text":"<p><code>consents_trainingrequestconsent</code> Stores all consents for all instructor training requests in AMY.</p> <ul> <li><code>training_request_id</code> id of the training request this consent option belongs to. This is linked to the <code>workshops_trainingrequest</code> table.</li> <li><code>term_id</code> id of the term this consent applies to. This is linked to the <code>consents_term</code> table. There is a check on the Consent model to ensure the given TermOption belongs to the Term.</li> <li><code>term_option_id</code> id of the term option chosen in this consent. This is linked to the <code>consents_termoption</code> table. When this field is null, the consent has not been set by the user.</li> <li><code>archived_at</code> a timestamp of when the consent was archived or <code>NULL</code> if it wasn't.</li> </ul>"},{"location":"amy_database_structure/#additional-tables-in-amy","title":"Additional Tables in AMY","text":""},{"location":"amy_database_structure/#badges","title":"Badges","text":"<ul> <li><code>workshops_badge</code> Lists all available badges (Instructor, Trainer, etc.)</li> <li><code>id</code> Sequential, automatically assigned integer. This is used by <code>badge_id</code> in the <code>workshops_award</code> table.</li> <li><code>criteria</code> Description of what this badge is</li> <li><code>title</code> Verbose, human friendly name of badge (e.g., Lesson Developer or Trainer)</li> <li> <p><code>name</code> \"back-end\" badge name (e.g., lesson-developer, trainer)</p> </li> <li> <p><code>workshops_award</code> Connects <code>workshops_badge</code> and <code>workshops_person</code> tables to show what Badges have been awarded to what Persons</p> </li> <li><code>id</code> Sequential, automatically assigned integer.</li> <li><code>awarded</code> Date the badge was awarded. This is usually the date it was recorded in AMY, not the date the person completed all requirements.</li> <li><code>badge_id</code> An integer representing the badge.  This is linked to the <code>workshops_badge</code> table</li> <li><code>event_id</code> An integer representing the event the badge came from.  This is linked to the <code>workshops_event</code> table</li> <li><code>person_id</code> An integer representing the person who got the badge.  This is linked to the <code>workshops_person</code> table</li> <li><code>awarded_by_id</code> An integer representing the person who awarded the badge (entered it in AMY).  This is linked to the <code>workshops_person</code> table</li> </ul>"},{"location":"amy_database_structure/#roles","title":"Roles","text":"<ul> <li><code>workshops_role</code> Lists all available roles (Instructor, Helper, Learner, etc.)</li> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>verbose_name</code>  Verbose, human friendly name of role (e.g., Workshop host, Supporting Instructor)</li> <li> <p><code>name</code>  \"back end\" task name (e.g., workshop-host, supporting-instructor)</p> </li> <li> <p><code>workshops_task</code> Connects <code>workshops_role</code>, <code>workshops_event</code>, and <code>workshops_person</code> tables to show what what Persons have served in what Roles at what Events</p> </li> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>event_id</code> An integer representing the event the person was at.  This is linked to the <code>workshops_event</code> table</li> <li><code>person_id</code> An integer representing the person who was at the event.  This is linked to the <code>workshops_person</code> table</li> <li><code>role_id</code> An integer representing the person's role.  This is linked to the <code>workshops_person</code> table</li> <li><code>seat_membership_id</code> Used for Instructor Training Learner role only.  An integer representing the membership this seat was assigned to.</li> <li><code>seat_public</code> Used for Instructor Training Learner role only.  Determines if the seat counts as public or in-house for the specific membership.</li> <li><code>seat_open_training</code> Used for Instructor Training Learner role only. Boolean field noting whether this was an open (non-member) training seat.</li> </ul>"},{"location":"amy_database_structure/#tags","title":"Tags","text":"<ul> <li><code>workshops_tag</code> Lists all availabe tags for an Event (SWC, DC, LC, Online, Pilot, Circuits, etc.)</li> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>name</code>  \"back end\" tag name</li> <li><code>details</code> Description of what tag is used for</li> <li> <p><code>priority</code> Used to control the sort order in the AMY web interface. Not relevant for any other queries.</p> </li> <li> <p><code>workshops_event_tags</code> Connects <code>workshops_tag</code> and <code>workshops_event</code> to show what Tags have been applied to what Events</p> </li> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>event_id</code> An integer representing the event that got that tag.  This is linked to the <code>workshops_event</code> table</li> <li><code>tag_id</code> An integer representing the tag that was assigned to that event.  This is linked to the <code>workshops_tag</code> table.</li> </ul>"},{"location":"amy_database_structure/#workshop-requests-workshop-inquiries-and-self-organised-submissions","title":"Workshop requests, workshop inquiries, and self-organised submissions","text":"<ul> <li><code>workshops_workshoprequest</code> List of all workshop requests.</li> <li><code>personal</code>, <code>family</code>, <code>email</code> See Persons.</li> <li><code>institution</code> Integer representing the individual's affiliation. Linked to the <code>workshops_organizations</code> table. May be empty as some people specify their institution using free text fields.</li> <li><code>member_code</code> The member code that this workshop should be associated with if accepted. Optional.</li> <li><code>online_inperson</code> Options are <code>Online</code>, <code>In person</code>, <code>Not sure</code>.</li> <li><code>location</code>, <code>country</code>, <code>language</code> See Events.</li> <li><code>requested_workshop_types</code> List of integers representing the curricula requested for the workshop. Linked to the <code>workshops_curriculum</code> table.</li> <li> <p><code>carpentries_info_source</code> How the individual found out about The Carpentries.</p> </li> <li> <p><code>extrequests_workshopinquiry</code> List of all workshop inquiries. Relevant fields closely mirror those under <code>workshops_workshoprequest</code>.</p> </li> <li> <p><code>extrequests_selforganisedsubmission</code> List of all self-organized submissions.</p> </li> <li><code>start</code>, <code>end</code>, <code>workshop_url</code>, <code>location</code>, <code>country</code>, <code>language</code> See Events.</li> <li><code>workshop_format</code> Options are <code>Standard two-day Carpentries workshop</code>, <code>Short session (less than two days)</code>, <code>Modules taught over a period of time (several weeks, one semester, etc.)</code>, and <code>Other</code>.<ul> <li><code>workshop_format_other</code> Text if individual selected <code>Other</code>.</li> </ul> </li> <li><code>workshop_types</code> Integer representing the curricula requested for the workshop. Linked to the <code>workshops_curriculum</code> table.<ul> <li><code>workshop_types_other_explain</code> Text if individual selected <code>Mix &amp; Match</code>.</li> </ul> </li> </ul>"},{"location":"amy_database_structure/#training-requests","title":"Training requests","text":"<ul> <li><code>workshops_trainingrequest</code> Lists all training requests submitted by community members. List of fields omits free-text fields except for \"other\" options.</li> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>review_process</code>  Either preapproved (meaning associated with a membership) or open.</li> <li><code>member_code</code> The member code that this training seat should be associated with if accepted. Only present if <code>review_process</code> is preapproved.</li> <li><code>personal</code>, <code>family</code>, <code>email</code>, <code>github</code>, <code>affiliation</code>, <code>country</code>, <code>occupation</code> See Persons.</li> <li><code>underresourced</code> A boolean field indicating whether the individual's affiliation is small, remote, or under-resourced.</li> <li><code>domains</code> A list of areas where the individual has expertise.<ul> <li><code>domains_other</code> Text if individual selected <code>Other</code>.</li> </ul> </li> <li><code>underrepresented</code> Whether the individual self-identifies with a group that is under-represented in research and/or computing. Options are <code>Yes</code>, <code>No</code>, and <code>Prefer not to say</code>.<ul> <li><code>underrepresented_details</code> Text if individual chose to share more information.</li> </ul> </li> <li><code>previous_involvement</code> List of types of previous involvement with the Carpentries, e.g. Helper, Learner.</li> <li><code>previous_training</code> Amount of previous teacher/instructor training.<ul> <li><code>previous_training_other</code> Text if individual selected <code>Other</code>.</li> </ul> </li> <li><code>previous_experience</code> Amount of previous teaching experience.<ul> <li><code>previous_experience_other</code> Text if individual selected <code>Other</code>.</li> </ul> </li> <li><code>programming_language_usage_frequency</code> How regularly the individual uses tools that The Carpentries teach, such as R, Python, and Git.</li> <li><code>checkout_intent</code> Whether the individual intends to complete checkout.</li> <li><code>teaching_intent</code> Whether the individual intends to teach Carpentries workshops once certified. This may be local, central, or both.</li> <li><code>teaching_frequency_expectation</code> How often the individual intends to teach Carpentries workshops once certified.<ul> <li><code>teaching_frequency_expectation_other</code> Text if individual selected <code>Other</code>.</li> </ul> </li> <li><code>score_auto</code> Automatic score generated by AMY.</li> <li><code>score_manual</code> Manually entered score.</li> </ul>"},{"location":"amy_database_structure/#training-progress_1","title":"Training progress","text":"<ul> <li><code>workshops_trainingrequirement</code>  Lists all available steps towards Instructor certification (Training Event, Welcome Session, etc.)</li> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>name</code> Name of requirement (Demo, Welcome Session, etc.)</li> <li><code>url_required</code> Notes whether a URL is required for this type of training requirement. Currently, no requirements require a URL, but some Get Involved activities do (see below).</li> <li><code>event_required</code> Notes whether an event is required for this type of training requirement.  This only applies to the Training (the actual event they attended).</li> <li> <p><code>involvement_required</code> Notes whether an activity must be provided for this type of training requirement. This only applies to the Get Involved requirement where multiple different activities are acceptable.</p> </li> <li> <p><code>trainings_involvement</code> Lists all activities that are accepted as part of the Get Involved training requirement (GitHub contribution, Workshop Instructor/helper, etc.) Note that this table uses the <code>trainings_</code> prefix, rather than <code>workshops_</code>.</p> </li> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>name</code> A short name for the activity (GitHub Contribution, Community Meeting, etc.)</li> <li><code>display_name</code> A fully descriptive name for the activity (e.g. Attended an Instructor meeting, regional meetup, or other community meeting)</li> <li><code>url_required</code> Notes whether a URL must be provided for this type of activity.</li> <li><code>date_required</code> Notes whether a date must be provided for this type of activity. Currently, all activities require a date.</li> <li> <p><code>notes_required</code> Notes whether text notes must be provided for this type of activity (such as when tracking an activity that is not covered by the existing options). These notes can come from either the trainee or an administrator.</p> </li> <li> <p><code>workshops_trainingprogress</code> Connects <code>workshops_trainingrequirement</code>, <code>trainings_involvement</code>, and <code>workshops_person</code> to show what Persons have completed what steps of the checkout process.</p> </li> <li><code>id</code>  Sequential, automatically assigned integer.</li> <li><code>created_at</code> and <code>last_updated_at</code>  Dates the record was created and last updated. Automatically generated by database.</li> <li><code>state</code> State of the trainee's progress.<ul> <li><code>p</code>: pass</li> <li><code>a</code>: ask to repeat</li> <li><code>f</code>: fail</li> <li><code>n</code>: not evaluated yet</li> </ul> </li> <li><code>requirement_id</code> id of the requirement that is being recorded. This is linked to the <code>workshops_trainingrequirement</code> table</li> <li><code>involvement_type_id</code> only for Get Involved requirement, id of the activity that is being recorded. This is linked to the <code>trainings_involvement</code> table</li> <li><code>trainee_id</code> id of the trainee being evaluated.  This is linked to the <code>workshops_person</code> table</li> <li><code>url</code> Link to a GitHub contribution, workshop website, etc.</li> <li><code>event_id</code> id of the event this trainee was at.  This is linked to the <code>workshops_event</code> table</li> <li><code>date</code> only for Get Involved requirement, the date of the activity (first day if the activity covered multiple days)</li> <li><code>trainee_notes</code> only for Get Involved requirement, notes submitted by the trainee</li> <li><code>notes</code> Notes written by an administrator</li> </ul>"},{"location":"amy_database_structure/#term","title":"Term","text":"<p><code>consents_term</code> - Stores all consent terms in AMY (e.g. privacy policy, permission to contact).</p>"},{"location":"amy_database_structure/#archive-behavior","title":"Archive Behavior","text":"<p>When a term is archived, that term's associated options and consents are archived as well. If the term was required, once archived it is no longer required in AMY.</p>"},{"location":"amy_database_structure/#commonly-used-fields_2","title":"Commonly used fields","text":"<ul> <li><code>slug</code> slug of the term. Used to uniquely identify the term.</li> <li><code>content</code> content of the term. This text is shown to users when they consent.</li> <li><code>training_request_content</code> if set, the regular <code>content</code> is replaced with this text when displaying this term on the instructor training request form.</li> <li><code>required_type</code> determines whether or not a term is considered required for the user or not. If required it is presented to the user when they first log in.</li> <li><code>help_text</code> additional text shown to the user in order to give more context on the term.</li> <li><code>short_description</code> a short description of the consent, shown in the admin view of a profile</li> <li><code>archived_at</code> if this term is archived, a timestamp of when it was archived</li> </ul>"},{"location":"amy_database_structure/#termoption","title":"TermOption","text":"<p><code>consents_termoption</code> - Stores all options for all terms in AMY. Options are displayed when the user is asked to consent to a particular term. Options are considered answer choices for the term.</p>"},{"location":"amy_database_structure/#archive-behavior_1","title":"Archive Behavior","text":"<p>When an option is archived, any consents that rely on that option are archived and a new unset consent is created by AMY for the user. If the term the option was attached to is required, archiving the option may result in an email sent to any users who answered with this option.</p>"},{"location":"amy_database_structure/#commonly-used-fields_3","title":"Commonly used fields","text":"<ul> <li><code>term_id</code> id of the term this option belongs to. This is linked to the <code>consents_term</code> table. Unarchived term options attached to a term will be displayed to the user when the term is rendered.</li> <li><code>option_type</code> determines whether or not a term option is considered as an agreement or a decline for that term.</li> <li><code>content</code> the text displayed to the user when the term is rendered.</li> <li><code>archived_at</code> a timestamp of when the option was archived or <code>NULL</code> if it wasn't</li> </ul>"},{"location":"amy_database_structure/#consent","title":"Consent","text":"<p><code>consents_consent</code> - Stores all consents for all users in AMY.</p>"},{"location":"amy_database_structure/#archive-behavior_2","title":"Archive Behavior","text":"<p>When consents are archived, a new unset consent is created by AMY for each term involved.</p>"},{"location":"amy_database_structure/#commonly-used-fields_4","title":"Commonly used fields","text":"<ul> <li><code>person_id</code> id of the person providing the consent. This is linked to the <code>workshops_person</code> table.</li> <li><code>term_id</code> id of the term this consent applies to. This is linked to the <code>consents_term</code> table. There is a check on the Consent model to ensure the given TermOption belongs to the Term.</li> <li><code>term_option_id</code> id of the term option chosen in this consent. This is linked to the <code>consents_termoption</code> table. When this field is null, the consent has not been set by the user.</li> <li><code>archived_at</code> if this consent is archived, a timestamp of when it was archived.</li> </ul>"},{"location":"amy_database_structure/#trainingrequestconsent","title":"TrainingRequestConsent","text":"<p><code>consents_trainingrequestconsent</code> Stores all consents for all instructor training requests in AMY.</p>"},{"location":"amy_database_structure/#archive-behavior_3","title":"Archive Behavior","text":"<p>When training request consents are archived, a new unset consent is created by AMY for each term involved.</p>"},{"location":"amy_database_structure/#commonly-used-fields_5","title":"Commonly used fields","text":"<ul> <li><code>training_request_id</code> id of the training request this consent option belongs to. This is linked to the <code>workshops_trainingrequest</code> table.</li> <li><code>term_id</code> id of the term this consent applies to. This is linked to the <code>consents_term</code> table. There is a check on the Consent model to ensure the given TermOption belongs to the Term.</li> <li><code>term_option_id</code> id of the term option chosen in this consent. This is linked to the <code>consents_termoption</code> table. When this field is null, the consent has not been set by the user.</li> <li><code>archived_at</code> a timestamp of when the consent was archived or <code>NULL</code> if it wasn't.</li> </ul>"},{"location":"authors/","title":"Authors","text":"<p>Updated on 2021-10-28.</p> <p>These people contributed to AMY:</p> <ul> <li>pbanaszkiewicz</li> <li>gvwilson</li> <li>chrismedrela</li> <li>lauryndbrown</li> <li>aditnryn</li> <li>Greg Wilson</li> <li>maneesha</li> <li>wking</li> <li>dependabot[bot]</li> <li>fmichonneau</li> <li>rbeagrie</li> <li>sburns</li> <li>neon-ninja</li> <li>staeff</li> <li>marwahaha</li> <li>drio</li> <li>shapiromatron</li> <li>shubhsingh594</li> <li>Raniere Silva</li> <li>ErinBecker</li> <li>carlosp420</li> <li>jduckles</li> <li>cudevmaxwell</li> <li>nikhilweee</li> <li>prerit2010</li> <li>darshan95</li> <li>askingalot</li> <li>Christopher Medrela</li> <li>Jonah Duckles</li> <li>timtomch</li> </ul> <p>The list was generated using this Python script:</p> <pre><code>import requests\nURL = \"https://api.github.com/repos/carpentries/amy/contributors?anon=1\"\ndata = requests.get(URL).json()\ncontributors = [\n    (c.get(\"name\", c.get(\"login\", \"anonymous\")), c.get(\"html_url\")) for c in data\n]\nfor login, url in contributors:\n    if url:\n        print(f'* [{login}]({url})')\n    else:\n        print(f'* {login}')\n</code></pre>"},{"location":"manual_deployment_steps/","title":"Release-Specific Manual Deployment Steps","text":"<p>This document tracks steps that must be completed manually before or after the specified release is deployed.</p>"},{"location":"manual_deployment_steps/#v43","title":"v4.3","text":""},{"location":"manual_deployment_steps/#before","title":"Before","text":""},{"location":"manual_deployment_steps/#member-docs","title":"Member docs","text":"<ol> <li>Check for TrainingProgress with non-unique combinations of <code>trainee</code> and <code>event</code> (excluding nulls), and remove duplicates. This is required for the migration <code>workshops.0264_trainingprogress_unique_trainee_at_event</code> to succeed.</li> </ol>"},{"location":"manual_deployment_steps/#automated-emails","title":"Automated emails","text":"<ol> <li>Deploy the worker correctly to PROD environment</li> <li>Prepare production email worker account only with <code>knox.add_authtoken</code> permission and active status<ul> <li>put this account credentials in SSM parameters <code>/{stage}/email-worker/token_username</code> and <code>/{stage}/email-worker/token_password</code></li> </ul> </li> </ol>"},{"location":"manual_deployment_steps/#after","title":"After","text":"<ul> <li>Update Redash queries about training requests to change <code>group_name</code> to <code>member_code</code> (in line with changes to the <code>TrainingRequest</code> model).</li> <li>Update new email templates in production before running the script to migrate emails from the old system - see https://github.com/carpentries/amy/issues/2707 for details.</li> <li>Run email migration script on the server: <code>./manage.py create_emails_for_existing_events</code>.</li> </ul>"},{"location":"manual_deployment_steps/#v42","title":"v4.2","text":""},{"location":"manual_deployment_steps/#before_1","title":"Before","text":"<ul> <li>Add variables to Ansible playbook to set <code>EMAIL_MODULE_ENABLED</code> flag</li> </ul>"},{"location":"manual_deployment_steps/#after_1","title":"After","text":"<ul> <li> <p>Run seeding scripts <code>seed_training_requirements.py</code> and <code>seed_involvements.py</code> on the server:</p> <pre><code>$ sudo su\n# cd /webapps/amy.carpentries.org/repo/\n# source .venv/bin/postactivate\n# .venv/bin/python3 manage.py runscript seed_involvements\n# .venv/bin/python3 manage.py runscript seed_training_requirements\n</code></pre> </li> <li> <p>Merge updated documentation to <code>develop</code></p> </li> </ul>"},{"location":"procedures/","title":"Procedures","text":""},{"location":"procedures/#specifying-a-milestone-version","title":"Specifying a milestone (version)","text":"<p>AMY follows Semantic Versioning when possible; however, since this is a web application and not a library, we have come up with these rules to bumping versions:</p> <ul> <li>hotfix or a fix release: bump patch version</li> <li>normal release: bump minor version</li> <li>major changes (e.g. big project gets merged): bump major version.</li> </ul> <p>In future, once CI/CD is implemented, we may consider switching to commitizen which will help with generating changelogs and bumping versions accordingly.</p> <p>Milestone name should indicate the release version. For example, if next release is <code>v3.15.0</code>, then the milestone collecting issues and PRs should be named <code>v3.15</code> or <code>v3.15.0</code>.</p>"},{"location":"procedures/#feature-development","title":"Feature development","text":"<p>Developers are encouraged to use feature flags for development of new features in case they would have to be released to production in dark.</p>"},{"location":"procedures/#on-the-end-of-each-milestone","title":"On the End of Each Milestone","text":"<ol> <li> <p>Close milestone using GitHub UI.</p> </li> <li> <p>Run <code>python docs/generate_changelog.py MILESTONE_NAME</code> to generate changelog for given    release; paste command's output to the top of <code>CHANGELOG.md</code> file.</p> </li> <li> <p>Follow Release Procedure.</p> </li> <li> <p>Consider manual steps to do before the release: manual deployment steps.</p> </li> <li> <p>Follow Deployment Procedure.</p> </li> <li> <p>Consider manual steps to do after the release: manual deployment steps.</p> </li> <li> <p>Write user-friendly release notes and share them in release announcements on Slack - use <code>#core-team</code> for admin-only changes and <code>#general</code> for community-facing changes.</p> </li> </ol>"},{"location":"procedures/#release-procedure","title":"Release Procedure","text":"<p>We assume that you want to release AMY v2.X.Y.</p> <p>Execute the following commands on your local machine, not production.</p> <ol> <li> <p>Move to AMY root directory (the one with <code>manage.py</code> file) using <code>cd</code> command.</p> </li> <li> <p>Make sure you have configured repositories:</p> <ul> <li><code>origin</code> for <code>carpentries/amy</code> repo on GitHub</li> </ul> <p>For example, this is the correct configuration:</p> <pre><code>$ git remote -v\norigin  git@github.com:carpentries/amy.git (fetch)\norigin  git@github.com:carpentries/amy.git (push)\n</code></pre> </li> <li> <p>Make sure your local <code>develop</code> and <code>main</code> branches are up to date:</p> <pre><code>$ git checkout develop\n$ git pull origin develop\n\n$ git checkout main\n$ git pull origin main\n</code></pre> </li> <li> <p>Create a release branch <code>release/vX.Y.Z</code>. Major/minor release branches should be based on the <code>HEAD</code> of <code>develop</code>, but bugfix releases may be based on older commits, such as the previous release branch or <code>main</code>, to avoid including features intended for the next major/minor release. For more details on managing branches, see https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow.</p> </li> <li> <p>Bugfix releases only: Cherry-pick commits from <code>develop</code> to <code>release/vX.Y.Z</code> as required to fix bugs. Skip any commits that add new features.</p> </li> <li> <p>Merge <code>release/vX.Y.Z</code> into <code>main</code> branch (be careful, as there are sometimes conflicts that need to be manually resolved):</p> <pre><code>$ git checkout main\n$ git merge --no-ff release/vX.Y.Z\n</code></pre> </li> <li> <p>Bump version on <code>main</code> (non-dev version corresponding to the milestone):</p> <pre><code>$ # manually edit version in `pyproject.toml` and `package.json`\n$ # use non-dev version string, e.g. `\"v3.3.0\"`\n$ git add pyproject.toml package.json\n$ git commit -m \"Bumping version to vX.Y.0\"\n</code></pre> </li> <li> <p>Just to be safe, run tests:</p> <pre><code>$ make test\n</code></pre> </li> <li> <p>Tag a release.</p> <pre><code>$ git tag -a \"vX.Y.0\" -s -m \"AMY release vX.Y.0\"\n</code></pre> <p>Omit <code>-s</code> flag if you cannot create signed tags. See Git documentation for more info about signed tags.</p> </li> <li> <p>Push <code>main</code> and the new tag everywhere:</p> <pre><code>$ git push origin main --tags\n</code></pre> </li> <li> <p>Bump version on <code>develop</code> (dev version corresponding to the milestone):</p> <pre><code>$ git checkout develop\n$ # manually edit version in `pyproject.toml` and `package.json`\n$ # use dev version string, e.g. `\"v3.4.0-dev\"`\n$ git add pyproject.toml package.json\n$ git commit -m \"Bumping version to vX.Y.0-dev\"\n</code></pre> <p>This step is only needed if next development cycle begins (ie. no hotfix release was done).</p> </li> <li> <p>And push it everywhere:</p> <pre><code>$ git push origin develop\n</code></pre> </li> </ol>"},{"location":"procedures/#deployment-procedure-using-ansible","title":"Deployment procedure using Ansible","text":"<ol> <li> <p>Back up the database through the AWS console (RDS &gt; Databases &gt; (cluster name) &gt; Actions (top right) &gt; Take snapshot). Use the naming scheme <code>vA-B-C-YYYY-MM-DD</code> for version A.B.C (the version before the one that will be deployed) and date YYYY-MM-DD, e.g. <code>v4-2-0-2023-08-12</code>.</p> </li> <li> <p>Check for pending maintenance through the AWS console (RDS &gt; Databases &gt; (cluster name) &gt; Maintenance and Backups (below Summary section)) and complete it if needed.</p> </li> <li> <p>Complete any Manual Deployment Steps noted for before deployment of this release.</p> </li> <li> <p>Run the Ansible deployment as described in the relevant repository <code>README.md</code>.</p> </li> <li> <p>Complete any Manual Deployment Steps noted for after deployment of this release.</p> </li> </ol>"},{"location":"database/migration/","title":"Migration from SQLite to PostgreSQL","text":"<p>Clear PostgreSQL database with drop/create commands or with <code>manage.py</code>:</p> <p><pre><code>DROP SCHEMA public CASCADE;\nCREATE SCHEMA public;\n</code></pre> or <pre><code>$ DATABASE_URL=postgresql://amy:...@.../amy python manage.py reset_db\n</code></pre></p> <p>Migrate the new server with latest migrations:</p> <pre><code>$ DATABASE_URL=postgresql://amy:...@.../amy python manage.py migrate\n</code></pre> <p>Some of the migrations have data migrations, and create entries in the database. The same data will be included in the database dump from SQLite, so one way to work around this issue is to flush the database (remove existing data):</p> <pre><code>$ DATABASE_URL=postgresql://amy:...@.../amy python manage.py flush\n</code></pre> <p>Flushing doesn't affect installed permissions, content types and sites. They need to be cleaned individually:</p> <pre><code>TRUNCATE auth_permission CASCADE;\nTRUNCATE django_site CASCADE;\nTRUNCATE django_content_type CASCADE;\n</code></pre> <p>All these three will be brought back with separate dump.</p> <p>WARNING! Don't remove migration data from <code>django_migration</code> table.</p> <p>Make latest backup of SQLite database:</p> <pre><code>$ cd /webapps/amy.carpentries.org/repo/ &amp;&amp; sqlite3 db.sqlite3  \".backup newest_backup.sqlite3\"\n</code></pre> <p>Prepare data dump with Django:</p> <pre><code>$ DATABASE_URL=sqlite:///newest_backup.sqlite3 python manage.py dumpdata contenttypes auth.permission sites --indent 1 &gt; data_others.json\n$ DATABASE_URL=sqlite:///newest_backup.sqlite3 python manage.py dumpdata -e contenttypes -e auth.permission -e sites --indent 1 &gt; data.json\n</code></pre> <p>Load the first dump into PostgreSQL:</p> <pre><code>$ DATABASE_URL=postgresql://amy:...@.../amy python manage.py loaddata data_others.json\n</code></pre> <p>Verify the number of objects installed: 311.</p> <p>Load the second dump into PostgreSQL:</p> <pre><code>$ DATABASE_URL=postgresql://amy:...@.../amy python manage.py loaddata data.json\n</code></pre> <p>Verify the number of objects installed: 353514 (or more).</p>"},{"location":"design/","title":"AMY Design Notes","text":"<p>This document includes details on implementation of AMY internals.</p> <p>Table of contents:</p> <ol> <li>Application design</li> <li>Database models</li> <li>Model versioning</li> <li>Templates hierarchy</li> <li>Views hierarchy</li> <li>Design patterns reference</li> <li>Server infrastructure</li> </ol>"},{"location":"design/application_design/","title":"Application design","text":""},{"location":"design/application_design/#history","title":"History","text":"<p>For a long time, AMY was almost single-application project: most of the logic, models and views was contained in <code>workshops</code> application; there was also <code>api</code> application and <code>extforms</code> for showing forms to the external users.</p> <p><code>workshops</code> grew to a massive size and needed splitting into smaller applications. However, some previous design decisions made the split complicated. Namely versioning system, provided by django-reversion, due to model instance serialization, was not flexible when it came to data migration, and very difficult when it came to move the underlying model to another app.</p>"},{"location":"design/application_design/#application-structure","title":"Application structure","text":"<p>The new application structure contains:</p> <ul> <li><code>api</code> - for CRUD API interface provided by DRF,</li> <li><code>autoemails</code> - for automated emails application (v1, 2019) - now being deprecated,</li> <li><code>communityroles</code> - for community roles project application,</li> <li><code>consents</code> - for consents project application,</li> <li><code>dashboard</code> - for admin and instructor dashboard views,</li> <li><code>emails</code> - for current automated emails application (v2, 2023),</li> <li><code>extcomments</code> - for overriding some functions from   <code>django-contrib-comments</code>   third party application for comments,</li> <li><code>extforms</code> - for forms available externally, ie. for unauthenticated users; these   forms are quite complex, and they represent models:<ul> <li><code>TrainingRequest</code>,</li> <li><code>WorkshopRequest</code>,</li> <li><code>WorkshopInquiryRequest</code>,</li> <li><code>SelfOrganisedSubmission</code>;</li> </ul> </li> <li><code>extrequests</code> - for all <code>*Request</code> objects (logic related to <code>WorkshopRequest</code> and   <code>TrainingRequest</code>, but here's also where <code>WorkshopInquiryRequest</code> and   <code>SelfOrganisedSubmission</code> models are defined),</li> <li><code>fiscal</code> - for organisations and memberships (although most of the models are defined   in <code>workshops</code> application; here is logic related to them),</li> <li><code>recruitment</code> - for instructor selection project application,</li> <li><code>reports</code> - for reports,</li> <li><code>trainings</code> - for managing trainees and trainings,</li> <li><code>workshops</code> - for persons and workshops management, including tasks and badges.</li> </ul> <p><code>workshops</code> application still takes a lead in many areas, and for now should be considered \"core\" application. For example it defines many reusable classes, like <code>TestBase</code> for base test case, or multiple model mixins. Globally used template tags and utilities are also defined there.</p>"},{"location":"design/application_design/#api","title":"API","text":"<p>Application with CRUD-like views using Django Rest Framework. It's not heavily used, mostly for single cases when we need to provide async experience to the user via JavaScript.</p>"},{"location":"design/application_design/#automated-emails","title":"Automated emails","text":"<p>A big project from 2019-2020. Contains actions that trigger sending emails on specific time after the action has taken place.</p> <p>Automated emails project documentation.</p>"},{"location":"design/application_design/#community-roles","title":"Community Roles","text":"<p>2021-2022 Project to implement badge-like mechanism for assigning roles to people in The Carpentries community.</p>"},{"location":"design/application_design/#consents","title":"Consents","text":"<p>2021+ Project for providing more configurable and more descriptive consents for AMY users. 2021+ Project for archiving person profile.</p> <p>Consents project documentation.</p>"},{"location":"design/application_design/#dashboard","title":"Dashboard","text":"<p>Contains generic views for admins, and logic for instructor dashboard.</p>"},{"location":"design/application_design/#external-comments","title":"(External) Comments","text":"<p>Contains small extensions or changes applied to <code>django-contrib-comments</code> application.</p>"},{"location":"design/application_design/#external-requests-forms","title":"External Requests, Forms","text":"<p>Applications together provide logic for forms non-AMY users fill out (<code>extforms</code>, external forms). <code>extforms</code> provides forms, while <code>extrequests</code> provides admin views and models (except for the models defined in <code>workshops</code> application).</p> <p>Many of the views defined in <code>extrequests</code> contain logic for triggering automated emails.</p>"},{"location":"design/application_design/#fiscal","title":"Fiscal","text":"<p>Admin application for managing organisations and memberships. Since 2021 Memberships project, handling memberships was extended and adjusted to The Carpentries' needs.</p>"},{"location":"design/application_design/#recruitment","title":"Recruitment","text":"<p>2021-2022 Instructor Selection project. Enables instructors to apply for teaching at workshops directly with AMY, instead of using old techniques (a spreadsheet).</p>"},{"location":"design/application_design/#reports","title":"Reports","text":"<p>Contains multiple admin views for, for example, listing issues with workshops or duplicate persons.</p>"},{"location":"design/application_design/#trainings","title":"Trainings","text":"<p>Application for managing trainees (people in training) and trainings.</p>"},{"location":"design/application_design/#workshops","title":"Workshops","text":"<p>Core application for managing persons, events, badges, tasks, and roles.</p>"},{"location":"design/cicd/","title":"CI/CD","text":"<p>CI stands for \"Continuous Integration\" and CD stands for \"Continuous Deployment\".</p> <p>The goal of CI/CD is to have a fully automated process of deploying new versions of AMY to a server. Currently it is only working for testing stage, but could be extended to production at some point, too.</p> <p>During CI stage, the following happens:</p> <ol> <li>Code is pushed to GitHub.</li> <li>GitHub Actions runs tests.</li> <li>If tests pass, then a new Docker image is built and pushed to AWS Elastic Container Registry (ECR).</li> </ol> <p>Then CD stage starts:</p> <ol> <li>A new version of AMY is deployed to testing stage.</li> </ol> <p>The CI/CD pipeline is run by GitHub Actions. It is defined in <code>.github/workflows/cicd_develop.yml</code> (for <code>develop</code> branch) file.</p> <p>Note that there is another workflow <code>.github/workflows/cicd_main.yml</code> that is run only for the <code>main</code> branch, but it doesn't contain any other steps (stages) than <code>test</code>.</p>"},{"location":"design/cicd/#stage-details","title":"Stage details","text":""},{"location":"design/cicd/#test","title":"Test","text":"<p>There is a separate <code>test</code> stage for CI/CD defined in <code>.github/workflows/test.yml</code> file and included in the main <code>cicd_develop.yml</code> file. It installs all the dependencies, sets up database and runs tests.</p>"},{"location":"design/cicd/#build","title":"Build","text":"<p>The <code>build</code> stage is defined in <code>.github/workflows/cicd_develop.yml</code> file. After logging in to AWS ECR, it builds a Docker image and pushes it to AWS ECR with last commit hash as a image tag.</p>"},{"location":"design/cicd/#deploy","title":"Deploy","text":"<p>The <code>deploy</code> stage is defined in <code>.github/workflows/cicd_develop.yml</code> file. It is only run when GitHub Actions is triggered by a push to <code>develop</code> branch, either through a PR merge or direct push.</p> <p>Deployment uses an AWS Elastic Container Service (ECS) task definition downloaded to a GitHub agent. Then this file has the image tag updated to the one that was built in the <code>build</code> stage. Then the task definition is uploaded to AWS ECS and a new task is started.</p>"},{"location":"design/database_backups/","title":"Production database backups","text":"<p>Production database is backed-up by AWS with two of their services:</p> <ol> <li>AWS Relational Database Service (RDS) snapshots and backups</li> <li>AWS Backup.</li> </ol> <p>Additional backups are:</p> <ol> <li>created before starting any deployment starts</li> <li>automatically run via a cronjob on the server.</li> </ol>"},{"location":"design/database_backups/#backup-system","title":"Backup system","text":"<p>Both services back the database by creating snapshots. They are incremental and allow to restore the database as a complete service. So it doesn't matter which PostgreSQL database is restored, it will be the whole server as a new instance.</p>"},{"location":"design/database_backups/#aws-relational-database-service-rds","title":"AWS Relational Database Service (RDS)","text":"<p>The database is set up to have a daily snapshot around 7 AM UTC. The rentention period is 35 days, and older snapshots are deleted.</p>"},{"location":"design/database_backups/#aws-backup","title":"AWS Backup","text":"<p>This is an additional backup service. It also makes daily snapshots of the database, and they also have a rentention of 35 days. The difference is in longer time period. After 35 days, AWS Backup keeps one snapshot per month.</p>"},{"location":"design/database_backups/#deployment-backups","title":"Deployment backups","text":"<p>Additional backups are created before starting any deployment with <code>pg_dump</code>. They are stored locally on the server.</p> <p>A good practice is to create a manual snapshot in AWS console before starting a deployment. Manual snapshots are not deleted automatically.</p>"},{"location":"design/database_backups/#automatic-backup-from-inside-of-the-server","title":"Automatic backup from inside of the server","text":"<p>A script is set up to run every 30 minutes and upload a <code>pg_dump</code> of the database to S3.</p>"},{"location":"design/database_models/","title":"Database models","text":"<p>This document describes and summarizes roles of database models used in AMY. Models are stored in each of the applications, in <code>models.py</code> file, for example: <code>workshops/models.py</code>.</p>"},{"location":"design/database_models/#mixins","title":"Mixins","text":"<p>Following classes are used to extend models with some features:</p>"},{"location":"design/database_models/#permissionsmixin","title":"<code>PermissionsMixin</code>","text":"<p>Django mechanism for extending custom user classes, see documentation.</p>"},{"location":"design/database_models/#assignmentmixin","title":"<code>AssignmentMixin</code>","text":"<p>Adds <code>assigned_to</code> field to the model. Used to define which <code>Person</code> is handling given model instance.</p>"},{"location":"design/database_models/#activemixin","title":"<code>ActiveMixin</code>","text":"<p>Adds <code>active</code> boolean field to the model. Determines if model instance is considered active (enabled) or inactive (disabled).</p>"},{"location":"design/database_models/#createdupdatedmixin","title":"<code>CreatedUpdatedMixin</code>","text":"<p>Adds <code>created_at</code> and <code>last_updated_at</code> datetime fields to the model. <code>created_at</code> is updated to current timestamp only on model's creation, <code>last_updated_at</code> is updated on every model instance save.</p>"},{"location":"design/database_models/#createdupdatedarchivedmixin","title":"<code>CreatedUpdatedArchivedMixin</code>","text":"<p>Extends <code>CreatedUpdatedMixin</code> with <code>archived_at</code> field, empty and nullable. This is used by consents feature.</p>"},{"location":"design/database_models/#dataprivacyagreementmixin","title":"<code>DataPrivacyAgreementMixin</code>","text":"<p>Adds boolean field for storing agreement to privacy policy. Used by <code>Person</code> model, as well as all requests models (<code>TrainingRequest</code>, <code>WorkshopRequest</code>, <code>WorkshopInquiryRequest</code>, <code>SelfOrganisedSubmission</code>).</p>"},{"location":"design/database_models/#cocagreementmixin","title":"<code>COCAgreementMixin</code>","text":"<p>Adds boolean field for storing agreement to code of conduct. Used by all requests models (<code>TrainingRequest</code>, <code>WorkshopRequest</code>, <code>WorkshopInquiryRequest</code>, <code>SelfOrganisedSubmission</code>).</p>"},{"location":"design/database_models/#hostresponsibilitiesmixin","title":"<code>HostResponsibilitiesMixin</code>","text":"<p>Adds boolean field for storing agreement to list of workshop host responsibilities. Used by all workshop requests models (<code>WorkshopRequest</code>, <code>WorkshopInquiryRequest</code>, <code>SelfOrganisedSubmission</code>).</p>"},{"location":"design/database_models/#instructoravailabilitymixin","title":"<code>InstructorAvailabilityMixin</code>","text":"<p>Adds boolean field for storing agreement to lack of guarantee to allocate instructors for a centrally-organised workshop. Used by <code>WorkshopRequest</code> and <code>WorkshopInquiryRequest</code>.</p>"},{"location":"design/database_models/#eventlinkmixin","title":"<code>EventLinkMixin</code>","text":"<p>Adds field to link model instance to a particular event. Used by workshop request models: <code>WorkshopRequest</code>, <code>WorkshopInquiryRequest</code>, <code>SelfOrganisedSubmission</code>.</p>"},{"location":"design/database_models/#statemixin","title":"<code>StateMixin</code>","text":"<p>Adds a choice field with 3 options: \"Pending\", \"Discarded\" and \"Accepted\". Used for determining state of a particular request (usually). Used by <code>WorkshopRequest</code>, <code>WorkshopInquiryRequest</code>, <code>SelfOrganisedSubmission</code>, <code>InstructorRecruitmentSignup</code>.</p>"},{"location":"design/database_models/#stateextendedmixin","title":"<code>StateExtendedMixin</code>","text":"<p>Extends <code>StateMixin</code> with new choice: \"Withdrawn\". Used only by <code>TrainingRequest</code>.</p>"},{"location":"design/database_models/#gendermixin","title":"<code>GenderMixin</code>","text":"<p>Adds two fields. First with a list of available genders to choose from, including gender variant, undisclosed, and other. Second field allows for text entry of \"other\" gender value. Used by <code>Person</code> model, but also appears in some forms for updating or creating <code>Person</code> model instances.</p>"},{"location":"design/database_models/#secondaryemailmixin","title":"<code>SecondaryEmailMixin</code>","text":"<p>Adds an email field for storing alternative email address. Used by <code>Person</code>, <code>TrainingRequest</code> and <code>CommonRequest</code> mixin.</p>"},{"location":"design/database_models/#rqjobsmixin","title":"<code>RQJobsMixin</code>","text":"<p>Adds field to link model instance to <code>RQJob</code> instance. Usually this indicates that a particular model instance triggered and automated email (represented by <code>RQJob</code> instance). Used by <code>Term</code>, <code>InstructorRecruitmentSignup</code>, <code>Person</code>, <code>Event</code>, <code>Task</code> and <code>WorkshopRequest</code>.</p>"},{"location":"design/database_models/#commonrequest","title":"<code>CommonRequest</code>","text":"<p>Adds multiple fields in common between workshop requests models (<code>WorkshopRequest</code>, <code>WorkshopInquiryRequest</code>, <code>SelfOrganisedSubmission</code>).</p>"},{"location":"design/database_models/#versioning-mechanism","title":"Versioning mechanism","text":"<p>Some of the models are using a <code>@reversion.register</code> decorator. This decorator comes from a <code>django-reversion</code> package indended for storing and easily restoring of historic \"versions\" of model instances.</p> <p>See versioning documentation for more.</p>"},{"location":"design/database_models/#auxiliary-functions-and-models","title":"Auxiliary functions and models","text":"<p><code>django-countries</code> (documentation) is used for location purposes within <code>Airport</code>, <code>Organization</code> and <code>Event</code>-related models.</p> <p><code>django-contrib-comments</code> is a package previously included in the Django itself. It's used as a comments framework. Comments can be added to any model instance.</p>"},{"location":"design/database_models/#user-management-and-authentication","title":"User management and authentication","text":"<p>A custom user model (<code>Person</code>) was defined according to Django documentation.</p>"},{"location":"design/database_models/#core-models-workshopsmodelspy","title":"Core models - <code>workshops/models.py</code>","text":"<p>\"Core\" models are models defined inside <code>workshops</code> application, the oldest application in AMY. Originally it was created as a single application project, at some point it was split into more applications (modules).</p>"},{"location":"design/database_models/#organization","title":"<code>Organization</code>","text":"<p>Represents an organisation, academic or business entity. Multiple organisations can be linked (affiliated) together.</p>"},{"location":"design/database_models/#memberrole","title":"<code>MemberRole</code>","text":"<p>Simple model representing a role assigned to a member.</p>"},{"location":"design/database_models/#member","title":"<code>Member</code>","text":"<p>An intermediate table for M2M between memberships and organisations. Allows to specify organisation's membership and role inside a <code>Membership</code> model.</p>"},{"location":"design/database_models/#membership","title":"<code>Membership</code>","text":"<p>Represents a membership of some organisation (or consortium of organisations) in The Carpentries project. Memberships can be paid. With each membership comes a number of fields defining perks like allowable number of centrally-organised workshops that don't need to pay fee.</p>"},{"location":"design/database_models/#airport","title":"<code>Airport</code>","text":"<p>Represents an airport (used for example to locate instructors).</p>"},{"location":"design/database_models/#person","title":"<code>Person</code>","text":"<p>Represents a single person. This is an extension of Django's default <code>user</code> model, built with <code>AbstractBaseuser</code>.</p>"},{"location":"design/database_models/#tag","title":"<code>Tag</code>","text":"<p>Label for grouping events. In M2M relation with <code>Event</code>.</p>"},{"location":"design/database_models/#language","title":"<code>Language</code>","text":"<p>Represents a human language. Used to indicate a language used at an event. In relation with models: <code>Event</code>, <code>WorkshopRequest</code>, <code>WorkshopInquiryRequest</code>, <code>SelfOrganisedSubmission</code>.</p>"},{"location":"design/database_models/#event","title":"<code>Event</code>","text":"<p>Represents a single event. The most important model of all.</p>"},{"location":"design/database_models/#role","title":"<code>Role</code>","text":"<p>Simple model representing a role assinged to a person.</p>"},{"location":"design/database_models/#task","title":"<code>Task</code>","text":"<p>An intermediate table for M2M between events and persons. Represents a task person had for a particular event. Links with a role to provide more detailed information.</p>"},{"location":"design/database_models/#lesson","title":"<code>Lesson</code>","text":"<p>Simple model representing a lesson someone might teach.</p>"},{"location":"design/database_models/#qualification","title":"<code>Qualification</code>","text":"<p>Intermediate table between person and a lesson. Nowadays probably not very much used.</p>"},{"location":"design/database_models/#badge","title":"<code>Badge</code>","text":"<p>Quite important model to represent a certain skill (badge).</p>"},{"location":"design/database_models/#award","title":"<code>Award</code>","text":"<p>Intermediate table for M2M between persons and badges. Represents a badge that someone was awarded.</p>"},{"location":"design/database_models/#knowledgedomain","title":"<code>KnowledgeDomain</code>","text":"<p>Represents a knowledge domain (like High Performance Computing) a person is engaged in.</p>"},{"location":"design/database_models/#trainingrequest","title":"<code>TrainingRequest</code>","text":"<p>Represents a request for instructor training. Usually these requests come from people who are not AMY users.</p> <p>This model falls into <code>external requests</code> domain, which also includes <code>WorkshopRequest</code>, <code>WorkshopInquiryRequest</code>, and <code>SelfOrganisedSubmission</code>.</p> <p>This model also falls into <code>trainings</code> domain.</p>"},{"location":"design/database_models/#trainingrequirement","title":"<code>TrainingRequirement</code>","text":"<p>Represents a requirement that a prospect future instructor need to pass.</p> <p>This model also falls into <code>trainings</code> domain.</p>"},{"location":"design/database_models/#trainingprogress","title":"<code>TrainingProgress</code>","text":"<p>Intermediate table for M2M between <code>Person</code>, <code>TrainingRequirement</code>, and optionally <code>Involvement</code>. Indicates \"pass\", \"fail\", or \"asked to repeat\" progress of a person over a particular requirement. Once all required requirements are passed, person can become an instructor.</p>"},{"location":"design/database_models/#curriculum","title":"<code>Curriculum</code>","text":"<p>Represents a curriculum of a lesson taught at a workshop.</p>"},{"location":"design/database_models/#academiclevel","title":"<code>AcademicLevel</code>","text":"<p>Simple model to represent academic (education) level, e.g. \"staff\" or \"post-doctorate\". Used in external requests / forms.</p>"},{"location":"design/database_models/#computingexperiencelevel","title":"<code>ComputingExperienceLevel</code>","text":"<p>Simple model to represent computer proficiency (novice / intermediate / proficient). Used in external requests / forms.</p>"},{"location":"design/database_models/#infosource","title":"<code>InfoSource</code>","text":"<p>Simple model to represent source of information about The Carpentries. Used in external requests / forms.</p>"},{"location":"design/database_models/#commonrequest-see-mixins","title":"<code>CommonRequest</code> - see mixins","text":"<p>A common ancestor for:</p> <ul> <li><code>WorkshopRequest</code></li> <li><code>WorkshopInquiryRequest</code></li> <li><code>SelfOrganisedSubmission</code></li> </ul> <p>Since all these requests are used in external forms, and are very similar to each other, some common parts were extracted into <code>CommonRequest</code> abstract model (mixin).</p>"},{"location":"design/database_models/#workshoprequest","title":"<code>WorkshopRequest</code>","text":"<p>Represents a request for teaching a Carpentries workshop.</p> <p>This model falls into <code>external requests</code> domain.</p>"},{"location":"design/database_models/#fiscal-application-fiscalmodelspy","title":"Fiscal application - <code>fiscal/models.py</code>","text":""},{"location":"design/database_models/#membershippersonrole","title":"<code>MembershipPersonRole</code>","text":"<p>Simple model, represents person role within a membership (see <code>Membership</code> for more).</p>"},{"location":"design/database_models/#membershiptask","title":"<code>MembershipTask</code>","text":"<p>Similar to <code>Task</code> model, but it's for a person task within a membership. Links to <code>MembershipPersonRole</code>.</p>"},{"location":"design/database_models/#external-requests-application-extrequestsmodelspy","title":"External requests application - <code>extrequests/models.py</code>","text":""},{"location":"design/database_models/#datavariant","title":"<code>DataVariant</code>","text":"<p>Simple model represents a variant of data (e.g. tabular data, images, nucleotide sequence, unstructured text, etc.) that would be used in a workshop. The model is used only by <code>WorkshopInquiryRequest</code>.</p>"},{"location":"design/database_models/#workshopinquiryrequest","title":"<code>WorkshopInquiryRequest</code>","text":"<p>Represents an inquiry about teaching a Carpentries workshop.</p> <p>This model falls into <code>external requests</code> domain.</p>"},{"location":"design/database_models/#selforganisedsubmission","title":"<code>SelfOrganisedSubmission</code>","text":"<p>Represents submission of a workshop that was self-organised (i.e. without help of The Carpentries).</p> <p>This model falls into <code>external requests</code> domain.</p>"},{"location":"design/database_models/#dashboard-application-dashboardmodelspy","title":"Dashboard application - <code>dashboard/models.py</code>","text":""},{"location":"design/database_models/#criterium","title":"<code>Criterium</code>","text":"<p>Represents a combination of countries and email associated with them. Used to direct emails to a specific admin (for example UK admin) mailbox.</p>"},{"location":"design/database_models/#continent","title":"<code>Continent</code>","text":"<p>Represents a group of countries. Used in some internal forms, e.g. for filtering events.</p>"},{"location":"design/database_models/#recruitment-application-recruitmentmodelspy","title":"Recruitment application - <code>recruitment/models.py</code>","text":""},{"location":"design/database_models/#instructorrecruitment","title":"<code>InstructorRecruitment</code>","text":"<p>Represents a recruitment of instructors for a given event (<code>Event</code>).</p>"},{"location":"design/database_models/#instructorrecruitmentsignup","title":"<code>InstructorRecruitmentSignup</code>","text":"<p>Represents an application of a single instructor for a given instructor recruitment (<code>InstructorRecruitment</code>).</p>"},{"location":"design/database_models/#consents-application-consentsmodelspy","title":"Consents application - <code>consents/models.py</code>","text":""},{"location":"design/database_models/#term","title":"<code>Term</code>","text":"<p>Represents a term people should give consent to.</p>"},{"location":"design/database_models/#termoption","title":"<code>TermOption</code>","text":"<p>Represents a response for a <code>Term</code> with custom text and boolean <code>agree</code> / <code>decline</code> type.</p>"},{"location":"design/database_models/#consent","title":"<code>Consent</code>","text":"<p>Represents a consent person gives (or not) to a given term. Intermediate table for M2M between <code>Person</code> and <code>Term</code>, and <code>TermOption</code>.</p>"},{"location":"design/database_models/#trainingrequestconsent","title":"<code>TrainingRequestConsent</code>","text":"<p>Represents a consent an instructor applicant gives (or not) to a given term. Intermediate table for M2M between <code>TrainingRequest</code> and <code>Term</code>, and <code>TermOption</code>.</p>"},{"location":"design/database_models/#community-roles-application-communityrolesmodelspy","title":"Community Roles application - <code>communityroles/models.py</code>","text":""},{"location":"design/database_models/#communityroleconfig","title":"<code>CommunityRoleConfig</code>","text":"<p>Stores configuration enforced when creating entries in <code>CommunityRole</code>. Determines what \"kind\" of a role it is, for example \"Instructor\", or \"Maintainer\".</p>"},{"location":"design/database_models/#communityroleinactivation","title":"<code>CommunityRoleInactivation</code>","text":"<p>Simple model represents reason for making a <code>CommunityRole</code> inactive.</p>"},{"location":"design/database_models/#communityrole","title":"<code>CommunityRole</code>","text":"<p>Represents person's role in a community. It's an extension of <code>Task</code>, but instead of events, it works for The Carpentries' community.</p>"},{"location":"design/database_models/#automated-emails-v1-2019-application-autoemailsmodelspy","title":"Automated Emails (v1, 2019) application - <code>autoemails/models.py</code>","text":"<p>Deprecated since 2024.</p>"},{"location":"design/database_models/#emailtemplate","title":"<code>EmailTemplate</code>","text":"<p>Represents email template to be used by a triggered email action.</p>"},{"location":"design/database_models/#trigger","title":"<code>Trigger</code>","text":"<p>Simple model linking template with an email action. Email actions aren't models, so the list of choices is maintained as <code>ACTION_CHOICES</code>.</p>"},{"location":"design/database_models/#rqjob","title":"<code>RQJob</code>","text":"<p>Represents a <code>python-rq</code> job. This job is identified by UUID and links to Redis entry maintained by RQ library.</p>"},{"location":"design/database_models/#training-application-trainingsmodelspy","title":"Training application - <code>trainings/models.py</code>","text":""},{"location":"design/database_models/#involvement","title":"<code>Involvement</code>","text":"<p>Represents an activity that can be completed as part of the Get Involved step of Instructor Training checkout. Referenced by <code>TrainingProgress</code>.</p>"},{"location":"design/database_models/#emails-v2-2023-application-emailsmodelspy","title":"Emails (v2, 2023) application - <code>emails/models.py</code>","text":""},{"location":"design/database_models/#emailtemplate_1","title":"<code>EmailTemplate</code>","text":"<p>Represents email template to be used by a scheduled email.</p>"},{"location":"design/database_models/#scheduledemail","title":"<code>ScheduledEmail</code>","text":"<p>Model containing details of a scheduled email. This is used for queueing emails to be sent, as well as capturing any failed, locked, or cancelled emails. When accessed from AMY API, it can return a list of emails that should be attempted to be sent by the email worker.</p>"},{"location":"design/database_models/#scheduledemaillog","title":"<code>ScheduledEmailLog</code>","text":"<p>Represents a log entry for a scheduled email. This is used to track the status changes of an email.</p>"},{"location":"design/design_patterns/","title":"Design Patterns Reference","text":"<p>Due to the size of the AMY codebase and the number of views available, it can be tricky to figure out if something has been done before or not.</p> <p>This document acts as a reference for where certain design patterns can be found in the UI and code base.</p>"},{"location":"design/design_patterns/#forms","title":"Forms","text":""},{"location":"design/design_patterns/#update-choice-field-options-dynamically-when-a-different-field-is-updated","title":"Update choice field options dynamically when a different field is updated","text":"<p>Demo: Go to the edit view for any Person with an Instructor badge, and select the \"Community Roles\" tab. Notice how changing the \"Role name\" selection between \"Maintainer\" and \"Instructor\" updates the options available under \"Associated award\" and \"Generic relation object.\"</p> <p>Method: It's not possible to make these dynamic updates using Django without submitting the form. Instead, we must use JavaScript.</p> <ol> <li>Use JavaScript to change the request that is used to get the available choices for the dynamically changing field. Add the dependent field as a parameter in the request. (e.g. <code>$(\"#id_communityrole-award\").select2({...})</code> in /static/communityrole_form.js)</li> <li>In the relevant form, ensure that the JS file is included under the <code>Media</code> metaclass (e.g. <code>CommunityRoleForm</code> in /communityroles/forms.py)</li> <li>In the relevant lookup view, check for the presence of the extra parameters and use them to filter the results as needed (e.g. <code>AwardLookupView</code> in /workshops/lookups.py)</li> <li>Write tests using different parameter settings (e.g. <code>TestAwardLookupView</code> in /workshops/tests/test_lookups.py)</li> </ol>"},{"location":"design/design_patterns/#make-a-field-requirednot-required-according-to-another-fields-value","title":"Make a field required/not required according to another field's value","text":"<p>Demo: Go to the edit view for any Person with an Instructor badge, and select the \"Community Roles\" tab. Leave the rest of the form empty, and notice how changing the \"Role name\" selection between \"Trainer\" and \"Instructor\" changes which fields give a \"Please fill in this field\" error if you click Submit.</p> <p>Method: It's not possible to make these dynamic updates using Django without submitting the form. Instead, we must use JavaScript.</p> <ol> <li>Use JavaScript to set the <code>required</code> property on the dynamically changing field when the dependent field is updated. (e.g. in /static/communityrole_form.js)</li> <li>In the relevant form, ensure that the JS file is included under the <code>Media</code> metaclass (e.g. <code>CommunityRoleForm</code> in /communityroles/forms.py)</li> <li>Ensure that the relevant form/model has validation that matches the dynamic behaviour (e.g. <code>CommunityRoleForm.clean()</code> in /communityroles/forms.py)</li> </ol>"},{"location":"design/design_patterns/#autofill-some-form-fields-when-creating-one-object-using-data-from-another","title":"Autofill some form fields when creating one object using data from another","text":"<p>Demo: Go to the \"Workshop requests\" page and open the detail view for any pending request. Select 'Accept and create a new event' at the bottom. Notice that some fields in the Event form are pre-filled with data from the request (e.g. Start and End, Curricula, Tags).</p> <p>Method:</p> <ol> <li>Create a view that inherits the <code>AMYCreateAndFetchObjectView</code></li> <li>Set a URL for the view that includes the original object's ID, e.g. <code>workshop_request/&lt;int:request_id&gt;/accept_event/</code></li> <li>Set the <code>model</code> and <code>form_class</code> variables in the view according to the model of the object that will be created</li> <li>Set the <code>queryset_other</code>, <code>context_other_object_name</code>, and <code>pk_url_kwarg</code> variables in the view according to the original object. These are used by <code>AMYCreateAndFetchObjectView</code> to select the correct object to use data from. The object will become available as <code>self.other_object</code> in the view</li> <li>Override <code>get_initial()</code> to set form fields based on data in <code>self.other_object</code></li> </ol>"},{"location":"design/design_patterns/#perform-soft-validation-to-allow-possibly-invalid-data-to-be-submitted-with-only-a-warning","title":"Perform \"soft validation\" to allow possibly invalid data to be submitted with only a warning","text":"<p>Demo: On test-amy or a local AMY instance, go to the Instructor Training application form and select \"Profile Creation for Pre-approved Trainees.\" Enter some random letters as the registration code (an invalid input), then fill out the rest of the required form fields. After clicking \"Submit\", if member code enforcement is enabled, you should see an error on the registration code starting with \"This code is invalid.\" Underneath the field, a checkbox should be visible with the label \"Continue with registration code marked as invalid\" - if you check this box, you should now be able to submit the form.</p> <p>Method:</p> <ol> <li>Add a field <code>&lt;fieldname&gt;-override</code> to the relevant model. This should be a <code>BooleanField</code> defaulting to <code>False</code>.</li> <li>On <code>Form</code>s connected to the model, manipulate the <code>helper.layout</code> to show/hide the new field according to the value of the field you're implementing soft validation on (e.g. the <code>validate_member_code</code> method of <code>TrainingRequestForm</code> in <code>/extforms/forms.py</code> shows and hides the <code>member_code_override</code> field according to the validity of the <code>member_code</code>).</li> <li>Build validation carefully for the override and the field it relates to. The override should only be required and <code>True</code> if the related field is invalid. In other cases, it should be <code>False</code> - this may require updating the value during validation (e.g. the <code>validate_member_code</code> method again).</li> <li>Consider adding a filter to help admins find objects where the override was used. Beware that the default <code>django_filters.BooleanFilter</code> is not quite appropriate - typically you will want all results to be shown when the filter is <code>False</code>, and only results that use the override to be shown when the filter is <code>True</code> (e.g. <code>invalid_member_code</code> filter in <code>TrainingRequestFilter</code> in /extrequests/filters.py).</li> </ol> <p>Reference files:</p> <ul> <li><code>extrequests/views.py</code> - all the <code>...AcceptEvent</code> classes</li> <li><code>extrequests/urls.py</code></li> <li><code>extrequests/base_views.py</code> - <code>WRFInitial</code> and <code>AMYCreateAndFetchObjectView</code></li> </ul>"},{"location":"design/design_patterns/#tests","title":"Tests","text":""},{"location":"design/design_patterns/#migration-tests","title":"Migration tests","text":"<p>Use the <code>django_test_migrations</code> package, e.g. /workshops/tests/test_migrations.py</p>"},{"location":"design/feature_flags/","title":"Feature flags in AMY","text":""},{"location":"design/feature_flags/#what-are-feature-flags","title":"What are feature flags?","text":"<p>Feature flags are a way to enable or disable features in a software application. They are used to enable gradual rollouts of new features, A/B testing, and to enable or disable features for specific users.</p>"},{"location":"design/feature_flags/#how-are-feature-flags-implemented-in-amy","title":"How are feature flags implemented in AMY?","text":"<p>AMY uses the django-flags package to implement feature flags.</p>"},{"location":"design/feature_flags/#how-do-i-add-a-new-feature-flag","title":"How do I add a new feature flag?","text":"<p>Extend <code>FLAGS</code> setting in <code>config/settings.py</code> with a new flag. For example:</p> <pre><code>FLAGS = {\n    \"EMAIL_MODULE\": [\n        {\"condition\": \"anonymous\", \"value\": False, \"required\": True},\n        {\"condition\": \"parameter\", \"value\": \"enable_email_module=true\"},\n        {\"condition\": \"session\", \"value\": \"enable_email_module\"},\n    ],\n}\n</code></pre> <p>You can read about the different conditions in the django-flags documentation.</p>"},{"location":"design/feature_flags/#how-do-i-use-a-feature-flag-in-my-code","title":"How do I use a feature flag in my code?","text":"<ol> <li>To enable a function based on a feature flag, use the <code>feature_flag_enabled</code> decorator from <code>workshops.utils.feature_flags</code> module.</li> <li>To enable a template block based on a feature flag, use the <code>flag_enabled</code> template tag from <code>django-flags</code> module (<code>{% load feature_flags %}</code>).</li> </ol> <p><code>EMAIL_MODULE</code> is a good feature flag example that can be tracked in the code to see how it works.</p>"},{"location":"design/feature_flags/#how-to-use-feature-flags-view-to-enable-or-disable-a-flag","title":"How to use feature flags view to enable or disable a flag?","text":"<p>This view operates on specific conditions set in <code>FLAGS</code> setting in <code>config/settings.py</code>.</p> <p>First, a <code>parameter</code> condition must be set with a value <code>xyz=true</code>. This will enable the flag for the user if the user visits a URL with <code>?xyz=true</code> parameter. For example, <code>https://amy.carpentries.org/?xyz=true</code>. However, by default the URL is not persistent, so if the user changes the page to a one without this parameter, the flag will be disabled again. To circumvent this, a special middleware was created that will save the flag parameter in the session if user's request path passes the <code>parameter</code> condition.</p> <p>When combined with a <code>session</code> condition, such feature flag will stay enabled until the user logs out or uses the \"Disable\" link.</p> <p>Disable link is also handled through the special middleware and it only accepts <code>?xyz=false</code> format.</p>"},{"location":"design/model_versioning/","title":"Model versioning","text":""},{"location":"design/model_versioning/#history","title":"History","text":"<p>For a long time, AMY was almost single-application project: most of the logic, models and views was contained in <code>workshops</code> application; there was also <code>api</code> application and <code>extforms</code> for showing forms to the external users.</p> <p><code>workshops</code> grew to a massive size and needed splitting into smaller applications. However, some previous design decisions made the split complicated. Namely versioning system, provided by django-reversion, due to model instance serialization, was not flexible when it came to data migration, and very difficult when it came to move the underlying model to another app.</p> <p>Not all models have versioning system enabled. Those that don't were moved to corresponding applications.</p> <p>Go to application design for more details on how the applications are set up.</p>"},{"location":"design/model_versioning/#list-of-versioned-models","title":"List of versioned models","text":"<p>Below you'll find list of models with versioning enabled.</p> <ul> <li><code>recruitment</code>:<ul> <li><code>InstructorRecruitment</code>,</li> <li><code>InstructorRecruitmentSignup</code>,</li> </ul> </li> <li><code>workshops</code>:<ul> <li><code>Organization</code>,</li> <li><code>Membership</code>,</li> <li><code>Airport</code>,</li> <li><code>Person</code>,</li> <li><code>Event</code>,</li> <li><code>Task</code>.</li> <li><code>TrainingRequest</code>,</li> <li><code>TrainingRequirement</code>,</li> <li><code>TrainingProgress</code>,</li> <li><code>WorkshopRequest</code>.</li> </ul> </li> </ul>"},{"location":"design/server_infrastructure/","title":"Server infrastructure","text":"<p>AMY is hosted in AWS cloud. There are two AMY environments, one for testing and one for production. They use separate setups.</p>"},{"location":"design/server_infrastructure/#production","title":"Production","text":""},{"location":"design/server_infrastructure/#aws-services-used","title":"AWS services used","text":"<p>Server is hosted on Elastic Compute Cloud (EC2) instance. Database uses separate EC2 instance through Relational Database Service (RDS). Additionally CloudFront is used as CDN for assets (images, CSS, JavaScript, including NPM dependencies).</p>"},{"location":"design/server_infrastructure/#www-server","title":"WWW server","text":"<p>AMY is hosted by Nginx and has 4 roles:</p> <ol> <li>handles TLS,</li> <li>serves a Django application through    gunicorn (working as a proxy),</li> <li>serves a maintenance page when upstream proxy is not available, for    example during upgrade.</li> </ol> <p>Nginx configuration is similar to vhost-like Apache configuration. The web server was installed through Ubuntu repositories and should start automatically with system's boot.</p> <p>Nginx is configured to check for existence of <code>maintenance_on.html</code> file in <code>/webapps/{domain}</code>. If it's there, then <code>503 Service Unavailable</code> is served with that HTML file on all requests.</p>"},{"location":"design/server_infrastructure/#gunicorn","title":"gunicorn","text":"<p>AMY, as a WSGI application, is run by gunicorn on a separate user/group. Gunicorn creates 3 (configurable value) workers for handling the incoming requests. Logs are located in <code>/webapps/{domain}/logs/gunicorn_supervisor.log</code> and rotated.</p>"},{"location":"design/server_infrastructure/#tls-certificate","title":"TLS certificate","text":"<p>Certbot is used to acquire the TLS domain certificate.</p>"},{"location":"design/server_infrastructure/#application-directory","title":"Application directory","text":"<p>AMY directory is located on the server under <code>/webapps/{domain}</code>. It contains:</p> <ul> <li><code>DB_backups</code> - directory with old regular DB backups and backups created before every   deployment,</li> <li><code>logs</code> - directory with logs from various components,</li> <li><code>repo</code> - directory with application source code and virtual environment,</li> <li><code>maintenance_off.html</code> - file used for entering maintenance mode (when renamed to   <code>maintenance_on.html</code>).</li> </ul>"},{"location":"design/server_infrastructure/#virtual-environment","title":"Virtual environment","text":"<p>To get into AMY's virtual environment, issue:</p> <pre><code>$ source /webapps/{domain}/repo/.venv/bin/activate\n</code></pre> <p>You may need to do this from root's (superuser) privilege level.</p> <p>It's also important to activate environment variables used by the project. You can do that with:</p> <pre><code>$ source /webapps/{domain}/repo/.venv/bin/postactivate\n</code></pre>"},{"location":"design/server_infrastructure/#redis","title":"Redis","text":"<p>Redis is installed and served from the application server itself. There is no special configuration used for it, and it's not exposed.</p>"},{"location":"design/server_infrastructure/#backup","title":"Backup","text":"<p>The database servers are regularly backed-up by AWS. For more details see database backups.</p> <p>Additional backups are created before starting any deployment with <code>pg_dump</code>.</p>"},{"location":"design/server_infrastructure/#deployment","title":"Deployment","text":"<p>AMY is deployed with Ansible scripts. The standard deployment procedure is documented in a file in separate repository containing these scripts.</p>"},{"location":"design/server_infrastructure/#testing","title":"Testing","text":"<p>Testing stage has recently been updated to fix many of the shortcomings listed below in Infrastructure shortcomings and future plans.</p>"},{"location":"design/server_infrastructure/#aws-services-used_1","title":"AWS services used","text":"<ul> <li>Elastic Container Service (ECS) - for running   a container with AMY with a load balancer</li> <li>Relational Database Service (RDS) - for database   (serverless PostgreSQL-flavored Aurora)</li> <li>CloudFront is used as CDN for assets</li> <li>Route 53 for keeping domain records and managing   TLS certificates</li> <li>Elastic Container Registry (ECR) - for storing Docker images</li> <li>CloudWatch - for log keeping</li> <li>CloudFormation - for infrastructure as code   and deployment of the infrastructure.</li> </ul> <p>There is no Redis instance as it's not needed right now on the testing stage.</p>"},{"location":"design/server_infrastructure/#infrastructure-as-code","title":"Infrastructure as code","text":"<p>Infrastructure is defined in a separate repository as a Cloud Development Kit (CDK) project. It gets compiled into CloudFormation template.</p>"},{"location":"design/server_infrastructure/#deployment_1","title":"Deployment","text":"<p>AMY is deployed to the testing stage with CI/CD pipeline on GitHub Actions.</p>"},{"location":"design/server_infrastructure/#infrastructure-shortcomings-and-future-plans","title":"Infrastructure shortcomings and future plans","text":"<p>Note March 2023: this section mostly applies to the production environment. Testing stage has been revamped and most of the issues listed below have been resolved.</p> <p>A note has been added to every item that has been resolved in testing.</p> <p>There are couple of issues with current approach to deployment:</p> <ol> <li>Redis is on the same server as the application</li> <li>Application server runs <code>certbot</code> to refresh TLS certificate</li> <li>RQ worker and scheduler are on the same server as the application</li> <li>Application requires a SSH-enabled server and is not immutable</li> <li>There's no CI/CD pipeline set up - deployment is manual</li> <li>There's downtime during deployment</li> <li>It's not scalable</li> <li>It requires custom deployment scripts (Ansible).</li> <li>There's multiple log outputs from various services in one server (two or three from    AMY, one  from <code>rqworker</code>, one from <code>rqscheduler</code>, one from <code>gunicorn</code>, one from    a cronjob, two from nginx)</li> </ol> <p>Below are propositions how to resolve each problem individually.</p>"},{"location":"design/server_infrastructure/#migrate-redis","title":"Migrate Redis","text":"<p>Redis should be on a separate machine. AWS offers multiple services for hosted Redis solutions, but they may not be needed. Perhaps a small EC2 sever dedicated to Redis could work, too?</p> <p>Note March 2023 [testing stage]: does not apply; there is no Redis required.</p>"},{"location":"design/server_infrastructure/#replace-certbot-with-aws-services","title":"Replace <code>certbot</code> with AWS services","text":"<p>There is better and also free alternative to <code>certbot</code>. It's Route 53 for keeping domain records, and Certificate Manager for generating free TLS certificates.</p> <p>Finally, Route 53 also works with Elastic Load Balancing, which should be used to resolve issues like lack of scalability or CI/CD.</p> <p>Note March 2023 [testing stage]: TLS and domain is managed by AWS (Route 53 service).</p>"},{"location":"design/server_infrastructure/#decouple-rq-worker-and-scheduler-from-application","title":"Decouple RQ worker and scheduler from application","text":"<p>Unfortunately this is not easy. RQ worker and scheduler are tightly coupled with the application because they use objects from application's memory pickled and stored in Redis database. This means that RQ worker and scheduler require access to the same source code.</p> <p>It would be the best to completely decouple RQ jobs from AMY source code. Even better if the jobs themselves became JSON configuration files, and code to run them could be run on a Lambda.</p> <p>These are all pretty big changes to the application, because Redis and RQ are used in automated emails feature.</p> <p>Note March 2023: this was not achieved, and is required for migrating production to containerized (cloud native) solution.</p> <p>Note June 2024: this is part of a work related to Emails project (v2, 2023), scheduled to be completed by the end of 2024. Production will definitely be de-coupled from RQ worker and scheduler, but it's not clear yet when will the production be containerized.</p>"},{"location":"design/server_infrastructure/#containerize-the-application-to-make-it-immutable","title":"Containerize the application to make it immutable","text":"<p>AMY should be containerized. It's already possible to build a Docker image with AMY, but it probably should run migrations automatically (it doesn't yet).</p> <p>Containerization is also required to run AMY in a scalable manner on ECS / EKS.</p> <p>Note March 2023 [testing stage]: AMY is containerized and runs on ECS.</p>"},{"location":"design/server_infrastructure/#build-cicd-pipeline","title":"Build CI/CD pipeline","text":"<p>Probably using GitHub Actions (see docs).</p> <p>Note March 2023 [testing stage]: CI/CD pipeline is set up using GitHub Actions.</p>"},{"location":"design/server_infrastructure/#use-ecs-for-bluegreen-deployments-and-load-balancing","title":"Use ECS for blue/green deployments and load balancing","text":"<p>ECS should be used to deploy AMY. Blue/green deployment strategy should be used, and a load balancer (which helps resolve multiple issues mentioned above).</p> <p>Note March 2023 [testing stage]: ECS is used for deployment and load balancing.</p>"},{"location":"design/server_infrastructure/#deployment_2","title":"Deployment","text":"<p>AMY should be deployed using IaC (Infrastructure as Code) solution, for example. Terraform or Cloud Formation.</p> <p>Note March 2023 [testing stage]: AMY infrastructure is deployed using CDK and CloudFormation.</p>"},{"location":"design/server_infrastructure/#simplified-logs","title":"Simplified logs","text":"<p>Once AMY resides on a single VM (for example ECS task instance), it should produce one stream of logs; these logs should be stored in CloudWatch.</p> <p>Note March 2023 [testing stage]: logs are stored in CloudWatch.</p>"},{"location":"design/template_hierarchy/","title":"Templates","text":"<p>AMY uses Django templating system and Django templating engine.</p> <p>Templates in AMY are kept in <code>amy/templates/</code> directory, conveniently grouped by application in subdirectories (<code>comments</code> - from <code>extcomments</code>, <code>communityroles</code>, <code>consents</code>, <code>dashboard</code>, <code>forms</code> - from <code>extforms</code>, <code>fiscal</code>, <code>recruitment</code>, <code>reports</code>, <code>requests</code> - from <code>extrequests</code>, <code>trainings</code>, <code>workshops</code>). There are also directories not related to internal AMY applications:</p> <ul> <li><code>account</code> - contains templates related to login/logout/password reset pages,</li> <li><code>bootstrap4</code> - contains templates and/or includes for widgets used by   Django Crispy Forms,</li> <li><code>includes</code> - contains a bunch of reusable \"components\" - Django HTML templates,</li> <li><code>mailing</code> - contains templates used to generate emails automatically sent when users   submit external forms,</li> <li><code>markdownx</code> - contains some overridden templates for   django-markdown package.</li> </ul> <p>Usually, unsless the template is an includable, one template corresponds to one view, that's why they are grouped in per-application directories.</p> <p>The rest of the files stored directly in <code>amy/templates/</code> directory are base templates. Here's a description of them, which almost all the other templates inherit from.</p>"},{"location":"design/template_hierarchy/#base-templates","title":"Base templates","text":"<p>All templates use fluid container from Bootstrap 4.</p> <p>There are multiple types of views in AMY:</p> <ul> <li>wide (e.g. 'Dashboard') -- <code>base_nav.html</code>,</li> <li>wide with sidebar (e.g. 'All Events') -- <code>base_nav_sidebar.html</code>,</li> <li>wide with two content columns (e.g. <code>WorkshopRequest</code> accept view) --   <code>base_nav_twocolumn.html</code>.</li> </ul> <p>These templates all inherit from <code>base.html</code>, which holds the HTML structure, includes CSS styles and JS code, displays messages, footer, etc.</p> <p>The <code>base_nav.html</code> is nothing more but <code>base.html</code> extended with a navigation. Navigation changes depending on user - one navigation bar (<code>navigation.html</code>) exists for admin users, a different one (<code>navigation_instructor_dashboard.html</code>) exists for instructors/trainees. A correct navigation bar is being included in <code>base_nav.html</code> and every instructor-enabled template (e.g. Auto Update Profile form, Upcoming Teaching Opportunities page, etc.).</p> <p>There are also these templates available at the top-level template directory:</p> <ul> <li><code>base_forms.html</code> - base template for external forms (workshop request, workshop   inquiry request, self-organised submission and training request),</li> <li><code>generic_form.html</code> - a default form used by <code>AMYCreateView</code> and <code>AMYUpdateView</code>   (base views for creating and updating entities),</li> <li><code>generic_form_with_comments.html</code> - the same as <code>generic_form.html</code>, but additionally   contains a section with comments provided by   extcomments application,</li> <li><code>pagination.html</code> - displays a neat button groups split with \"...\" to not show   too much pages at once.</li> </ul>"},{"location":"design/template_hierarchy/#blocks-available-in-base-template","title":"Blocks available in base template","text":"<p>Django template blocks used in <code>base.html</code> template:</p> <ul> <li><code>extrastyle</code> in <code>&lt;head&gt;</code>, when you need to load some additional CSS files or   embed styles right into the page,</li> <li><code>extrajs</code> on bottom of <code>&lt;body&gt;</code>, for loading additional JavaScript files / codes,</li> <li><code>navbar</code> used in templates that include a navigation bar,</li> <li><code>main</code> with all the main content in case someone really needs to change it,</li> <li><code>leftcolumn</code> for adding a sidebar or a column (used in <code>base_nav_sidebar.html</code>),</li> <li><code>maincolumn</code> for changing main content column grid,</li> <li><code>logo</code> used in views that display AMY logo (login page, log out page, password reset,   etc.) - see <code>account</code> in Templates,</li> <li><code>title</code> to display <code>&lt;h1&gt;</code> tag with page title,</li> <li><code>content</code> for displaying page content.</li> </ul>"},{"location":"design/template_hierarchy/#widgets","title":"Widgets","text":"<p>There are multiple reusable components available in <code>amy/templates/includes</code> directory:</p> <ul> <li><code>assigned_to.html</code> - displays whom has the entity (event, workshop request, workshop   inquiry request, self-organised submission) been assigned to; displays a form to   change the assignee,</li> <li><code>assignment_modal.html</code> - displays a modal \"window\" on the page; this window   is used to select person assigned to specified entity (event, workshop request,   workshop inquiry request, self-organised submission),</li> <li><code>assignment.html</code> - displays a dropdown to change filtering events assigned to   specific person (user, unassigned, or no filtering),</li> <li><code>attendance_email_href.html</code> - renders a <code>mailto:</code> link with provided list of emails   as recipients and predefined text in email body; used in event details view and in   workshop issues report,</li> <li><code>comments.html</code> - displays comments and form for adding comments for a given entity,</li> <li><code>country_flag.html</code> - renders county name with this country's flag,</li> <li><code>curriculum.html</code> - displays curriculum as   a Boostrap badge,</li> <li><code>event_details_table.html</code> - displays a table with event details,</li> <li><code>event_import_update_from_url.html</code> - modal for importing event details from a given   URL address,</li> <li><code>instructor_profile_snapshot.html</code> - as name suggests, this is a snapshot of person's   instructor profile used in   Instructor Selection project, on instructor   dashboard,</li> <li><code>instructor_role_badge.html</code> - small component displaying information about active   or inactive instructor badge on for a person,</li> <li><code>instructor_selection_summary.html</code> - a summary of instructor selection for a given   event; this is displayed in event's jumbo header,</li> <li><code>instructorrecruitment.html</code> - a representation of single <code>InstructorRecruitment</code>   model instance,</li> <li><code>last_modified.html</code> - used by <code>last_modified</code> template tag to display audit log   information (when entity was created, when it was last modified),</li> <li><code>logo.html</code> - AMY logo, used by user-facing external forms,</li> <li><code>merge_radio.html</code> - used to display HTML <code>radio</code> element in Person/Event merge views,</li> <li><code>request_host_person.html</code> - used to display person from the database matching the   person requesting a workshop,</li> <li><code>request_institution.html</code> - used to display organisation from the database matching   the institution of person requesting a workshop,</li> <li><code>requests_bottom_action_btns.html</code> - displays a group of buttons for accepting,   discarding, etc. workshop requests, workshop inquiry requests, and self-organised   submissions,</li> <li><code>selforganisedsubmission_details.html</code> - displays a table with self-organised   submission details,</li> <li><code>tag.html</code> - displays a Boostrap badge of a tag,</li> <li><code>teaching_opportunity.html</code> - displays details of instructor recruitment instance used   in Instructor Selection project, on   instructor dashboard,</li> <li><code>template_response.html</code> - provides a dropdown with templates used for automatic reply   to a workshop request,</li> <li><code>tracker.html</code> - contains Matomo tracker JavaScript code,</li> <li><code>training_progresses_inline.html</code> - displays person's progress in training with   various training requirements,</li> <li><code>trainingrequest_details.html</code> - displays a table with training request details,</li> <li><code>workshopinquiry_details.html</code> - displays a table with workshop inquiry request   details,</li> <li><code>workshoprequest_details.html</code> - displays a table with workshop request details.</li> </ul>"},{"location":"design/views_hierarchy/","title":"Views hierarchy","text":"<p>\"View\" is Django term for a piece of logic responsible for rendering a page (using template) or processing a request (for example adding a blog post through some form).</p> <p>There's a lot of various views in AMY, but some of them share common behavior. Since they are implemented in OOP (object-oriented programming), it was possible to extract common behaviours in form of class mixins. They are described below.</p>"},{"location":"design/views_hierarchy/#mixins-and-base-views","title":"Mixins and base views","text":"<p>The concept of mixins is extensively used in Django's class based views. A lot of them is used in AMY, too. Good resource to read about the views is CCBV.</p>"},{"location":"design/views_hierarchy/#actionmanagemixin-amyautoemailsbase_viewspy","title":"<code>ActionManageMixin</code> (<code>amy/autoemails/base_views.py</code>)","text":"<p>This mixin was designed to support triggering actions (from automated emails project) by inheriting from it in class-based views, but as it turned out this is never used. Its <code>add</code> and <code>remove</code> static methods are used quite often, on the other hand.</p> <p>This mixin should be redesigned to a controller or helper class.</p>"},{"location":"design/views_hierarchy/#wrfinitial-amyextrequestsbase_viewspy","title":"<code>WRFInitial</code> (<code>amy/extrequests/base_views.py</code>)","text":"<p>This mixin is used in views:</p> <ul> <li><code>WorkshopRequestAcceptEvent</code></li> <li><code>WorkshopInquiryAcceptEvent</code></li> <li><code>SelfOrganisedSubmissionAcceptEvent</code></li> </ul> <p>The purpose is to provide initial values (like event start, end dates, tags, curricula, public status, and contact information). Most of these values are the same for all 3 views, but in some corner cases they are located differently. For example, in <code>SelfOrganisedSubmission</code> model there's a relation to curricula called <code>workshop_types</code>, but in <code>WorkshopRequest</code> and <code>WorkshopInquiryRequest</code> the same relation is called <code>requested_workshop_types</code>.</p>"},{"location":"design/views_hierarchy/#amycreateandfetchobjectview-amyextrequestsbase_viewspy","title":"<code>AMYCreateAndFetchObjectView</code> (<code>amy/extrequests/base_views.py</code>)","text":"<p><code>AMYCreateView</code> extended with fetching a different object based on URL parameter.</p> <p>Useful when there's a need to create an object related to another existing object, e.g. to create an event from a <code>WorkshopRequest</code> object.</p>"},{"location":"design/views_hierarchy/#getmembershipmixin-amyfiscalbase_viewspy","title":"<code>GetMembershipMixin</code> (<code>amy/fiscal/base_views.py</code>)","text":"<p>A small mixin fetching membership based on URL parameter on every request.</p>"},{"location":"design/views_hierarchy/#membershipformsetview-amyfiscalbase_viewspy","title":"<code>MembershipFormsetView</code> (<code>amy/fiscal/base_views.py</code>)","text":"<p>A mixin based on <code>FormView</code> but intended for handling formsets, especially formsets containing multiple membership-related objects (e.g. membership member organisations and their roles, or membership tasks).</p>"},{"location":"design/views_hierarchy/#unquoteslugmixin-amyfiscalbase_viewspy","title":"<code>UnquoteSlugMixin</code> (<code>amy/fiscal/base_views.py</code>)","text":"<p>Used when URL slug field, needed to access the object represented by that field, may contain characters requiring unquoting. This is used by 3 organisation-related views (details, update, delete).</p>"},{"location":"design/views_hierarchy/#forminvalidmessagemixin-amyworkshopsbase_viewspy","title":"<code>FormInvalidMessageMixin</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Add an error message on invalid form submission.</p>"},{"location":"design/views_hierarchy/#amydetailview-amyworkshopsbase_viewspy","title":"<code>AMYDetailView</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Almost a direct, not extended descendant of <code>DetailView</code>, with one small exception: it contains type annotation for <code>object</code> attribute of the class.</p>"},{"location":"design/views_hierarchy/#amycreateview-amyworkshopsbase_viewspy","title":"<code>AMYCreateView</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Class-based view for creating objects that extends default template context by adding model class used in objects creation. Additionally defines default form template, default form helper, default title, default success message, and default invalid form message.</p>"},{"location":"design/views_hierarchy/#amyupdateview-amyworkshopsbase_viewspy","title":"<code>AMYUpdateView</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Class-based view for updating objects that extends default template context by adding proper page title.</p> <p>Provides the same changes as <code>AMYCreateView</code>.</p>"},{"location":"design/views_hierarchy/#amydeleteview-amyworkshopsbase_viewspy","title":"<code>AMYDeleteView</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Class-based view for deleting objects that additionally handles <code>ProtectedError</code>s (occur when attempting to delete a foreign-referenced object). Blocks <code>GET</code> requests.</p>"},{"location":"design/views_hierarchy/#amyformview-amyworkshopsbase_viewspy","title":"<code>AMYFormView</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Not used, should be removed.</p>"},{"location":"design/views_hierarchy/#amylistview-amyworkshopsbase_viewspy","title":"<code>AMYListView</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Configures <code>ListView</code> with filters (if provided), pagination using custom paginator, and some basic context.</p>"},{"location":"design/views_hierarchy/#emailsendmixin-amyworkshopsbase_viewspy","title":"<code>EmailSendMixin</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Used for sending emails when forms pass validation upon <code>POST</code> request.</p>"},{"location":"design/views_hierarchy/#redirectsupportmixin-amyworkshopsbase_viewspy","title":"<code>RedirectSupportMixin</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Implements a safe redirect after form is submitted.</p>"},{"location":"design/views_hierarchy/#prepopulationsupportmixin-amyworkshopsbase_viewspy","title":"<code>PrepopulationSupportMixin</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Supports populating some form fields with values, e.g. from <code>GET</code> parameters.</p>"},{"location":"design/views_hierarchy/#autorespondermixin-amyworkshopsbase_viewspy","title":"<code>AutoresponderMixin</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Automatically emails the form sender.</p>"},{"location":"design/views_hierarchy/#statefiltermixin-amyworkshopsbase_viewspy","title":"<code>StateFilterMixin</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Small mixin used to change default filter value for <code>state</code> field (sets it to pending).</p>"},{"location":"design/views_hierarchy/#changerequeststateview-amyworkshopsbase_viewspy","title":"<code>ChangeRequestStateView</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Almost standalone view used by <code>WorkshopRequest</code>, <code>WorkshopInquiryRequest</code>, and <code>SelfOrganisedSubmission</code> to change request state (to accepted, discarded, or pending).</p>"},{"location":"design/views_hierarchy/#assignview-amyworkshopsbase_viewspy","title":"<code>AssignView</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Almost standalone view used to assign specific person to <code>WorkshopRequest</code>, <code>WorkshopInquiryRequest</code>, <code>SelfOrganisedSubmission</code> or <code>Event</code>.</p>"},{"location":"design/views_hierarchy/#conditionallyenabledmixin-amyworkshopsbase_viewspy","title":"<code>ConditionallyEnabledMixin</code> (<code>amy/workshops/base_views.py</code>)","text":"<p>Mixin for enabling views based on feature flag.</p>"},{"location":"design/views_hierarchy/#onlyforadminsmixin-amyworkshopsutilsaccesspy","title":"OnlyForAdminsMixin (<code>amy/workshops/utils/access.py</code>)","text":"<p>Contains a pre-defined test function checking if user is authenticated and if user is considered an administrator.</p>"},{"location":"design/views_hierarchy/#onlyforadminsnoredirectmixin-amyworkshopsutilsaccesspy","title":"OnlyForAdminsNoRedirectMixin (<code>amy/workshops/utils/access.py</code>)","text":"<p>Same as <code>OnlyForAdminsMixin</code>, but will not redirect to the login page when test function fails, but instead will throw \"permissions denied\" exception.</p>"},{"location":"design/views_hierarchy/#loginnotrequiredmixin-amyworkshopsutilsaccesspy","title":"LoginNotRequiredMixin (<code>amy/workshops/utils/access.py</code>)","text":"<p>Empty class to indicate that specific view is open to public, and doesn't need any permission checking.</p>"},{"location":"design/projects/","title":"Projects","text":"<p>Documentation provided for each of the functional projects.</p> <p>GitHub link to projects.</p> <ul> <li>Automated emails v1 (2019)</li> <li>Memberships</li> <li>Consents</li> <li>Profile Archival</li> <li>Community Roles</li> <li>Instructor Selection</li> <li>Single Instructor Badge</li> <li>Automated emails v2 (2023)</li> </ul>"},{"location":"design/projects/2019_automated_emails/","title":"Automated emails v1 (2019)","text":"<p>GitHub project link unavailable.</p> <p>This project aims to automate sending repetitive emails, for example:</p> <ul> <li>reminders about submitting a workshop's website and slug</li> <li>thank-you emails for the instructors and hosts after workshop had run</li> <li>reminders to recruit helpers</li> <li>etc.</li> </ul> <p>All these emails used to be sent by hand, now they are automatically sent on a specific time before/after some date. For example, \"Recruit Helpers\" email is sent 21 days before event's start date, but only if there are no helpers on the event.</p>"},{"location":"design/projects/2019_automated_emails/#infrastructure","title":"Infrastructure","text":"<p>At the core of automated emails there are:</p> <ul> <li>Redis database for keeping list of scheduled actions ordered by scheduled time</li> <li>Python RQ library</li> </ul> <p>Basic principle of work:</p> <ul> <li>Every scheduled action is an instance of a subclass of   BaseAction.   This provides <code>__call__()</code> method for sending emails.</li> <li>When specific conditions are met, for example an instructor is added to the event,   an instance of specific corresponding action is created and set up. Using RQ library   that action is then scheduled to run at specific time.</li> <li>RQ library serializes (pickles) that action and puts it in Redis.</li> <li>A specific RQ worker (application running on a server) reads from the Redis looking   for actions which should be run.</li> <li>Once the worker retrieves an action to be run, it deserializes (unpickles) it and   calls <code>__call__()</code> method, which sends an email.</li> </ul>"},{"location":"design/projects/2019_automated_emails/#implementation-of-new-actions","title":"Implementation of new actions","text":"<p>There's a few steps that should be taken when implementing a new action.</p> <ol> <li>Add new action to <code>autoemails/actions.py</code> file.<ul> <li>define <code>get_additional_context</code> for defining context passed to email's template</li> <li>implement static <code>check()</code> method for determining if the action conditions are met   or not</li> </ul> </li> <li>Define template corresponding with that action, add it to    <code>autoemails/fixtures/templates_triggers.json</code> (now moved to <code>scripts/seed_autoemails.py</code>).</li> <li>Update <code>Trigger.ACTION_CHOICES</code> in <code>autoemails/models.py</code> with new action.</li> <li>Provide extensive tests for the action itself (see    <code>autoemails/tests/test_postworkshopaction.py</code> for example)</li> <li>In views supporting changes that might trigger the action, use    <code>ActionManageMixin.add()</code> and <code>ActionManageMixin.remove()</code> along with action's    <code>check()</code> method (defined in step 1 above) to schedule or unschedule action email.</li> </ol>"},{"location":"design/projects/2019_automated_emails/#admin-panel","title":"Admin panel","text":"<p>Scheduled automated emails can be previewed in Django Admin. There are options to reschedule, re-try if emails failed, and more.</p> <p>Custom templates and views were implemented to handle this admin panel.</p>"},{"location":"design/projects/2021_community_roles/","title":"Community Roles","text":"<p>GitHub project.</p> <p>This project is an extension, and continuation of a concept of \"badges\" in AMY. Every member of The Carpentries community is assigned a specific role (most often it's \"instructor\", but some people can be \"lesson maintainers\", \"regional coordinators\", \"task force members\", and others). Every role may require different configuration (e.g. link to a specific award type, additional URLs, link to a membership), it can also allow for auto-assignment of a role when given badge is awarded to a person.</p> <p>Interesting consequence of configurable community role (<code>CommunityRoleConfig</code> model) is dynamic form for assigning community roles to people. This form needs to respond to selected role configuration.</p> <p>Important advantage of community roles over badges is inactivation reason and activity period (start / end of the role).</p>"},{"location":"design/projects/2021_consents/","title":"Consents","text":"<p>GitHub project.</p> <p>This project aims to provide more configurable, more extensible and more descriptive consents for the users.</p>"},{"location":"design/projects/2021_consents/#previous-design","title":"Previous design","text":"<p>Consents were stored in the Person model as (in most cases) boolean flags with <code>true</code> values meaning that a person has consented to a given term.</p>"},{"location":"design/projects/2021_consents/#new-design","title":"New design","text":"<p>New models have been created for consent terms (Term), the options for each particular term (TermOption), and the relationship between a Person and their preferred option for each term (Consent). This new structure makes it easier to create and edit terms/options without making a database migration. If a new term is added, all users will be asked for their consent the next time they log in to AMY.</p> <p>Consents are also collected in the instructor training application form. These consents are managed with the TrainingRequestConsent model, and if a Person is created from a training request, the TrainingRequestConsents from that request will be converted to Consents for that Person.</p>"},{"location":"design/projects/2021_instructor_selection/","title":"Instructor Selection","text":"<p>GitHub project.</p> <p>This project aims to replace a publicly available spreadsheet used to assign instructors to workshops. Instead, instructors can log into AMY and see the list of workshops available to them, sort and filter for their convenience.</p> <p>AMY admins also received a special feature to manage available workshop applications.</p>"},{"location":"design/projects/2021_memberships/","title":"Memberships","text":"<p>GitHub project.</p> <p>This project updated structure of memberships to fit current needs of The Carpentries.</p> <p>Changes include:</p> <ul> <li>multiple organisations linked together as a consortium</li> <li>memberships can link to multiple organisations</li> <li>people can be assigned specific roles in memberships</li> <li>memberships can be extended</li> <li>memberships can be rolled over, and there's quite a logic related to that and   calculation of seats available after roll-over.</li> </ul>"},{"location":"design/projects/2021_profile_archival/","title":"Profile archival","text":"<p>GitHub project.</p> <p>This project aims to:</p> <ul> <li>enable profile archival for anyone (archived profile is stripped of all data except   for first name, last name and teaching history)</li> <li>send yearly reminder to update profile information.</li> </ul>"},{"location":"design/projects/2021_single_instructor_badge/","title":"Single Instructor Badge","text":"<p>GitHub project.</p> <p>Series of changes required to drop support for 3 various instructor badges (SWC instructor, DC instructor, LC instructor), and instead use just one: Instructor.</p> <p>This project was tied to Community Roles because once everyone received a single instructor badge, they were assigned \"instructor\" community role.</p>"},{"location":"design/projects/2023_instructor_checkout_changes/","title":"Instructor Checkout Changes","text":"<p>GitHub project.</p> <p>In mid-2023, the checkout requirements for Instructor Training were updated. As the relevant changes were made to AMY to support this update, the project also expanded to include improvements to the training progress view for trainees.</p>"},{"location":"design/projects/2023_instructor_checkout_changes/#checkout-steps","title":"Checkout steps","text":""},{"location":"design/projects/2023_instructor_checkout_changes/#previous-design","title":"Previous design","text":"<p>Three steps: * Lesson Contribution (submitted by trainee through AMY) * Community Discussion (attendees submitted by host through a Google Form) * Demo (attendees &amp; pass/fail assessment submitted by host through a Google Form)</p> <p>These steps were defined as <code>TrainingRequirement</code>s and progress by trainees was stored as <code>TrainingProgress</code> objects.</p>"},{"location":"design/projects/2023_instructor_checkout_changes/#new-design","title":"New design","text":"<p>Three updated steps: * Get Involved - any contribution, such as a GitHub contribution, supporting a workshop, or attending a Community Discussion (submitted by trainee through AMY) * Welcome Session (attendees submitted by host through a Google Form) * Demo (attendees &amp; pass/fail assessment submitted by host through a Google Form)</p> <p>The \"Community Discussion\" <code>TrainingRequirement</code> was renamed to \"Welcome Session,\" but otherwise left unchanged. </p> <p>The \"Lesson Contribution\" <code>TrainingRequirement</code> was changed more significantly. First, it was renamed to \"Get Involved.\" Second, a new model <code>Involvement</code> was developed to store the different activities that a trainee might complete as part of this step. The <code>TrainingProgress</code> model was then updated to store an <code>Involvement</code> if needed, plus a possible date, URL (already supported), and notes from the trainee. Finally, the submission form on the instructor dashboard was updated to allow the trainee to submit their activity under the new system.</p>"},{"location":"design/projects/2023_instructor_checkout_changes/#training-progress-view","title":"Training Progress view","text":""},{"location":"design/projects/2023_instructor_checkout_changes/#previous-design_1","title":"Previous design","text":"<p>A trainee could see what steps they had passed. Any other step status was shown as 'not passed yet.'</p> <p>The 90-day checkout deadline was not shown on the page; this deadline was only communicated by email.</p> <p>The Lesson Contribution submission form was always available, and no detail of previous submissions was visible. This led to confusion: some trainees would make multiple submissions, or be unsure if their submission had gone through.</p> <p>There was also no validation that the lesson contribution URL was associated with a GitHub repository owned by The Carpentries. The Instructor Training Team would often have to contact trainees to explain this error and ask them to resubmit.</p>"},{"location":"design/projects/2023_instructor_checkout_changes/#new-design_1","title":"New design","text":"<p>The updated view was updated to show the state (passed/not evaluated yet/asked to repeat/failed) of each step. If training was passed, the page also displays the 90-day checkout deadline.</p> <p>A summary of the trainee's Get Involved submission (if present) was added.</p> <p>The Get Involved submission form (which replaced the Lesson Contribution submission form) was moved to a separate view. This allowed edit and delete functionality to be added to un-evaluated submissions. Checks were also added to prevent a trainee from making multiple submissions unless requested to do so.</p> <p>Finally, validation was added to ensure submissions of GitHub contributions include a URL associated with a Carpentries GitHub repository.</p>"},{"location":"design/projects/2023_instructor_checkout_changes/#other-changes","title":"Other changes","text":"<p>Also as part of this project: * 'Discarded' status field was removed from <code>TrainingProgress</code> * 'Evaluated by' field was removed from <code>TrainingProgress</code> * Deprecated lesson-program-specific <code>TrainingRequirement</code>s were removed (e.g. \"SWC Demo\" or \"LC Homework\")</p>"},{"location":"design/projects/2023_member_code_enforcement/","title":"Member code enforcement","text":"<p>GitHub project.</p> <p>In early 2024, the membership team planned to start enforcing that all preapproved IT applications and workshop requests should include a valid and active member code (a.k.a. registration code, group code)</p> <p>In mid-2023, the checkout requirements for Instructor Training were updated. As the relevant changes were made to AMY to support this update, the project also expanded to include improvements to the training progress view for trainees.</p>"},{"location":"design/projects/2023_member_code_enforcement/#feature-flag","title":"Feature flag","text":"<p>The <code>ENFORCE_MEMBER_CODES</code> feature flag controls whether validity checks are performed on member codes. If set to <code>True</code> in the Django admin panel, validity checks will be performed on all submissions. If set to <code>False</code>, no checks will be performed (i.e. all codes will be accepted). The value of the flag does not affect whether the <code>member_code</code> field is displayed on forms or in views.</p>"},{"location":"design/projects/2023_member_code_enforcement/#instructor-training-application-form","title":"Instructor Training Application Form","text":""},{"location":"design/projects/2023_member_code_enforcement/#previous-design","title":"Previous design","text":"<p>The form had a field for the member code, but it was optional and not checked for validity.</p>"},{"location":"design/projects/2023_member_code_enforcement/#new-design","title":"New design","text":"<p>The member code field is now required for preapproved trainees, and will raise an error if the entered code is invalid, inactive, or has no seats remaining. However, to avoid forcing the trainee to speak to their membership contact (who may in turn need to speak to us) and wait for the resolution, there is a checkbox to override the invalid code and submit the form anyway.</p> <p>On the admin side, when viewing all training requests, there is now a filter to show applications where the override was used, so these applications can easily be manually checked.</p>"},{"location":"design/projects/2023_member_code_enforcement/#workshop-request-form","title":"Workshop Request Form","text":""},{"location":"design/projects/2023_member_code_enforcement/#previous-design_1","title":"Previous design","text":"<p>The workshop request form did not include a field for the member code. Instead, the WAT would match workshops up with memberships manually.</p>"},{"location":"design/projects/2023_member_code_enforcement/#new-design_1","title":"New design","text":"<p>The form now includes a field for the member code. This field will raise an error if the entered code is invalid or inactive. Unlike the instructor training application, there is no option to override an invalid code.</p> <p>On the admin side, when viewing a workshop request, there is an info box showing the associated membership for the member code (if applicable) and how many workshops that membership has remaining. There is also a filter on the workshop requests page to find requests that came from a member organisation but didn't use any member code - this may happen if multiple groups at the same institution find The Carpentries independently of each other.</p>"},{"location":"design/projects/2023_member_code_enforcement/#other-changes","title":"Other changes","text":"<p>Other features added as part of this project:</p> <ul> <li>When creating an Event from a workshop request, autofill the membership based on the member code</li> <li>When adding a learner Task for a trainee at a TTT event, autofill the membership based on the member code in the trainee's application</li> <li>When bulk matching trainees to training, use the new \"Automatically match seats to memberships\" option to assign each trainee to a membership seat based on the member code in their application (as an alternative to assigning all matched trainees to the same membership)</li> <li>Update email autoresponses to include member code information</li> <li>Include a question about the Eventbrite event that a preapproved trainee has signed up for (if applicable) and allow admins to filter applications by Eventbrite event URLs or IDs.</li> <li>Updates to other questions on the instructor training application</li> <li>Utility functions to check if a membership is active on a certain date, find a membership from a member code, and to validate member codes in particular ways.</li> </ul>"},{"location":"design/projects/2023_automated_emails/","title":"Automated emails v2 (2023)","text":"<p>Github project: https://github.com/orgs/carpentries/projects/10</p> <p>The aim of this project is to replace the current system of automated emails, which is based on Redis and Python RQ, with a new system based on decoupled systems. The new system should be more robust, easier to maintain, and allow for more complex scheduling of emails, at the same time allowing to add the new types of emails more easily.</p> <p>Apart from being decoupled, another important feature of this system is that it fetches the newest representation of objects used in the scheduled email content using AMY API, and creating new actions is simpler and more elegant thanks to the use of Django signals.</p>"},{"location":"design/projects/2023_automated_emails/#infrastructure","title":"Infrastructure","text":"<p>At the core of automated emails there are:</p> <ul> <li>AMY API exposing endpoints for managing scheduled emails,</li> <li>AMY API exposing endpoints for details of objects used in emails' context,</li> <li>A separate application for accessing the AMY API and sending emails.</li> </ul> <p>At the core of the new system in AMY there are used:</p> <ul> <li>Django signals for triggering actions,</li> <li>a controller for managing scheduled emails (scheduling, rescheduling, updating,   cancelling, etc.),</li> <li>types defined for improved type-safety,</li> <li>base actions classes supporting common logic for scheduling, updating or cancelling emails,</li> <li>management panel for viewing and managing scheduled emails.</li> </ul>"},{"location":"design/projects/2023_automated_emails/#how-it-works","title":"How it works","text":"<p>Emails can be scheduled by sending a signal with a specific payload. There always is one signal for scheduling the email, but some emails allow for updating or cancelling them, which is done through two other signals.</p> <p>To help deciding if an email should be sent, updated or cancelled, these emails provide strategies, which implement checks for conditions that should be met for the email to be sent (or updated, or cancelled).</p> <p>Once the email has been scheduled, it is stored in the database as <code>ScheduledEmail</code> record. This record contains all the information needed to send the email, including the email's content, the time when it should be sent, and the email's context objects.</p> <p>The context contains information about the objects that should be used when generating MD and HTML content of the email. It consists of model name and model's primary key, which allows to fetch the object from the API when rendering the email.</p> <p>Once emails have been scheduled, they can be retrieved by the email worker. This is a Python lambda application that runs every 5 minutes, fetches the emails and sends them. The accurate algorithm is described in another section.</p>"},{"location":"design/projects/2023_automated_emails/#email-worker-algorithm","title":"Email worker algorithm","text":"<p>After the worker sets up, it fetches all emails that should be sent by now. Then it processes them individually asynchronously:</p> <ol> <li>Lock the email record to prevent UI work on it.</li> <li>Create context objects for email recipient list and email body content.</li> <li>Create the email context with actual data from the API.</li> <li>Create the email recipient list with actual data from the API.</li> <li>Render the email body and subject with Jinja2 and the context.</li> <li>Render the Markdown version of the email body (this generates the HTML).</li> <li>Send the email.</li> <li>Update the email record with the status.</li> </ol> <p>At any step this process can fail and the email will be marked as failed. The worker will pick it up again in the next run.</p>"},{"location":"design/projects/2023_automated_emails/#implementation-of-new-actions","title":"Implementation of new actions","text":"<p>All actions are defined in <code>emails.actions</code> module. Each action is a class inheriting from <code>BaseAction</code> class (for scheduling emails). If a specific action could allow for updating or cancelling, it should consist of 2 additional classes inheriting from <code>BaseActionUpdate</code> and <code>BaseActionCancel</code> respectively.</p> <p>For details see base actions documentation.</p> <p>Each action must implement the following required methods and fields:</p> <ol> <li> <p>inheriting from <code>BaseAction</code>:</p> <ul> <li><code>signal</code> - parameter that contains a value uniquely identifying the action signal,   and therefore also the email template</li> <li><code>get_scheduled_at()</code> - method that calculates when the action should be run</li> <li><code>get_context()</code> - method that returns the context for the email</li> <li><code>get_context_json()</code> - method that returns the context for the email in JSON   format (this is used by the email worker to fetch the context from the API)</li> <li><code>get_generic_relation_object()</code> - method that returns the main object for the   email (e.g. an event or a person)</li> <li><code>get_recipients()</code> - method that returns the list of recipients of the email</li> <li><code>get_recipients_context_json()</code> - method that returns the recipients of the email   in JSON format (this is used by the email worker to fetch the recipients from the   API)</li> </ul> </li> <li> <p>inheriting from <code>BaseActionUpdate</code>:</p> <ul> <li>the same fields and methods as in <code>BaseAction</code> class</li> </ul> </li> <li> <p>inheriting from <code>BaseActionCancel</code>:</p> <ul> <li>the same fields and methods as in <code>BaseAction</code> class, except for <code>get_recipients()</code>   and <code>get_scheduled_at()</code> methods, which are not needed for the cancelling action,</li> <li>optionally custom methods for providing content type model and generic relation PK are available:   <code>get_generic_relation_content_type()</code>, <code>get_generic_relation_pk()</code></li> </ul> </li> </ol> <p>Each base class implements a <code>__call__()</code> method that in turn uses appropriate <code>EmailController</code> method to schedule, update, or cancel the email.</p>"},{"location":"design/projects/2023_automated_emails/base_actions/","title":"Base classes for scheduling, updating or cancelling receivers","text":""},{"location":"design/projects/2023_automated_emails/base_actions/#baseaction","title":"BaseAction","text":"<p>This class forms the base for scheduling actions related to emails. It defines common methods and attributes used in all scheduling actions.</p> <p>Abstract Methods:</p> <ul> <li><code>get_scheduled_at(self, *args: Any, **kwargs: Any) -&gt; datetime:</code> - Provides a specific datetime when the scheduled email should be sent out.  This method must be implemented by subclasses.</li> <li><code>get_context(self, *args: Any, **kwargs: Any) -&gt; Any:</code> -  Provides a concrete action context object. This method must be implemented by subclasses.</li> <li><code>get_context_json(self, context: Any) -&gt; ContextModel:</code> -  Provides a Pydantic model <code>ContextModel</code> that will be turned into JSON. This method must be implemented by subclasses.</li> <li><code>get_generic_relation_object(self, context: Any, *args: Any, **kwargs: Any) -&gt; Any:</code> - Provides a single object that the scheduled email should be linked to (e.g., a person or event).  This method must be implemented by subclasses.</li> <li><code>get_recipients(self, context: Any, *args: Any, **kwargs: Any) -&gt; list[str]:</code> - Provides a list of email addresses of the email's recipients. This method must be implemented by subclasses.</li> <li><code>get_recipients_context_json(self, context: Any, *args: Any, **kwargs: Any) -&gt; ToHeaderModel:</code> - Provides a Pydantic model <code>ToHeaderModel</code> that will be turned into JSON. This method must be implemented by subclasses.</li> </ul> <p>Methods:</p> <ul> <li><code>__call__(self, sender: Any, *args: Any, **kwargs: Any) -&gt; ScheduledEmail | None:</code> - Reacts to a Django signal and schedules an email.<ul> <li>Checks if the <code>\"EMAIL_MODULE\"</code> feature flag is enabled.</li> <li>Handles <code>suppress_messages</code> and <code>dry_run</code> flags.</li> <li>Calls <code>EmailController.schedule_email()</code> to schedule the email.</li> <li>Logs information about the scheduled action.</li> </ul> </li> </ul>"},{"location":"design/projects/2023_automated_emails/base_actions/#baseactionupdate","title":"BaseActionUpdate","text":"<p>This class extends <code>BaseAction</code> and is used for updating existing scheduled emails.</p> <p>Inherits from: <code>BaseAction</code></p> <p>Methods:</p> <ul> <li><code>__call__(self, sender: Any, *args: Any, **kwargs: Any) -&gt; ScheduledEmail | None:</code> - Reacts to a Django signal and updates a scheduled email.<ul> <li>Checks if the <code>\"EMAIL_MODULE\"</code> feature flag is enabled.</li> <li>Handles <code>suppress_messages</code> and <code>dry_run</code> flags.</li> <li>Retrieves a <code>ScheduledEmail</code> object based on its generic relation object, template, and state.</li> <li>Updates the <code>ScheduledEmail</code> object using <code>EmailController.update_scheduled_email()</code>.</li> <li>Logs information about the updated action.</li> <li>Handles potential exceptions like <code>EmailControllerMissingRecipientsException</code> and <code>EmailControllerMissingTemplateException</code>.</li> </ul> </li> </ul>"},{"location":"design/projects/2023_automated_emails/base_actions/#baseactioncancel","title":"BaseActionCancel","text":"<p>This class extends <code>BaseAction</code> and is used for cancelling scheduled emails.  It's designed to handle multiple emails based on a generic relation object.</p> <p>Inherits from: <code>BaseAction</code></p> <p>Methods:</p> <ul> <li><code>get_generic_relation_content_type(self, context: Any, generic_relation_obj: Any) -&gt; ContentType:</code> - Gets the <code>ContentType</code> object for the model of the generic relation.</li> <li><code>get_generic_relation_pk(self, context: Any, generic_relation_obj: Any) -&gt; int | Any:</code> - Gets the primary key of the generic relation object.</li> <li><code>__call__(self, sender: Any, *args: Any, **kwargs: Any) -&gt; None:</code> - Reacts to a Django signal and cancels scheduled emails.<ul> <li>Checks if the <code>\"EMAIL_MODULE\"</code> feature flag is enabled.</li> <li>Handles <code>suppress_messages</code> and <code>dry_run</code> flags.</li> <li>Retrieves all <code>ScheduledEmail</code> objects that match the generic relation object and have a state of <code>SCHEDULED</code>.</li> <li>Calls <code>EmailController.cancel_email()</code> for each scheduled email.</li> <li>Logs information about the cancelled action.</li> </ul> </li> </ul>"},{"location":"design/projects/2023_automated_emails/email_controller/","title":"Email controller","text":""},{"location":"design/projects/2023_automated_emails/email_controller/#emailcontroller-class","title":"EmailController Class","text":"<p>This class provides methods for scheduling, rescheduling, updating, and managing scheduled emails. It interacts with email templates, attachments, and S3 storage.</p>"},{"location":"design/projects/2023_automated_emails/email_controller/#methods","title":"Methods","text":""},{"location":"design/projects/2023_automated_emails/email_controller/#schedule_emailsignal-context_json-scheduled_at-to_header-to_header_context_json-generic_relation_objnone-authornone","title":"<code>schedule_email(signal, context_json, scheduled_at, to_header, to_header_context_json, generic_relation_obj=None, author=None)</code>","text":"<ul> <li>Description: Schedules a new email to be sent.</li> <li>Args:<ul> <li><code>signal</code> (str): The signal that triggers the email.</li> <li><code>context_json</code> (ContextModel): The context data for the email.</li> <li><code>scheduled_at</code> (datetime): The datetime at which the email should be sent.</li> <li><code>to_header</code> (list[str]): A list of recipient email addresses.</li> <li><code>to_header_context_json</code> (ToHeaderModel): The context data for the recipient email addresses.</li> <li><code>generic_relation_obj</code> (Model | None, optional): An optional related object. Defaults to <code>None</code>.</li> <li><code>author</code> (Person | None, optional): The author of the email log entry. Defaults to <code>None</code>.</li> </ul> </li> <li>Returns: <code>ScheduledEmail</code> object.</li> <li>Raises:<ul> <li><code>EmailControllerMissingRecipientsException</code>: If the email has no recipients.</li> </ul> </li> <li>Example: <pre><code># Assuming you have a ScheduledEmail object named 'scheduled_email'\n# and the necessary data in 'context_json', 'scheduled_at', etc.\n# scheduled_email = EmailController.schedule_email(\n#     signal=\"new_user_welcome\",\n#     context_json=context_json,\n#     scheduled_at=scheduled_at,\n#     to_header=[\"user@example.com\"],\n#     to_header_context_json=to_header_context_json,\n# )\n</code></pre></li> </ul>"},{"location":"design/projects/2023_automated_emails/email_controller/#reschedule_emailscheduled_email-new_scheduled_at-authornone","title":"<code>reschedule_email(scheduled_email, new_scheduled_at, author=None)</code>","text":"<ul> <li>Description: Reschedules a scheduled email at a new scheduled date.</li> <li>Args:<ul> <li><code>scheduled_email</code> (ScheduledEmail): The ScheduledEmail object to reschedule.</li> <li><code>new_scheduled_at</code> (datetime): The new datetime at which the email should be sent.</li> <li><code>author</code> (Person | None, optional): The author of the email log entry. Defaults to <code>None</code>.</li> </ul> </li> <li>Returns: <code>ScheduledEmail</code> object.</li> </ul>"},{"location":"design/projects/2023_automated_emails/email_controller/#update_scheduled_emailscheduled_email-context_json-scheduled_at-to_header-to_header_context_json-generic_relation_objnone-authornone","title":"<code>update_scheduled_email(scheduled_email, context_json, scheduled_at, to_header, to_header_context_json, generic_relation_obj=None, author=None)</code>","text":"<ul> <li>Description: Updates an existing scheduled email.</li> <li>Args:<ul> <li><code>scheduled_email</code> (ScheduledEmail): The ScheduledEmail object to update.</li> <li><code>context_json</code> (ContextModel): The context data for the email.</li> <li><code>scheduled_at</code> (datetime): The datetime at which the email should be sent.</li> <li><code>to_header</code> (list[str]): A list of recipient email addresses.</li> <li><code>to_header_context_json</code> (ToHeaderModel): The context data for the recipient email addresses.</li> <li><code>generic_relation_obj</code> (Model | None, optional): An optional related object. Defaults to <code>None</code>.</li> <li><code>author</code> (Person | None, optional): The author of the email log entry. Defaults to <code>None</code>.</li> </ul> </li> <li>Returns: <code>ScheduledEmail</code> object.</li> </ul>"},{"location":"design/projects/2023_automated_emails/email_controller/#change_state_with_logscheduled_email-new_state-details-authornone","title":"<code>change_state_with_log(scheduled_email, new_state, details, author=None)</code>","text":"<ul> <li>Description: Changes the state of a scheduled email and logs the change.</li> <li>Args:<ul> <li><code>scheduled_email</code> (ScheduledEmail): The ScheduledEmail object to update.</li> <li><code>new_state</code> (ScheduledEmailStatus): The new state of the email.</li> <li><code>details</code> (str): The details of the state change.</li> <li><code>author</code> (Person | None, optional): The author of the email log entry. Defaults to <code>None</code>.</li> </ul> </li> <li>Returns: <code>ScheduledEmail</code> object.</li> </ul>"},{"location":"design/projects/2023_automated_emails/email_controller/#cancel_emailscheduled_email-detailsemail-was-cancelled-authornone","title":"<code>cancel_email(scheduled_email, details=\"Email was cancelled\", author=None)</code>","text":"<ul> <li>Description: Cancels a scheduled email.</li> <li>Args:<ul> <li><code>scheduled_email</code> (ScheduledEmail): The ScheduledEmail object to cancel.</li> <li><code>details</code> (str, optional): The details of the cancellation. Defaults to \"Email was cancelled\".</li> <li><code>author</code> (Person | None, optional): The author of the email log entry. Defaults to <code>None</code>.</li> </ul> </li> <li>Returns: <code>ScheduledEmail</code> object.</li> </ul>"},{"location":"design/projects/2023_automated_emails/email_controller/#lock_emailscheduled_email-details-authornone","title":"<code>lock_email(scheduled_email, details, author=None)</code>","text":"<ul> <li>Description: Locks a scheduled email.</li> <li>Args:<ul> <li><code>scheduled_email</code> (ScheduledEmail): The ScheduledEmail object to lock.</li> <li><code>details</code> (str): The details of the lock.</li> <li><code>author</code> (Person | None, optional): The author of the email log entry. Defaults to <code>None</code>.</li> </ul> </li> <li>Returns: <code>ScheduledEmail</code> object.</li> </ul>"},{"location":"design/projects/2023_automated_emails/email_controller/#fail_emailscheduled_email-details-authornone","title":"<code>fail_email(scheduled_email, details, author=None)</code>","text":"<ul> <li>Description: Sets a scheduled email as failed.</li> <li>Args:<ul> <li><code>scheduled_email</code> (ScheduledEmail): The ScheduledEmail object to fail.</li> <li><code>details</code> (str): The details of the failure.</li> <li><code>author</code> (Person | None, optional): The author of the email log entry. Defaults to <code>None</code>.</li> </ul> </li> <li>Returns: <code>ScheduledEmail</code> object.</li> </ul>"},{"location":"design/projects/2023_automated_emails/email_controller/#s3_file_pathscheduled_email-filename_uuid-filename","title":"<code>s3_file_path(scheduled_email, filename_uuid, filename)</code>","text":"<ul> <li>Description: Generates the S3 path for an attachment.</li> <li>Args:<ul> <li><code>scheduled_email</code> (ScheduledEmail): The ScheduledEmail object.</li> <li><code>filename_uuid</code> (UUID): The UUID of the attachment.</li> <li><code>filename</code> (str): The filename of the attachment.</li> </ul> </li> <li>Returns: (str): The S3 path for the attachment.</li> </ul>"},{"location":"design/projects/2023_automated_emails/email_controller/#generate_presigned_url_for_attachmentattachment-expiration_seconds3600","title":"<code>generate_presigned_url_for_attachment(attachment, expiration_seconds=3600)</code>","text":"<ul> <li>Description: Generates a presigned URL for an attachment.</li> <li>Args:<ul> <li><code>attachment</code> (Attachment): The Attachment object.</li> <li><code>expiration_seconds</code> (int, optional): The expiration time of the presigned URL in seconds. Defaults to 3600.</li> </ul> </li> <li>Returns: <code>Attachment</code> object.</li> </ul>"},{"location":"design/projects/2023_automated_emails/email_controller/#add_attachmentscheduled_email-filename-content","title":"<code>add_attachment(scheduled_email, filename, content)</code>","text":"<ul> <li>Description: Adds an attachment to a scheduled email.</li> <li>Args:<ul> <li><code>scheduled_email</code> (ScheduledEmail): The ScheduledEmail object.</li> <li><code>filename</code> (str): The filename of the attachment.</li> <li><code>content</code> (bytes): The content of the attachment.</li> </ul> </li> <li>Returns: <code>Attachment</code> object.</li> </ul>"},{"location":"design/projects/2023_automated_emails/new_action_checklist/","title":"Implementing a new action","text":""},{"location":"design/projects/2023_automated_emails/new_action_checklist/#checklist","title":"Checklist","text":"<ol> <li>Add new action signal name to <code>emails.signals.SignalNameEnum</code> enum.</li> <li>Define the context TypedDict in <code>emails.types</code> module. This should be a dictionary    with keys and types of values that will be passed to the email template as context.</li> <li>Define the kwargs TypedDict in <code>emails.types</code> module. This should be a dictionary    with keys and types of values that will be passed to the action's constructor (when    the signal for email is being sent).</li> <li>Define the action class in a new module in <code>emails.actions</code> package. This class should    inherit from <code>BaseAction</code> class and implement all required methods.</li> <li>If the action should allow for updating or cancelling, define additional classes    inheriting from <code>BaseActionUpdate</code> and <code>BaseActionCancel</code> respectively.</li> <li> <p>Create receivers as instances of the action classes. Link the receivers to the    appropriate signals in <code>emails.signals</code> module:    <pre><code>receiver = MyAction()\nsignal.connect(receiver)\n</code></pre></p> </li> <li> <p>If the action consists of scheduling, updating, and cancelling, create <code>action_strategy</code> and <code>run_action_strategy</code> functions. Follow examples from other actions.</p> </li> </ol>"},{"location":"design/projects/2023_automated_emails/new_action_checklist/#using-a-new-action","title":"Using a new action","text":"<p>If the action contains a strategy, then using it is quite simple:</p> <pre><code>run_action_strategy(\n    action_strategy(object),\n    request,\n    object,\n)\n</code></pre> <p>Strategies may accept other parameters, but the selected strategy and request (as in Django view request) are required.</p> <p>The code above needs to be used in the places where we know user has taken some action (e.g. edited an event) and we want to either trigger a new scheduled email, update existing scheduled email, or cancel such email.</p>"},{"location":"releases/","title":"Release notes","text":"<p>Release notes for version v4.0.5 and later are kept in the CHANGELOG file in the AMY repository.</p> <ul> <li>v4.0.4 (2022-11-04)</li> <li>v4.0.3 (2022-10-31)</li> <li>v4.0.2 (2022-10-24)</li> <li>v4.0.1 (2022-10-23)</li> <li>v4.0.0 (2022-10-15)</li> <li>v3.4.0 (2022-01-03)</li> <li>v3.3.2 (2021-10-26)</li> <li>v3.3.1 (2021-10-10)</li> <li>v3.3.0 (2021-09-20)</li> <li>v3.2.1 (2021-07-11)</li> <li>v3.2.0 (2021-07-03)</li> <li>v3.1.0 (2021-06-16)</li> <li>v3.0.0 (2021-05-29)</li> <li>v2.16.1 (2021-02-14)</li> <li>v2.16.0 (2021-01-30)</li> <li>v2.15.0 (2020-12-06)</li> <li>v2.14.1 (2020-10-18)</li> <li>v2.14.0 (2020-09-06)</li> <li>v2.13.2 (2020-08-16)</li> <li>v2.13.1 (2020-08-10)</li> <li>v2.13.0 (2020-06-21)</li> <li>v2.12.1 (2020-05-10)</li> <li>v2.12.0 (2020-05-02)</li> <li>v2.11.1 (2020-02-24)</li> <li>v2.11.0 (2020-02-24)</li> <li>v2.10.0 (2020-01-12)</li> <li>v2.9.5 (2019-12-08)</li> <li>v2.9.4 (2019-10-04)</li> <li>v2.9.3 (2019-09-28)</li> <li>v2.9.2 (2019-09-25)</li> <li>v2.9.1 (2019-09-24)</li> <li>v2.9.0 (2019-09-16)</li> <li>v2.8.0 (2019-06-19)</li> <li>v2.7.0 (2019-04-05)</li> <li>v2.6.0 (2019-03-05)</li> <li>v2.5.1 (2019-02-13)</li> <li>v2.5.0 (2019-02-03)</li> <li>v2.4.1 (2019-01-20)</li> <li>v2.4.0 (2019-01-02)</li> <li>v2.3.0 (2018-12-13)</li> <li>v2.2.1 (2018-10-06)</li> <li>v2.2.0 (2018-11-01)</li> <li>v2.1.1 (2018-10-06)</li> <li>v2.1.0 (2018-09-28)</li> <li>v2.0.0 (2018-08-05)</li> <li>v1.12.0 (2018-07-05)</li> <li>v1.11.5</li> <li>v1.11.4</li> <li>v1.11.3</li> <li>v1.11.2 (2018-04-02)</li> <li>v1.11.1 (2017-11-07)</li> <li>v1.11.0 (2017-07-10)</li> <li>v1.10.1 (2017-04-16)</li> <li>v1.10.0 (2017-04-04)</li> <li>v1.9.1</li> <li>v1.9.0</li> <li>v1.8.0</li> <li>v1.7.2</li> <li>v1.7.1</li> <li>v1.7.0</li> <li>v1.6.2</li> <li>v1.6.1</li> <li>v1.6.0</li> <li>v1.5.4</li> <li>v1.5.3</li> <li>v1.5.2</li> <li>v1.5.1</li> <li>v1.5.1</li> <li>v1.5.0</li> <li>v1.4.0</li> <li>v1.3.2</li> <li>v1.3.1</li> <li>v1.2.1-1.3.0</li> <li>v1.2.0</li> <li>v1.1.0</li> <li>v1.0.0</li> <li>v0.9.7</li> <li>v0.9.6</li> <li>v0.9.5</li> <li>v0.9.2</li> <li>v0.9.1</li> </ul>"},{"location":"releases/v0.9.1/","title":"AMY release v0.9.1","text":"<p>This note was taken from v1.0.0; sorry for the brevity.</p> <ul> <li>Greg has worked on the \"problems\" page: switched its layout     to 3-column, added better email messages, etc.</li> <li>He also extended our API to return airport's country.</li> </ul>"},{"location":"releases/v0.9.2/","title":"AMY release v0.9.2","text":"<p>This note was taken from v1.0.0; sorry for the brevity.</p> <ul> <li>Piotr hot-fixed an issue with creating M2M with intermediary model in     model forms (basically impossible, we have to do this manually).</li> </ul>"},{"location":"releases/v0.9.5/","title":"AMY release v0.9.5","text":"<p>This note was taken from v1.0.0; sorry for the brevity.</p> <ul> <li>This release adds workshop request forms and profile update request     form to AMY.</li> </ul>"},{"location":"releases/v0.9.6/","title":"AMY release v0.9.6","text":"<p>This note was taken from v1.0.0; sorry for the brevity.</p> <ul> <li>Piotr hot-fixed a bug with settings: we should load more email settings     from environmental variables in order to use emails from Django.</li> </ul>"},{"location":"releases/v0.9.7/","title":"AMY release v0.9.7","text":"<p>This note was taken from v1.0.0; sorry for the brevity.</p> <ul> <li>Piotr added a new country: 'Online' (for international / online events,     like some Instructor Trainings).</li> <li>The dashboard was changed to show not only upcoming, but also     ongoing workshops (in the same column).</li> <li>Greg added some helper commands to report inconsistencies in PDF     certificates for instructors.</li> <li>Greg also removed old command used for checking AMY's database against     SWC site's archive. Site has moved to use AMY's API, so the archive     was gone and the command was made redundant.</li> <li>Piotr updated <code>check.py</code> script (used for checking workshop settings     correctness) from workshop-template repository.</li> <li>Greg cleared up titles of forms introduced in v0.9.5.</li> <li>Piotr split these forms' templates and added SWC and DC logos to them.</li> </ul>"},{"location":"releases/v1.0.0/","title":"AMY release v1.0.0","text":"<p>That was a looong ride, but we're finally here! AMY is mature enough to be given the v1.0.0 tag.</p>"},{"location":"releases/v1.0.0/#new-features","title":"New features","text":"<ul> <li>We have a new database for development use.</li> <li>Piotr changed the way AMY handles event URLs:<ul> <li>admins cannot use GitHub repository URL for event's URL</li> <li>migration was used to change all URLs to website-URL format (if     possible)</li> <li>Piotr also fixed import/update from URL feature to auto-select     country if possible</li> <li>\u2026and to auto-use correct website URL instead of repository URL.</li> </ul> </li> <li>AMY auto-counts event attendees if provided with a list of attendees     (for example via bulk-upload).</li> <li>External links now open in new tabs.</li> <li>Now there are more options to <code>Event.invoice</code> (for example with reason     for lack of invoice).</li> <li>New remove awards functionality.</li> </ul>"},{"location":"releases/v1.0.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Bulk-uploaded CSVs with entries that contained empty rows (for     example: <code>,,,,,,</code>) were treated as correct, but not anymore.</li> <li>\"Artificial\" country European Union had been removed and was brought     back since some hosts were using it.</li> <li>API now returns website URLs to events instead of original URLs.</li> </ul>"},{"location":"releases/v1.1.0/","title":"AMY release v1.1.0","text":"<p>This is the second post-gsoc release of AMY, the workshop management tool for Software-Carpentry. Below you can find a release notes for v1.1.0.</p>"},{"location":"releases/v1.1.0/#announcement","title":"Announcement","text":"<p>We're very happy to announce that development of AMY versions 1.1, 1.2 and 1.3 is supported by prof. Ethan White. Thanks a lot!</p>"},{"location":"releases/v1.1.0/#new-features","title":"New features","text":"<ul> <li>New switch for Open/Closed requests (both profile update requests     and workshop requests). Admins will be able to look up dismissed or     finished requests.</li> <li>\"Recently changed\" log was moved to a separate view so that it     doesn't clutter the dashboard.</li> <li>Some objects (events, hosts, persons, airports, tasks) are followed     by django-reversion.     Thanks to that fact we can now show who+when created any of these     objects and who+when last modified it.</li> <li>Each event marked as \"uninvoiced\" can easily be invoiced by the     admin thanks to the new \"Invoice\" button on the event's details     page.</li> <li>New report: people who have been through instructor training but     didn't finish.</li> <li>Self-organized workshops can now have a \"self-organized\" host.</li> <li>New report: show how often instructors teach.</li> <li>Admins can mark events as completed and throw them out of the filter     results.</li> <li>Big: events can have multiple TODO items associated with them.</li> </ul>"},{"location":"releases/v1.1.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Small typo in <code>README.md</code> fixed.</li> <li>Logic for displaying uninvoiced events was fixed so that events     marked as uninvoiced but without any admin fee do show up on the     dashboard.</li> <li>Fields layout on the profile update request details page was changed     to avoid confusion.</li> <li>Better wording in email request to workshop hosts for attendees     figures.</li> </ul>"},{"location":"releases/v1.10.0/","title":"AMY release v1.10.0 - 2017-04-04","text":"<p>Major AMY v1.10.0 was released on 2017-04-04.</p>"},{"location":"releases/v1.10.0/#new-features-and-enhancements","title":"New features and enhancements","text":"<ul> <li>Chris made database filename customizable.</li> <li>Piotr backported release notes from his blog to the repo.</li> <li>Piotr added a new REST endpoint for exporting badges grouped by person.</li> <li>Piotr enhanced bulk person upload functionality - added \"use that person\" button and interpreted \"role\" column.</li> <li>Aditya reordered fields on workshop request form.</li> <li>Piotr cleaned up our Makefile.</li> <li>Piotr enlarged tags filter, so you can see all tags without scrolling now. See #1125 and #1131.</li> <li>Piotr added a button to mail selected workshops staff</li> <li>Piotr sped up person detailed and edit views as well as admin dashboard</li> <li>Chris installed <code>django_extensions</code> which made development easier.</li> <li>Chris removed unused timeline from admin dashboard.</li> <li>Chris added <code>notes</code> field to training requests.</li> <li>Chris sped up training list view.</li> <li>Chris implemented prepopulation of group name in training request form.</li> </ul>"},{"location":"releases/v1.10.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Chris corrected title on badge detail page.</li> <li>Aditya refactored a lot and fixed bugs related to authorization.</li> <li>Aditya fixed where you're redirected after deleting a record.</li> <li>Chris made airport code insensitive in profile update requests.</li> <li>Piotr simplified search form by using GET instead of POST method.</li> <li>Jonah fixed wording in membership and organization detailed view.</li> <li>Piotr fixed a bug preventing you from merging two trainees if they had any training progress.</li> <li>Aditya fixed not working delete button on training progress edit view.</li> <li>Piotr fixed a bunch of bugs related to where cancelled events are displayed and how they're counted.</li> <li>Chris removed cancelled workshops from uninvoiced events list in admin dashboard.</li> <li>Chris fixed a bug resulting in 500 Internal Server Error when viewing a person.</li> <li>Chris introduced warnings (in addition to errors) in event validation.</li> <li>Chris ensured that admins can see navigation bar on external forms.</li> <li>Chris added missing field (user notes) when editing a person.</li> </ul>"},{"location":"releases/v1.10.1/","title":"AMY release v1.10.1 - 2017-04-16","text":"<p>Minor AMY v1.10.1 was released on 2017-04-16.</p>"},{"location":"releases/v1.10.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Aditya fixed \"update from url\" button.</li> </ul>"},{"location":"releases/v1.11.0/","title":"AMY release v1.11.0 -","text":"<p>Major AMY v1.11.0 was released on 2017-07-10. This is mainly a bug-fix release.</p> <p>Thanks to Aditya for a lot of code reviews.</p>"},{"location":"releases/v1.11.0/#new-features","title":"New features","text":"<ul> <li>Chris made sure AMY sends emails to senders of training request form</li> <li>Chris updated the command line tool to generate fake database</li> <li>Chris and Piotr documented deployment procedure</li> <li>Greg and Piotr included info about awarders in certificates</li> </ul>"},{"location":"releases/v1.11.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Chris raised REST API throttle rate for logged in users.</li> <li>James sorted airports</li> <li>Chris fixed messed up revision pages</li> <li>Chris fixed misleading help text in \"import from URL\" modal</li> <li>Chris made family name optional</li> <li>Chris made sure invalid values in autocomplete fields are not ignored</li> <li>Chris fixed a bug preventing you from editing people</li> <li>Chris prevented navbar from wrapping and covering content on smaller screens</li> <li>Chris fixed a bug that would appear if we switched to PostgreSQL</li> <li>Chris fixed not working search page</li> </ul>"},{"location":"releases/v1.11.1/","title":"AMY release v1.11.1 - 2017-11-07","text":"<p>Minor AMY v1.11.1 was released on 2017-11-07.</p> <p>This release brings first big part of developer documentation and some smaller (but urgent) fixes requested by AMY users.</p>"},{"location":"releases/v1.11.1/#merged-pull-requests","title":"Merged pull-requests","text":"<ul> <li>Piotr implemented urgent fixes to the trainee-dashboard</li> <li>Piotr added some developer-notes</li> <li>Chris improved deployment procedure</li> </ul>"},{"location":"releases/v1.11.2/","title":"AMY release v1.11.2 - 2018-04-02","text":"<p>Minor AMY v1.11.2 was released on 2018-04-02.</p> <p>This release brings: * changes to the training-request form (upstream updates), * additional \"Created-on\" field for exporting training requests as CSV.</p>"},{"location":"releases/v1.11.3/","title":"AMY release v1.11.3","text":"<p>This release is intended to upgrade AMY's dependencies and the source code accordingly to the changes required by newer versions of the dependencies.</p>"},{"location":"releases/v1.11.3/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Aditya had started, and Piotr finished fixing an   annoying lack of redirection from '/' to the dashboard   ('/workshops/'),</li> <li>Piotr fixed a rare bug appearing when merging two   persons, a database constraint (usernames or Twitter   usernames or Github usernames) could be violated,</li> <li>Andy provided a fix for fake database generation.</li> </ul>"},{"location":"releases/v1.11.3/#new-features","title":"New features","text":"<ul> <li>Jonah added two more badges to AMY that correspond   to mentor trainings,</li> <li>Piotr upgraded AMY's dependencies since they were   long overdue.</li> </ul>"},{"location":"releases/v1.11.4/","title":"AMY release v1.11.4","text":"<p>This release is intended to comply with GDPR regulations in European Union and focuses mostly on AMY compliance with this law.</p>"},{"location":"releases/v1.11.4/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Piotr fixed introduced in v1.11.3 bug that caused <code>SWC</code> tag to disappear   from production server. The bug was related to changes in merging object   functionality.</li> </ul>"},{"location":"releases/v1.11.4/#new-features","title":"New features","text":"<ul> <li>Jonah updated privacy policy location,</li> <li>Piotr added option for users to publish their profiles on The Carpentries   websites,</li> <li>Piotr added a popup for users to agree to the privacy policy.</li> </ul>"},{"location":"releases/v1.11.5/","title":"AMY release v1.11.5","text":"<p>This release provides a few hotfixes discovered after deploying previous GDPR release.</p>"},{"location":"releases/v1.11.5/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Piotr fixed a JavaScript bug introduced in v1.11.4, that prevented from   executing any further JavaScript lines, and therefore disabled Select2 widget   from loading correctly.</li> <li>Piotr reworked query in <code>export-instructors</code> endpoint: removed doubled   instructors, added missing locations due to wrong (main-)query, and added   <code>query_params</code> to the list returned by <code>OPTIONS</code> request to this endpoint.</li> </ul>"},{"location":"releases/v1.12.0/","title":"AMY release v1.12.0 - 2018-07-05","text":"<p>Major AMY version v1.12.0 was released on 2018-07-05.</p>"},{"location":"releases/v1.12.0/#new-features","title":"New features","text":"<ul> <li>Piotr enhanced workshop activity for trainees in their dashboard.</li> <li>Piotr implemented API endpoint for users to download their data from AMY.</li> <li>Piotr added a top navigation bar for trainees dashboard; the dashboard is now split into multiple views, which allowed to simplify the UI.</li> <li>Piotr added notes to task pane on event edit view.</li> <li>Piotr added a new filter for API <code>person-list</code> view.</li> <li>Piotr added a Mailgun interface to AMY.</li> </ul>"},{"location":"releases/v1.12.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed trainee search (missing events with both <code>stalled</code> and <code>TTT</code> tags).</li> <li>Piotr incorporated Chris's fix for truncated language names in database.</li> <li>Piotr fixed inconsistencies present in import/update events from URL window.</li> <li>Piotr fixed &amp; restyled sidebar on numerous pages including \"Find Workshop Staff\"; form size in the sidebar was improved, and so was autocomplete widget's width.</li> <li>Piotr fixed CSV output from training requests by moving it to API.</li> <li>Piotr fixed a number of issues related to GitHub Auth; the PR includes GitHub username validation, checking of user existence via GitHub API, and a fix for \"Logging in with GitHub allowed\" displayed for users who actually weren't able to login in with GH. Idea of looking up users from GitHub via its API was dropped.</li> <li>Piotr fixed links redirecting to Code of Conduct pages; other links going to SWC pages or old emails were also updated.</li> </ul>"},{"location":"releases/v1.2.0/","title":"AMY release v1.2.0","text":"<p>This is the third post-gsoc release of AMY, the workshop management tool for Software-Carpentry. This release was supported by prof. Ethan White. Thanks a lot!</p> <p>Below you can find release notes for v1.2.0.</p>"},{"location":"releases/v1.2.0/#new-features","title":"New features","text":"<ul> <li>(big one) fix finding, parsing and validating of event tags: it will     now work with <code>&lt;meta&gt;</code> tags on workshop websites</li> <li>after approving person's profile update request, the updated profile     is displayed instead of the list of other update requests.</li> <li>password reset form was added,</li> <li>issues related to, for example, missing location data are now     highlighted on event details page,</li> <li>(big one) admins can now be assigned to specific events or event     requests,</li> <li>Greg changed descriptions section names on \"instructor issues\" page,</li> <li>the same page was updated by me so that we can have pending and     \"gave-up-on\" trainees listed,</li> <li>the previous feature was introduced thanks to new 'stalled' tag,</li> <li>our API gained some filtering (go to     https://amy.software-carpentry.org/api/v1/events/published/, click     \"OPTIONS\" and look at \"query_params\"; these can be added to the API     calls, for example:     https://amy.software-carpentry.org/api/v1/events/published/?host=123456789&amp;administrator=987654321)</li> <li>the same API gained a new endpoint used for generating list of     current members of Software-Carpentry Foundation; this is in no way     official list of members, but it can be used to help determine who's     eligible (credits for this one go to both Greg and me since I     finished his pull request),</li> <li>it's now possible to search in events' URL, contact, venue and     address fields,</li> <li>2 new options for invoice status were added (not invoiced for     historical reasons and not invoiced because of membership),</li> <li>more places (workshop issues, and on each workshop without     attendance data) to send \"Give us attendance figures\" emails, more     people to send to,</li> <li>profile update requests can now be edited by admins.</li> </ul>"},{"location":"releases/v1.2.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>wrong object type passed to <code>\"\".format()</code> method</li> <li>wrong characters permitted in event slugs</li> <li>(big one) inconsistant logic in <code>EventQuerySet.(un)published_events</code>     methods</li> </ul>"},{"location":"releases/v1.2.1_v1.3.0/","title":"AMY release v1.3.0","text":"<p>In the past month we've seen two releases of AMY: v1.2.1 and v1.3.0. This is a joined release notes for both of them.</p>"},{"location":"releases/v1.2.1_v1.3.0/#new-features","title":"New features","text":"<ul> <li>use custom-built jQuery-UI (so that we no longer have conflicts   with Bootstrap's tooltip module)</li> <li>Greg updated the script used to send instructors \"Hey, update   your info\" mails (it's getting removed later on)</li> <li>it's possible to add memberships per host</li> <li>new badge: DC instructor</li> <li>new logic for dealing with two instructor badges</li> <li>timeline of TO-DO items</li> <li>basic models (e.g. lessons, tags, academic levels, etc.) are now   manageable from Django's admin interface</li> <li>all persons view: add filtering by workshop type person taught at</li> <li>remove blurred production database in favor of generated fake   database</li> <li>mailing script turned into better Django management command</li> <li>bulk upload now shows generated username and suggested people with   matching names</li> <li>show preview of event on SWC website</li> <li>API: filter events by tags</li> </ul>"},{"location":"releases/v1.2.1_v1.3.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>wrong URL used in event validation or import/update features is   now indicated (and we won't receive wrong notifications about it)</li> <li>properly throw 404 on some pages (previously: 500)</li> <li>spaces are striped from <code>Person</code> and <code>ProfileUpdateRequest</code>   fields (names, emails)</li> <li>disable location inputs on event details page if online country   was preselected</li> </ul>"},{"location":"releases/v1.2.1_v1.3.0/#removed","title":"Removed","text":"<ul> <li>Greg removed some unused scripts (<code>test-command-line-upload.sh</code>)   and commands (<code>parse-instructor-info.py</code>)</li> <li>notifications about invalid HTTP header <code>Host</code></li> <li>other removed scripts and commands</li> </ul>"},{"location":"releases/v1.3.1/","title":"AMY release v1.3.1","text":"<p>This note was taken from v1.4.0; sorry for the brevity.</p> <p>One bugfix: don't break whole timeline widget when there are TODOs without due date.</p>"},{"location":"releases/v1.3.2/","title":"AMY release v1.3.2","text":"<p>This note was taken from v1.4.0; sorry for the brevity.</p> <p>New feature: stop using dots (<code>.</code>) for usernames, use underscores (<code>_</code>) instead.</p> <p>This was an interesting issue: since we rely on some Ruby software on the SWC website, we can't have dots in filenames (they're treated as parameter access operator, for example: <code>banaszkiewicz.piotr</code> is <code>piotr</code> parameter on <code>banaszkiewicz</code> object). But we have filenames that correspond to usernames in AMY. So it was necessary to drop dots and switch to underscores\u2026</p>"},{"location":"releases/v1.4.0/","title":"AMY release v1.4.0","text":"<p>Intense month of January is almost behind us, so it's time for new AMY release.</p> <p>Three versions have been released since v1.3.0: v1.3.1, v1.3.2 (both in separate release notes files) and finally v1.4.0.</p> <p>Unfortunately, due to the way we have our project laid out on GitHub, some of the features implemented for v1.4.0 before v1.3.2 were included in the deployment; I will still put them here, though.</p> <p>The biggest highlights of this month are definitely:</p> <ul> <li>first approach to the new API</li> <li>API reports</li> <li>merging events.</li> </ul> <p>There were also some essential features, but not much. In v1.5 there will be a lot more.</p>"},{"location":"releases/v1.4.0/#data-fixing","title":"Data fixing","text":"<p>We had to programmatically fix/complete some of our records:</p> <ul> <li>historical events on production server were assigned an administering   organization (that's the one responsible for taking care of the workshop   bureaucracy),</li> <li>new DC instructors were added: anyone with a special note or anyone who   taught at DC workshop now has a <code>DC instructor</code> badge.</li> </ul>"},{"location":"releases/v1.4.0/#new-features","title":"New features","text":"<ul> <li><code>Person</code> model is now able to store person's occupation and ORCID code,</li> <li>events can hold links to survey results (pre-workshop for learners and for   instructors, post-workshop for learners and for instructors, and long-term   for learners),</li> <li>API call for getting members list is now for logged in users only, and   returns members' usernames too,</li> <li>merging events: with option to select fields from either of events, or (in   some cases) even to combine them together. The underlying code may be   reused to fix persons merging,</li> <li>workshop issues page now allows to filter workshops by assigned admin</li> <li>move most of reports to the API; 3 reports now present a graph for easy use,   1 report was requested to be moved to API, and 1 new report was requested   (and Piotr made it in API),</li> <li>API: new structure. It's using hyperlinks between resources and allows to   view and filter for example people associated with specific events,</li> <li>slow tests were fixed (we gained probably around 10s on whole test suite,   even though about 10-20 new tests were introduced); now it's time to speed up   migrations,</li> <li>Greg added two new badges to the database: maintainer and trainer; Piotr made   sure to allow for editing badges via Django Admin interface, and also added   these new badges to the fake database command,</li> <li>Greg also added a new command for getting list of people who should be warned   because their instructor training was about to close,</li> <li>meanwhile Piotr added a command for displaying report about instructor training   completion rates.</li> </ul>"},{"location":"releases/v1.4.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>some fields containing numerical values were switched to other type of fields   to prevent slider from appearing; the background for this issue was that   when scrolling through a page with form, on MacOSX people would accidentally   change values of numerical fields,</li> <li>generation of initial revisions was added to the process of creating a fake   database for development use,</li> <li>some types of events (<code>stalled</code> and <code>unresponsive</code>) were kicked out from   debrief lookup,</li> <li>some invoice options were changed to remain consistent with the rest.</li> </ul>"},{"location":"releases/v1.5.0/","title":"AMY release v1.5.0","text":"<p>Development of AMY in February had seen a boost due to the winter break, and that ended with today's release of v1.5.0.</p>"},{"location":"releases/v1.5.0/#new-features","title":"New features","text":"<p>The biggest new features for this release:</p> <ul> <li>new workshops requests once accepted are linked to resulting events</li> <li>admins now can submit invoices from AMY</li> <li>admins can now receive event submissions (this should work really well for   self-organized workshops that already have a workshop page)</li> </ul> <p>Other changes:</p> <ul> <li>badge details view allows for filtering</li> <li>development and production software was updated</li> <li>production assets (JavaScript and CSS files) are now compressed and served   with unique name</li> <li>persons merging was reworked and is now a lot better</li> <li>it's possible to find duplicates in the database now</li> <li>base templates were renamed to lower confusion</li> <li>API returns award date for every person for every badge</li> <li>added CSV renderer to some API endpoint for exporting members</li> <li>debrief was renamed and also allows for CSV export</li> <li><code>Award</code> model gained <code>awarded_by</code> field pointing to the person responsible   for awarding a badge</li> <li>person lookup in some places now works for \"Name Lastname\" pattern too.</li> </ul> <p>Changes contributed by Greg:</p> <ul> <li>CSV export of instructor completion rates</li> <li>CSV export of missing instructor certificates</li> </ul> <p>(Greg's responsible for training new instructors.)</p>"},{"location":"releases/v1.5.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Django Rest Framework erroring URLs were removed (still not sure what caused   them to error-out)</li> <li>dashboard and workshop issues now show only active (== not stalled, not   marked as complete) events</li> <li>workshop issues was extended by providing a list of workshops without any   assigned instructors</li> <li>a rare error when looking someone up was fixed</li> <li>API throttle rates have been increased</li> <li>current and upcoming events on the dashboard are now based off of published   events.</li> </ul>"},{"location":"releases/v1.5.1/","title":"AMY release v1.5.1","text":"<p>This past month we had a number of submissions from prospect GSOC'16 students (yay!) and, for the first time, number of bugs fixed exceeded number of new enhancements.</p> <p>Since the number of new features is small, we decided to release a minor version (v1.5.1).</p>"},{"location":"releases/v1.5.1/#contributions-by-gsoc-students","title":"Contributions by GSOC students","text":"<p>March 2016 held GSOC'16 applications period for students. We had a lot of students this year and we encouraged them to take a look at AMY and maybe fix something.  This resulted in a number of good contributions.</p>"},{"location":"releases/v1.5.1/#new-features","title":"New features","text":"<p>Starting with new features since there's so few of them:</p> <ul> <li>Greg extended the <code>check_certificates.py</code> command to additionally   return events people participated in</li> <li>Shubham Singh added \"Notes\" field to instructor profile update form</li> <li>Shubham Singh added new tag \"hackaton\"</li> <li>Greg removed command <code>check_badges.py</code></li> <li>Piotr enabled autogeneration of user's username after they're added to the   database</li> <li>Greg added link to Privacy Policy in the footer.</li> </ul>"},{"location":"releases/v1.5.1/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Nikhil Verma found and fixed \"List duplicates\" page error when no   duplicates existed</li> <li>Chris Medrela found and fixed 404 page for revision that didn't exist</li> <li>Greg fixed <code>NameError</code> in <code>check_certificates.py</code></li> <li>Piotr fixed a 500 error appearing when user submitted incomplete form used for   matching people's names</li> <li>Maneesha Sane fixed minimal number of instructors required in our workshop   request form</li> <li>Piotr fixed API renderers (CSV, YAML) not iterating generators but displaying   their textual representations</li> <li>Piotr fixed instructors-num-taught report to include people's names</li> <li>Piotr fixed a small typo in the name of post-workshop survey for instructors (it   was called \"pre\")</li> <li>Piotr made the emails case-insensitive</li> <li>Piotr fixed some 500 errors related to event importing.</li> </ul>"},{"location":"releases/v1.5.2/","title":"AMY bugfix release v1.5.2 and bug postmortem","text":"<p>This is an investigation story by Piotr.</p> <p>24 hours ago, Maneesha Sane noticed and informed on GitHub that one of the tags in AMY is missing.</p> <p>This observation led to an investigation on the servers and eventually to fix for a critical bug that caused the data loss.</p> <p>But before we jump into sysadmin work\u2026</p>"},{"location":"releases/v1.5.2/#what-is-a-tag-in-amy-terms","title":"What is a \"tag\" in AMY terms?","text":"<p>A tag is label that we give to various workshops. For example, all Software Carpentry workshops will have <code>SWC</code> tag, and all Data Carpentry workshops will have <code>DC</code> tag.</p> <p>There are more labels we use, and the one that went missing was <code>DC</code>.</p> <p>One event can have between zero and all the tags we have in the system, which means it's a many-to-many relationship between events and tags. This type of relationship requires additional intermediate table in the database.</p> <p>Contents from that table were missing because they were removed with removal of the <code>DC</code> tag.</p>"},{"location":"releases/v1.5.2/#investigation","title":"Investigation","text":"<p>I started the investigation by narrowing timespan where the event, that led to data loss, occurred.</p> <p>Then I followed by reading WWW server access logs to find out what happened in that timespan in hope I could find the bug.</p> <p>After narrowing list of suspects, I was able to reproduce the bug.</p> <p>Finally I retrieved the lost data from the most recent backup that still had it.</p>"},{"location":"releases/v1.5.2/#ways-to-remove-tags-from-amy","title":"Ways to remove tags from AMY","text":"<p>There's no interface for removing tags other than Django's auto-generated admin interface; only a couple of people have access to it.</p> <p>So the data loss was either human error or it was caused by code bug. This conclusion helped me define what I should be looking for in the WWW server log.</p>"},{"location":"releases/v1.5.2/#narrowing-event-occurence-timespan","title":"Narrowing event occurence timespan","text":"<p>AMY's being backed-up by multiple systems; I logged into each of them and run multiple SQL queries on different databases to find out which backup had the <code>DC</code> tag and was the newest.</p> <p>It turned out that backup from 2016-04-06 17:00 UTC-4 was the most recent still with the <code>DC</code> tag.</p> <p>In the meantime I was fighting timezone correction\u2026 Our backup systems are in different datacenters and were running on different timezones.</p>"},{"location":"releases/v1.5.2/#reading-access-log","title":"Reading access log","text":"<p>First thing I checked in the access log is if anyone was using the admin panel to remove the tag. Unfortunately this possibility was quickly ruled out; so the loss was caused by code bug.</p> <p>However, after reading the log no action stood out.</p> <p>Short, important side story: Software Carpentry website rebuilds every 30 minutes. Each rebuild is shown in the log by multiple requests to AMY's API:</p> <p>{% highlight nginx %} [\u2026] GET /api/v1/export/badges.yaml =&gt; generated 69122 bytes [\u2026] [\u2026] GET /api/v1/export/instructors.yaml =&gt; generated 50488 bytes [\u2026] [\u2026] GET /api/v1/events/published.yaml?tag=SWC =&gt; generated 231344 bytes [\u2026] [\u2026] GET /api/v1/events/published.yaml?tag=DC =&gt; generated 17806 bytes [\u2026] [\u2026] GET /api/v1/events/published.yaml?tag=TTT =&gt; generated 7879 bytes [\u2026] {% endhighlight %}</p> <p>Website grabs published events tagged by <code>SWC</code>, <code>DC</code> and <code>TTT</code> tags. This sequence of requests repeats every 30 minutes.</p> <p>After reading the log over and over I noticed that two consecutive calls to <code>/api/v1/events/published.yaml?tag=DC</code> yielded results of very different response lengths:</p> <p>{% highlight nginx %} [\u2026] [Wed Apr  6 15:01:11 2016] GET /api/v1/events/published.yaml?tag=DC =&gt; generated 17806 bytes [\u2026] [... many more requests ...] [\u2026] [Wed Apr  6 15:30:10 2016] GET /api/v1/events/published.yaml?tag=DC =&gt; generated 261521 bytes [\u2026] {% endhighlight %}</p> <p>Apparently then the DC tag disappeared, the API started returning all the published events, no matter if they were tagged <code>SWC</code> or something else.</p> <p>This was a clear indication that the <code>DC</code> tag disappeared between 15:01 and 15:30.</p> <p>That timespan doesn't look like 17:00. Timezones... programmer's nightmare.</p>"},{"location":"releases/v1.5.2/#suspects","title":"Suspects","text":"<p>There was some user activity in this 30-minutes long window and one thing caught my eye:</p> <p>{% highlight nginx %} [\u2026] POST /workshops/events/merge?event_a_0=2016-05-06-RDAP16-Atlanta&amp;event_b_0=2016-05-06-asist [\u2026] {% endhighlight %}</p> <p>(The actual URL was slightly changed to remove unnecessary information.)</p> <p>This was a call to event merge functionality: someone wanted to merge workshops <code>2016-05-06-RDAP16-Atlanta</code> and <code>2016-05-06-asist</code>.</p> <p>{:.message} Short side note: merge functionality allows user to use more advanced strategy for merge; one can select which properties (or fields) in the final event should be used from event A (<code>2016-05-06-RDAP16-Atlanta</code> in our example) and which should be from event B (<code>2016-05-06-asist</code>). Additionally in case of event's tags it's possible to combine them from both base events.</p> <p>I started testing different strategies. I had a feeling that the bug had something to do with strategy for event tags. :)</p> <p>Finally I reproduced the bug by using following strategy:</p> <ul> <li>base event: <code>2016-05-06-RDAP16-Atlanta</code> (event A)</li> <li>tags: from event B.</li> </ul>"},{"location":"releases/v1.5.2/#data-retrieval","title":"Data retrieval","text":"<p>At that point I decided to retrieve the lost data using SQL import/export functionality from the optimal (newest &amp; containing the lost data) backup found earlier.</p>"},{"location":"releases/v1.5.2/#bug","title":"Bug","text":"<p>The only code used in event merge functionality that would trigger accidental removal is:</p> <p>{% highlight python %}             if value == 'obj_a' and manager != related_a:                 manager.all().delete()                 manager.add(*list(related_a.all()))</p> <pre><code>        elif value == 'obj_b' and manager != related_b:\n            manager.all().delete()\n            manager.add(*list(related_b.all()))\n</code></pre> <p>{% endhighlight %}</p> <p>This code is used for substituting related objects (tags in our case). It works like this:</p> <p>if some field's strategy is to switch to objects from the other event, then remove all currently assigned objects and add objects from the other event's field.</p> <p>Translated into tags:</p> <p>if user wants to use event <code>2016-05-06-RDAP16-Atlanta</code> as base event, but keep tags from the other event (<code>2016-05-06-asist</code>) then remove current tags from base event and add tags from the other event.</p> <p>See what's going on here? Base event's tags were removed instead of being unassigned.</p>"},{"location":"releases/v1.5.2/#django-related-manager-and-assignments","title":"Django: related manager and assignments","text":"<p>In this section I'm going to talk about how relations work and if they can be unassigned instead of being removed.</p> <p>For many-to-many relationships (e.g. multiple events can be assigned multiple tags) Django creates an intermediate table that stores assignments. In this case, unassigning event from tag is as simple as removing that stored assignment from the intermediate table.</p> <p>For one-to-many relationships (e.g. multiple events can have the same organizer) there's no need for additional table; storing the organizer looks like <code>event.organizer = SomeOrganizer</code>.</p> <p>In case of the one-to-many relationships we can unassign the event from <code>SomeOrganizer</code> if and only if <code>event.organizer</code> field can store <code>NULL</code> value. If it cannot, then we have to remove the event.</p> <p>So the bug existed because the case of unassignment was not taken into account \u2013 only removal of related objects was accounted for.</p>"},{"location":"releases/v1.5.2/#fix-need-to-find-out-when-we-can-unassign","title":"Fix: need to find out when we can unassign","text":"<p>Long story short: in Django only related manager with <code>.clear</code> method can unassign; if this method is not present then the only option is removal.</p> <p>So fixed code looks like this (minus the comments):</p> <p>{% highlight python %}             if value == 'obj_a' and manager != related_a:                 if hasattr(manager, 'clear'):                     manager.clear()                 else:                     manager.all().delete()                 manager.set(list(related_a.all()))</p> <pre><code>        elif value == 'obj_b' and manager != related_b:\n            if hasattr(manager, 'clear'):\n                manager.clear()\n            else:\n                manager.all().delete()\n            manager.set(list(related_b.all()))\n</code></pre> <p>{% endhighlight %}</p> <p>(Yes, it probably should use <code>try - except</code> block instead of <code>hasattr</code>; pull request's welcome!)</p>"},{"location":"releases/v1.5.2/#final-words","title":"Final words","text":"<p>All in all, I feel good about this bug; if anything, I'd like eliminate the errorneous timezone arithmetics.</p> <p>Also all backup mechanics and logging worked really nice.</p> <p>As a result of investigation described above, the bug and the solution to it last night I released AMY v1.5.2.</p>"},{"location":"releases/v1.5.3/","title":"AMY release v1.5.3","text":"<p>A minor version v1.5.3 of AMY was released.</p>"},{"location":"releases/v1.5.3/#new-features","title":"New features","text":"<p>Now it's easier to add person to the database if they already submitted a profile update request.</p> <p>This is specifically useful for admins if they want to add one person and can contact them to get more details (like affiliation or airport).</p>"},{"location":"releases/v1.5.3/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Aditya fixed Django template tags autoescaping on the revision   page (ie. each page the changes log links to)</li> <li>Aditya again fixed \"Update from URL\" functionality that didn't   update event's URL in specific conditions.</li> </ul> <p>Thanks a lot, Aditya!</p>"},{"location":"releases/v1.5.4/","title":"AMY release v1.5.4","text":"<p>Yesterday AMY v1.5.4 was released with a bunch of interesting changes.</p>"},{"location":"releases/v1.5.4/#new-features","title":"New features","text":"<ul> <li>AMY is now capable of going through all active workshops and checking if   their metadata (slug, start/end date, instructors and helpers) had changed.   If so, a notification would be shown to the person associated with the event.</li> <li>Aditya improved history log by enabling it to show related   objects' real names instead of IDs.</li> <li>Greg added a button to mail everyone involved in a workshop</li> <li>as part of his GSoC 2016 project, Chris added the trainings   dashboard in its first shape</li> <li>Chris in collab with Greg added SWC/DC instructor   badge indicators to: all persons, event details, and \"find instructors\" views</li> <li>Piotr upgraded the \"Find instructors\" view to enable admins to search   for not only instructors, but also in-progress instructor trainees and people   who once had been associated with the workshop organization. Therefore the   new name for \"Finding instructors\" is now \"Find Workshop Staff\".</li> </ul>"},{"location":"releases/v1.5.4/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Aditya fixed permissions issue when accessing event details page   by people without permission to add ToDo items.</li> <li>Piotr fixed a small error preventing DataCarpentry logo from showing up on DC   workshop request page.</li> <li>Piotr fixed a small error doubling people with both superuser and <code>admin</code> group   permissions in the admin lookup backend.</li> <li>Even smaller error was pointing admins to use wrong URL in import event   template.  It is now fixed.</li> <li>Chris fixed the former \"debriefing\" view (now   \"instructors by date\") errors concerning emails generation when some people's   emails were unavailable.</li> <li>Chris fixed probably the oldest unnoticed issue ever: wrong link   generated for airport's IATA code.</li> <li>Chris fixed missing template from one of the new   features for this release.</li> </ul>"},{"location":"releases/v1.6.0/","title":"AMY release v1.6.0","text":"<p>After about 12 days of delay and 7 days of postponing, we finally closed and released AMY v1.6.0. It packs a whole lot of changes and bugfixes!</p>"},{"location":"releases/v1.6.0/#new-features","title":"New features","text":"<ul> <li>Piotr implemented a Data-Carpentry form for submitting requests for running   self-organized workshops.</li> <li>Piotr added a histogram into frequency of instructors teaching report page.</li> <li>Aditya added \"Contact all\" button on the all persons page.</li> <li>Aditya continued W. Trevor King's work on the <code>Language</code>   model and now we can accurately track languages amongst multiple forms and   related models (e.g. events and persons).</li> <li>Aditya added a summary of tasks per role on person's details   page.</li> <li>Chris added an application form for individuals wanting to become   instructors.</li> <li>Piotr added <code>Language</code> support in additional forms (original PR was missing   language support in some forms).</li> <li>Big: Chris worked hard to bring GitHub authentication into   AMY (with success!).  There are some caveats, but we'll smoothen them out for   the next release. This work included opening AMY to other users (a move we   were afraid of), and tests for each and every test to ensure we got the   permissions right.</li> <li>In the same PR, Chris added an <code>AutoUpdateProfileForm</code> used by   users (who can log in from GitHub) to self-populate their profiles.</li> <li>Aditya defined sorting of tasks on the person's details page.</li> </ul>"},{"location":"releases/v1.6.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Piotr fixed a bug that caused <code>IntegrityError</code> when people with similar tasks   (task has a <code>role</code>, <code>person</code>, and an <code>event</code>; tasks for these people were the   same except <code>person</code> was different) were being merged.  <code>IntegrityError</code>   means that a uniqueness constraint was violated (ie. after the merge there   were two <code>Task(role, personA, event)</code>, which is prohibited).</li> <li>Chris fixed interpolation on some of our charts that looked like   the data was swinging, while in reality it wasn't.</li> <li>Aditya fixed default field values on the   \"All activities over time\" page; now the fields have meaningful default   values and the datetime inputs have a proper calendar widget.</li> <li>Aditya reworked teaching frequency report to eliminate bug that   duplicated numbers for people simultaneously marked as SWC and DC   instructors.</li> <li>Piotr fixed some corner cases in event validation (behavior for required or   optional tags/metadata (see below)).</li> <li>Piotr fixed a bug resulting in <code>500 Server error</code> when accessing weblink to   a non-existing <code>Host</code>.</li> <li>Chris added one small migrations missing from the codebase.</li> <li>Greg fixed a bug in API that prevented <code>list</code> from working on the   generator objects for some renderers (<code>CSV</code> and <code>Yaml</code>).</li> <li>Prerit Garg fixed a specific bug preventing saving a permissions form   when person's email field is empty.</li> <li>Chris fixed a <code>TrainingRequest</code> form that display additional   fields (that weren't supposed to appear).</li> </ul>"},{"location":"releases/v1.6.0/#other","title":"Other","text":"<ul> <li>Chris refactored \"tags\" to \"metadata\"; tags as key-value pairs   describing workshops' date, times, location, instructors and helpers. We   changed the naming to \"metadata\" to not confuse with <code>Tag</code> model.</li> <li>Chris sped up our tests by changing hashing algorithm to a slower   one, which -- surprisingly -- is one of suggested test speedup suggestions by   Django development team.</li> </ul>"},{"location":"releases/v1.6.1/","title":"AMY release v1.6.1","text":"<p>We're taking momentum! Two days after v1.6.0 release, we're releasing a minor bug-fix version v1.6.1 which is not as small as you might think.</p>"},{"location":"releases/v1.6.1/#new-features","title":"New features","text":"<ul> <li>Aditya changed the default value for <code>invoice status</code> field for   events to \"Not invoiced\" (it was: \"unknown\").</li> <li>Piotr added a link to the login form on the logout page.  In future, we're going   to redirect to the login page with a message,   but we're waiting for Django to release a feature that will allow us to do   this easily.</li> <li>Piotr restyled login page so that it's clearer that people can use user+password   OR GitHub account to log into AMY.</li> </ul>"},{"location":"releases/v1.6.1/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Chris provided tests that make sure we don't have bugs associated   with saving M2M-related objects in an <code>AutoProfileUpdateForm</code>.</li> <li>Piotr added a link to the profile view page in the top navigation bar.  This   links to a <code>trainee-dashboard</code> page if current user is not an admin, and to   a <code>person-details</code> page otherwise.</li> <li>Chris fixed indentation of lists when they're placed inside of   tables.</li> <li>Chris added clickable links in some help texts in the   training request form.</li> <li>Chris fixed wording in one field of the aforementioned form.</li> <li>Piotr added a missing migration (we commonly forget to add migrations when   there are small changes introduced).</li> </ul>"},{"location":"releases/v1.6.1/#other","title":"Other","text":"<ul> <li>Aditya changed some text fields in AMY's models so that they   cannot be equal to a <code>NULL</code> (or <code>None</code>) value.  Instead an empty string is   used for these fields' default values.  Some fields, especially ones with   a uniqueness constraint, had to be left as nullable.  In particular, this   makes the <code>Event.slug</code> a required field.</li> </ul>"},{"location":"releases/v1.6.2/","title":"AMY release v1.6.2","text":"<p>Whoa, another one?! Yesterday we released v1.6.1, today it's time for v1.6.2 with some very minor changes.</p>"},{"location":"releases/v1.6.2/#new-features","title":"New features","text":"<ul> <li>New fields in the training request form:<ul> <li><code>group name</code> will enable us to register groups for the training, without   (for now) the need for a new form</li> <li><code>comment</code> will be a place for any additional information; instead of it,   people would use <code>additional skills</code>.</li> </ul> </li> <li><code>Event.slug</code> received new help text containing a format description for   admins to use.  This field's validation was also changed so that it only   allows entries in this specific format (this is additional to other   validation done by Django, ie. only latin characters, digits, underscores and   hyphens allowed).</li> </ul>"},{"location":"releases/v1.6.2/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Migration <code>0088*</code>, which was supposed to generate fake slugs for events   without them, contained an error that we hit in the production, so Piotr fixed it   by adding random characters to the slugs if uniqueness constraint was about   to be violated.</li> </ul>"},{"location":"releases/v1.7.0/","title":"AMY release v1.7.0","text":"<p>After another two weeks of development and two weeks of delays, we're finally releasing AMY v1.7.0</p> <p>This release is especially interesting since:</p> <ol> <li>it includes mostly Aditya's and Chris' PRs</li> <li>it includes two big PRs containing the biggest part of Aditya's and Chris'    Summer projects.</li> </ol>"},{"location":"releases/v1.7.0/#new-features","title":"New features","text":"<ul> <li>Chris helped check for missing migrations in automated continuous   integration service Travis-CI</li> <li>Chris sped up Travis-CI checks of AMY's test suite by using   a cache directory</li> <li>Aditya as part of his   Summer work added titles and URLs to task   objects in AMY (useful feature for PyData conference integration)</li> <li>Aditya changed form for creating new events so that admins can   assign themselves to a new event while creating it</li> <li>Aditya added a <code>Sponsorship</code> model to AMY and integrated it with   AMY (we can now track sponsors for events)</li> <li>Aditya migrated <code>Host</code> to <code>Organization</code>: it fixed some naming   inconsistencies</li> <li>in v1.6 we dropped support for numerical event IDs to rely only on slugs   (e.g. <code>2016-08-13-Krakow</code> or <code>2017-01-xx-Boston</code>), now Aditya   cleaned some remains left in the code from before dropping the support</li> <li>Piotr added support for <code>cancelled</code> tag used to mark events supposed to happen   but not happening eventually</li> <li>Chris added instructor training workflow, ie. huge part of AMY   used for instructor training</li> <li>Aditya added a feature for importing people, events, tasks from   PyData conference site in a comfortable way</li> </ul>"},{"location":"releases/v1.7.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Chris tracked and fixed an error in part of AMY responsible for   allowing users to log in with other credentials than user/password   (currently: GitHub login)</li> <li>Piotr fixed an API error occuring in some views (endpoints) when using CSV or   YAML return format</li> <li>Chris added access to AMY for people in invoicing group</li> <li>Chris replaced entity <code>&amp;mdash;</code> with actual char <code>\u2014</code></li> <li>Aditya added a contact field on <code>Sponsorship</code> model</li> <li>Chris fixed issue with user social integration with GitHub   getting out of sync</li> <li>Piotr fixed JavaScript code responsible for generating dates (it was generating   e.g. <code>2016-8-3</code>, it's now generating <code>2016-08-03</code>)</li> </ul>"},{"location":"releases/v1.7.1/","title":"AMY bugfix release v1.7.1","text":"<p>This release contains mostly bug fixes for features we added in v1.7.0.</p>"},{"location":"releases/v1.7.1/#new-features","title":"New features","text":"<ul> <li>Chris added a command line tool for importing trainees progress   from previous data format into AMY</li> </ul>"},{"location":"releases/v1.7.1/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Chris removed an overlooked debugging message alert in one of the   views</li> <li>Aditya added a cancel button to almost all the forms in AMY</li> <li>Piotr added a message to \"Apply for Instructor Training\" page saying that people   cannot register for Fall 2016 open-access training anymore</li> <li>Aditya fixed \"Import from URL\" not working on workshop acceptance   page</li> <li>Chris fixed some validation issue in one of training-related   forms</li> <li>Chris added access to admin dashboard in AMY to trainers</li> </ul>"},{"location":"releases/v1.7.2/","title":"AMY bugfix release v1.7.2","text":"<p>AMY v1.7.2 was released today. It contains one bug fix provided by Aditya.</p> <p>Aditya fixed a bug throwing 500 HTTP error when accessing <code>/api/v1/todos/user/</code>.  This API endpoint is being accessed by the browser whenever any admin user loads their dashboard.</p>"},{"location":"releases/v1.8.0/","title":"AMY release v1.8.0","text":"<p>Major AMY v1.8.0 release was tagged. As you can see below, it was definitely focused on fixing bugs.</p>"},{"location":"releases/v1.8.0/#new-features","title":"New Features","text":"<ul> <li>Aditya provided a template change that displays link between closed   workshop request and corresponding event.</li> <li>Aditya hid survey-related fields on Event-related forms.</li> <li>Chris sped up (again :-) ) tests.</li> <li>Chris removed unnecessary help text for autocompletion fields.</li> <li>Aditya refactored delete views to use <code>DeleteViewContext</code>, essentially   making code more DRY and easy to change.</li> <li>Piotr added deleting entries from bulk-upload feature.</li> <li>Piotr updated DataCarpentry self-organized workshops   registration form.</li> </ul>"},{"location":"releases/v1.8.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Aditya changed uniqueness constraints on <code>Sponsorship</code> model to reflect   recent changes he made on that model.</li> <li>Aditya changed display of some <code>Membership</code> model fields.</li> <li>Aditya added missing CSRF tokens in PyData import page.</li> <li>Chris fixed a rare case of email address leakage (CC instead of BCC) in   event details page, instructors by date and in workshop staff finder.</li> <li>Aditya changed a uniqueness constraint on <code>Task</code> model + added some other   small improvements.</li> <li>Chris fixed non-working links and corrected ordering in all trainings   page.</li> <li>Aditya refactored internal URLs file to use nested URLs structure and   therefore made it a lot more readable.</li> <li>Chris made \"progress\" column in trainees view wider</li> <li>Aditya hid from import instances that were decided not to be imported</li> <li>Piotr fixed error message on faulty bulk-upload process.</li> <li>Piotr fixed a double-display of unpublished and published views in very specific   circumstances.</li> <li>Piotr stopped counting in unresponsive workshops in workshops issues page.</li> </ul>"},{"location":"releases/v1.9.0/","title":"AMY release v1.9.0","text":"<p>Major AMY v1.9.0 version was released after v1.8.1 bugfix version.</p> <p>Many thanks to Piotr who focused on code reviews.</p> <p>Below, there is a list of changes introduced in v1.9.0 and v1.8.1.</p>"},{"location":"releases/v1.9.0/#new-features","title":"New features","text":"<ul> <li>Chris added possibility to query historical data (reports) with parameters. </li> <li>Greg and Piotr made membership concept first-class objects.</li> <li>Piotr disabled invoicing.</li> <li>Webpage with list of organizations displays current partnership level now, thanks to Chris. What's more, it's possible to filter organizations by their current or past partnership level now.</li> <li>Piotr moved publicly accessible forms (like workshop submission or profile update request) to separate URL endpoint (<code>forms/*</code>).</li> <li>Current events list in admin dashboard displays SWC/DC/LC labels now, thanks to Chris.</li> <li>Chris introduced Django Debug Toolbar which makes development easier.</li> <li>Piotr extended current search capabilities to training applications.</li> <li>Chris improved training request workflow (see #1004, #1007, #1050) and instructor training workflow (see #976, #980, #981).</li> <li>Chris added instructions and clarified how to use bulk add person form.</li> <li>Greg added title to organization webpage.</li> <li>Piotr disabled workshops submission.</li> <li>Aditya altered choices in partner form.</li> <li>Piotr added privacy consent fields to multiple forms.</li> </ul>"},{"location":"releases/v1.9.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Chris added hyperlinks in report on all activity.</li> <li>Chris fixed a bug resulting in overestimation of number of trainees who became certified instructors. </li> <li>Aditya fixed a bug in organization bulk import.</li> <li>Chris enforced that contribution type (of membership) is required.</li> <li>Chris added a field for middle name to training request and instructor profile update forms.</li> <li>Chris added a field for notes in instructor profile update.</li> <li>Chris fixed a bug resulting in double counting of instructors counts.</li> <li>Chris fixed labels of invoice statuses.</li> <li>Aditya made it possible to import an event using GitHub repository URL in addition to GitHub Pages URL.</li> <li>Chris fixed a bug in filtering events by tags.</li> <li>Chris fixed not displayed report plots by migrating to a newer version of <code>d3</code> library.</li> <li>Aditya improved \"cancel\" buttons.</li> <li>Piotr fixed a bug resulting in server error while deleting an airport.</li> <li>Piotr updated outdated files on production.</li> <li>Piotr fixed a bug in event import functionality.</li> </ul>"},{"location":"releases/v1.9.1/","title":"AMY bugfix release v1.9.1","text":"<p>AMY v1.9.1, intended to fix a major bug in <code>/forms/request_training/</code>, incorporates a number of development-related changes that were scheduled for v1.10.0.</p>"},{"location":"releases/v1.9.1/#new-development-features","title":"New development features","text":"<ul> <li>Chris Improved formatting in <code>ReportsViewSet</code>.</li> <li>Aditya updated settings to work with local development (a change required   by Django bugfix).</li> <li>Aditya changed Travis-CI configuration to work correctly with PyData   installation; especially he managed to set up a test matrix for checking code   with PyData installed and without.</li> <li>Aditya refactored views so that a prepopulation of forms would be easier   to achieve for developers.</li> </ul>"},{"location":"releases/v1.9.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed a bug in training request form, which prevented users from   seeing a confirmation of their request.</li> </ul>"},{"location":"releases/v2.0.0/","title":"AMY release v2.0.0 - 2018-08-05","text":"<p>Major AMY v2.0.0 was released on 2018-08-05.</p> <p>The most noticeable feature of this release is a refreshed UI look. This was accomplished thanks to change in AMY internals - we switched JavaScript &amp; CSS dependencies from Bower (outdated) to Yarn.</p>"},{"location":"releases/v2.0.0/#new-features","title":"New features","text":"<ul> <li>Starting small, Piotr made improvements to   the admin dashboard and   the person details page.</li> <li>Piotr added validation   for assigning trainee with progress - now they   have to be a learner in a training task beforehand.</li> <li>Piotr enhanced some   models and forms with a new field \"Country\".</li> <li>Piotr added a view for   finding duplicate training requests, and a tool for merging them.</li> <li>Piotr switched   Code of Conduct to a similar one proposed by GitHub.</li> <li>Piotr made some invasive changes to the UI.   This is one huge PR and fixes some old issues (see more in linked PR), but   mostly it should be considered as a UI refresh.</li> <li>Piotr changed what data   is saved on person profile upon accepting that person's training request.</li> <li>Piotr changed how   membership data (due workshops) is counted.</li> </ul>"},{"location":"releases/v2.0.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr changed a lot of things around training requests. See   this PR and related issues:</li> <li>#1227, Download selected trainee applications</li> <li>#1284, Trainees with training event should be automatically accepted</li> <li>#1291, Include Matched Event when downloading Training Applications</li> <li>#1292, Fix explanatory text for Training Application Group Name.</li> <li>Piotr fixed a bug   preventing all eligible trainees for instructor badges to show up in the   results.</li> <li>Piotr provided some fixes   for bulk-upload (see more details in linked PR).</li> </ul>"},{"location":"releases/v2.1.0/","title":"AMY release v2.1.0 - 2018-09-28","text":"<p>Major AMY v2.1.0 was released on 2018-09-28.</p> <p>Most notable features of this release are instructor training seats mechanism and training applicants scoring mechanism. More on them in \"New features\" below.</p>"},{"location":"releases/v2.1.0/#new-features","title":"New features","text":"<ul> <li>Piotr upgraded Django to v2.1 and included some other deployment-related   features: \"AMY_\" prefix for all env vars, moved includable templates to   a separate directory, removed logout page (instead we get redirected to login   page with a message), and sped-up All Events page.</li> <li>Piotr brought back sticky navigation bar - it was removed in v2.0.</li> <li>Piotr added ORCID to <code>PersonSerialized</code> in API.</li> <li>Big: Piotr extended Memberships to include training seats mechanism; it   helps admins keep track of and control people assigned to Instructor Training   events out of their organization Membership.</li> <li>Big: Piotr added Training Requests (semi-automated) scoring mechanism,   for admins' convenience.</li> </ul>"},{"location":"releases/v2.1.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Jonah fixed Google Maps API (it wasn't showing maps properly).</li> <li>Piotr removed old residues of Bower that somehow survived v2.0.0   release.</li> <li>Piotr fixed missing pagination and not working correctly filters on   workshop requests page.</li> <li>Piotr made a bunch of fixes and improvements to the Instructors by date   report page (speed-ups, visual improvements, colorization etc.).</li> <li>Big: Piotr adjusted <code>EventRequest</code>, <code>EventSubmission</code> and   <code>DCSelfOrganizedEventRequest</code> so that they have the same features:</li> <li>the same states (pending, accepted, discarded)</li> <li>the same actions (accept &amp; create new event, change state to accepted,     discard, edit).</li> <li>Piotr hunted and fixed JavaScript loading error in #1334.</li> <li>Piotr unified some forms buttons (they were displaying \"Cancel\" button).</li> </ul>"},{"location":"releases/v2.1.1/","title":"AMY minor release v2.1.1 - 2018-10-06","text":"<p>Minor AMY release v2.1.1 was issued on 2018-10-06.</p> <p>It includes various small fixes to either bugs in API, or missed features from v2.1.0 big labels (instructor training seats in Memberships).</p>"},{"location":"releases/v2.1.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Kunal fixed settings, so that AMY in debug mode now accepts connections   from <code>localhost</code> too.</li> <li>Piotr added default ordering on languages.</li> <li>Piotr added missing \"Open training seat\" to bulk-match form on   All Training Requests page.</li> <li>Piotr fixed filtering on Events API endpoint (it was throwing 500 Server   Error).</li> </ul>"},{"location":"releases/v2.1.1/#new-features","title":"New features","text":"<ul> <li>Piotr added <code>country</code> field to Persons API endpoint, and enhanced the   filter so that it's possible to filter by the country.</li> <li>Piotr added <code>country</code> field to Events API endpoint filter, and replaced   old filtering in Published Events API endpoint with that from Events API   endpoint.</li> </ul>"},{"location":"releases/v2.10.0/","title":"AMY release v2.10.0 - 2020-01-12","text":"<p>Major AMY release v2.10.0.</p>"},{"location":"releases/v2.10.0/#new-features","title":"New features","text":"<ul> <li>Piotr added more badges to badge column on all persons / event details /   workshop staff pages - #1594</li> <li>maneesha added notes about changing email or GH identificator - #1588</li> <li>Piotr extended Gender choices in multiple forms and models - #1597</li> <li>Piotr added a secondary email field to multiple forms and models - #1599</li> <li>maneesha updated Code of Conduct - #1601</li> <li>Piotr added a priority field to <code>Tag</code> model - #1603</li> <li>Piotr extended Training Request confirmation email with a copy of applicant's form - #1606</li> </ul>"},{"location":"releases/v2.10.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr updated important dependency to a newer version: Django v2.2.9 - #1592</li> <li>maneesha updated readme with instructions for creating cache tables - #1590</li> <li>maneesha fixed wrong Etherpad link for signing up for demo sessions - #1585</li> <li>Piotr reworked login page to be more responsive on smaller screens - #1595</li> <li>Piotr fixed Django-Compressor, a dependency for performance of CSS / JS file serving, poor performance due to cache changes - #1600</li> <li>Piotr fixed wrong display and saving of values in \"Additional contact\" widget - #1596</li> <li>Piotr fixed wrong permission name for <code>WorkshopInquiryAssign</code> view - #1602</li> <li>Piotr fixed searching for LC instructors on All Trainees page, fixed   eligibility conditions for all badges, and slightly changed behavior due to   now 3 separate instructor badges being used - #1593</li> <li>Piotr updated some dependencies due to some deprecation warnings - #1604</li> </ul>"},{"location":"releases/v2.11.0/","title":"AMY release v2.11.0 - 2020-02-24","text":"<p>Major AMY release v2.11.0.</p>"},{"location":"releases/v2.11.0/#new-features","title":"New features","text":"<ul> <li>Piotr restricted choices to \"administrator\" field - #1613</li> <li>Piotr added an automation email project, part 1 - #1616</li> </ul>"},{"location":"releases/v2.11.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>maneesha added a text informing users to submit missing self-organised   workshops from their trainee dashboard - #1611</li> <li>Later, Piotr updated this text according to Talisha's comment - #1621</li> <li>Piotr fixed autoresponder context in Training Request form messages for requesters - #1619</li> <li>Piotr fixed empty manual attendance bug - #1622</li> </ul>"},{"location":"releases/v2.11.1/","title":"AMY release v2.11.1 - 2020-02-24","text":"<p>A hotfix AMY release v2.11.1.</p>"},{"location":"releases/v2.11.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed wrong timestamps for Email Automation actions.   They were set up with short values for testing purposes.</li> </ul>"},{"location":"releases/v2.12.0/","title":"AMY release v2.12.0 - 2020-05-02","text":"<p>Major AMY release v2.12.0.</p>"},{"location":"releases/v2.12.0/#new-features","title":"New features","text":"<ul> <li>Piotr extended matching Training Request with person to secondary email - #1629</li> <li>Piotr added <code>instructors</code> as <code>PostWorkshopAction</code> context (similarly to <code>helpers</code>) - #1634</li> <li>Piotr added <code>reports_link</code> as <code>PostWorkshopAction</code> context - #1637</li> <li>maneesha updated workshop URL help text on self-organised submission form - #1638</li> <li>Piotr added <code>PostWorkshopAction</code> to \"accept &amp; create new event\" views (3) for Workshop Requests, Workshop Inquiries, and Self-organised Submissions respectively. Additionally, the views were turned into Class-Based Views - #1633</li> <li>Piotr added a collection of upgrades to Email Automation (#1639):</li> <li>\"previous\", \"next\" buttons on Preview page</li> <li>RQJob (when created) saves in DB related event's slug and list of related emails</li> <li>RQ Worker (3rd party software) logs were enabled</li> <li>additional log messages added for Django Admin actions regarding RQJobs (like cancel, preview, reschedule, send now, or retry)</li> <li>configuration for Black was added, and some files were formatted with it</li> <li>\"View queue\" button was moved from Email Templates to RQJobs (more suitable)</li> <li>Jobs (from RQ library) now update RQJobs (from AMY) status when their (Jobs from RQ library) status changes.</li> <li>Piotr updated handling of <code>contact</code> <code>&lt;meta&gt;</code> tag to support multiple values - also in <code>Event</code> models - #1642 - as part of this PR some bug were fixed, too</li> <li>Piotr added updating template functionality to existing RQJobs. Existing admin endpoints started requiring POST. Some styling was improved, too - #1645</li> <li>Piotr added <code>tags</code> to all actions' context - #1649</li> </ul>"},{"location":"releases/v2.12.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed an error caused by non-transactional database operation when matching Training Request with existing Person - #1627</li> <li>Piotr solved internal error with Redis container not having permissions to write to <code>/data</code> - #1628</li> <li>maneesha clarified text for self-organised submission form, so that it doesn't sound like only a certified instructor or member site could submit the form - #1630</li> <li>Piotr fixed Instructors Over Time report - #1632</li> <li>Piotr changed the way <code>&lt;meta&gt;</code> workshop tags are handled by AMY - now <code>slug</code> meta tag is ignored. #1631</li> <li>Piotr updated <code>social-auth-core</code> dependency to sustain GitHub log-in functionality - #1636</li> <li>Piotr fixed lack of redirection to page specified by <code>?next=</code> param in URL after successful GitHub login - #1643</li> <li>Piotr fixed HTML errors on Event edit page (#1642 - as part of this PR some new features were introduced, too):</li> <li>multiple comment fields</li> <li>Task and Sponsorship forms had multiple <code>&lt;form&gt;</code> tags around them</li> <li>some fields in Task and Sponsorship forms had the same IDs, so both forms were prefixed</li> </ul>"},{"location":"releases/v2.12.1/","title":"AMY release v2.11.2 - 2020-05-10","text":"<p>A hotfix AMY release v2.12.1.</p>"},{"location":"releases/v2.12.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed Select2 tag widget error when using on empty Event Form - #1652</li> <li>Piotr fixed missing prefixes from Task and Award forms (multiple places) - #1660</li> <li>Piotr run linting and Black formatting on some files - #1661</li> </ul>"},{"location":"releases/v2.12.1/#features","title":"Features","text":"<ul> <li>Fran\u00e7ois updated and extended confirmation emails sent after each of forms   (Workshop Request, Inquiry, and Self-Organised Submission) is submitted - #1658</li> </ul>"},{"location":"releases/v2.13.0/","title":"AMY release v2.13.0 - 2020-06-21","text":"<p>Major AMY release v2.13.0.</p>"},{"location":"releases/v2.13.0/#new-features","title":"New features","text":"<ul> <li>maneesha extended local development instructions with description of how to run Docker and Redis locally - #1662</li> <li>Both maneesha and Piotr worked on getting Administrator field required: maneesha provided the changeset, Piotr helped with test cases - #1663</li> <li>Piotr extended search criteria to cover person's secondary email - #1671</li> <li>Piotr implemented a new email trigger: Instructors and Host Introduction - #1670</li> <li>Piotr implemented a new email trigger: Confirming Supporting Instructor - #1674</li> <li>maneesha and Piotr removed <code>git_version.py</code> file - #1665</li> <li>Piotr hid \"Lessons Covered\" from SOS mix&amp;match accept &amp; create a new event form - #1675</li> </ul>"},{"location":"releases/v2.13.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed required permission name for setting state of Workshop Inquiries and Self-Organised Submissions - #1667</li> <li>Piotr reverted the removed \"Comment\" box from Event Update view - #1672</li> </ul>"},{"location":"releases/v2.13.1/","title":"AMY release v2.13.1 - 2020-08-10","text":"<p>Minor AMY release v2.13.1.</p>"},{"location":"releases/v2.13.1/#new-features","title":"New features","text":"<ul> <li>maneesha make numerous adjustments to workshop request forms field naming - #1676</li> <li>Piotr extended Introduction email to work for 2 or more supporting instructors if the event is online - #1677</li> <li>Piotr added a new <code>instructor_availability</code> field for Workshop Request and Inquiry forms - #1691</li> <li>Piotr added Supporting Instructors to the Post Workshop action - #1692</li> </ul>"},{"location":"releases/v2.13.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr decreased the number of required supporting instructors down to 1 for online events - #1685</li> <li>Piotr fixed bug related to empty emails not accepted by the MailGun - #1684</li> <li>Piotr changed the <code>Person.family</code> name field to be non-nullable, which should solve 500 error messages when creating a person without family name - #1688</li> <li>Piotr fixed 2 bugs in one PR: cancel RQJob bug (500 error) and occasional two emails scheduled for Introduction action - #1694</li> <li>Piotr finally brought back some missed test case from #1684  - #1695</li> </ul>"},{"location":"releases/v2.13.2/","title":"AMY release v2.13.2 - 2020-08-16","text":"<p>Minor AMY release v2.13.2.</p>"},{"location":"releases/v2.13.2/#new-features","title":"New features","text":"<ul> <li>Fran\u00e7ois enabled Travis-CI in checks - #1696</li> <li>Piotr added additional contact addresses for use in the Post Workshop action - #1690</li> <li>maneesha enhanced description of the <code>number_attendees</code> field for Workshop request &amp; inquiry - #1673</li> </ul>"},{"location":"releases/v2.13.2/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed a bug concerning empty email addresses in the scheduled emails - #1698</li> <li>Piotr extended Post Workshop action to work also for \"Circuits\" workshops - #1689</li> </ul>"},{"location":"releases/v2.14.0/","title":"AMY release v2.14.0 - 2020-09-06","text":"<p>Major AMY release v2.14.0. This release was driven by the two email actions that were implemented in August: ask for website and reminder to recruit helpers.</p>"},{"location":"releases/v2.14.0/#new-features","title":"New features","text":"<ul> <li>Piotr implemented Ask For Website email action - #1701</li> <li>Piotr also implemented Reminder To Recruit Helpers email action - #1703</li> <li>maneesha extended memberships with registration code - #1706</li> <li>maneesha added \"Online or in-person?\" question to all three workshop forms   (workshop request, inquiry, and self-organized submission), and Piotr helped with   the tests - #1704</li> <li>Piotr extended and adjusted reports of membership workshops - #1708</li> </ul>"},{"location":"releases/v2.14.1/","title":"AMY release v2.14.1 - 2020-10-18","text":"<p>Minor AMY release v2.14.1.</p>"},{"location":"releases/v2.14.1/#new-features","title":"New features","text":"<ul> <li>maneesha extended calculation of person's appearance as Supporting Instructor in person's profile - #1721</li> <li>Piotr added a new <code>Event.public_status</code> field for denoting if event is public or private - #1726</li> </ul>"},{"location":"releases/v2.14.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed logic for AskForWebsite and RecruitHelpers email actions - #1725</li> </ul>"},{"location":"releases/v2.15.0/","title":"AMY release v2.15.0 - 2020-12-06","text":"<p>Major AMY release v2.15.0. This release contains some big changes, like \"Acknowledge Workshop Request review\" manually-triggered emails and documentation generated and hosted at project's GitHub page. The new feature for preselecting options on \"Accept &amp; create a new event\" forms should be useful, too.</p> <p>Many thanks to our contributors, Kunal and Stephan, for fixing the accordion bug, fixing typos and improving our documentation! See below for more details.</p>"},{"location":"releases/v2.15.0/#new-features","title":"New features","text":"<ul> <li>Piotr added \"Acknowledge Workshop Request review\" manual emails feature - #1712</li> <li>Stephan added documentation generation commands, and improved the documentation accessibility - #1739</li> <li>Piotr added a new \"workshop listed on websites\" question to WRFs - #1741</li> <li>Piotr added 2 new fields to Self-Organised Submission form (start &amp; end dates) - #1742</li> <li>Piotr added a constraint for only allowing \"Learner\" role on open/member seat tasks - #1743</li> <li>Piotr added automatic selection of \"TTT open application\" when TTT tag is selected - #1744</li> <li>Piotr extended \"Accept &amp; create a new event\" form with some automatic preselections - #1746</li> <li>Piotr extended \"AskForWebsite\" email automation action with supporting instructors role - #1748</li> <li>maneesha changed heading on the dashboard to better reflect actual workflows - #1751</li> <li>maneesha added a membership agreement link - #1753</li> </ul>"},{"location":"releases/v2.15.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed issues reported by CodeQL quality-assurance tool - #1713</li> <li>Kunal fixed broken accordion component on training request form - #1733</li> <li>Piotr updated Python Pillow library dependency - #1728</li> <li>Kunal fixed typo in training request confirmation email - #1732</li> <li>maneesha fixed verbiage on workshop landing page and workshop request form - #1735</li> <li>maneesha changed position where \"is workshop public\" question is shown at, making it more prominent - #1737</li> </ul>"},{"location":"releases/v2.16.0/","title":"AMY release v2.16.0 - 2021-01-30","text":"<p>Major AMY release v2.16.0. This release contains long-time cooking change: migration to a new database server PostgreSQL. The server will improve AMY performance and work during high load.</p>"},{"location":"releases/v2.16.0/#new-features","title":"New features","text":"<ul> <li>Piotr migrated AMY to use new server PostgreSQL, and removed some unused code - #1750</li> <li>Piotr improved search by introducing membership search and some changes to search page UI - #1768</li> <li>Piotr extended some automated email templates with list of host roles in the workshop - #1770</li> <li>Piotr improved membership agreement dates: they're now required, default to 1 year long agreement, and show warnings if the time range changes - #1771</li> <li>Piotr changed the assignment widget to a much more versatile form with drop down selection - #1772</li> <li>maneesha updated wording on Training Request confirmation email - #1769</li> </ul>"},{"location":"releases/v2.16.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Fran\u00e7ois updated license with corrected name of The Carpentries - #1763</li> <li>Fran\u00e7ois updated default email address used by Carpentries team - #1766</li> </ul>"},{"location":"releases/v2.16.1/","title":"AMY release v2.16.1 - 2021-02-14","text":"<p>St. Valentine's AMY bugfix release v2.16.1.</p> <p>This release contains a small bugfix for duplicate results yielded by <code>AssignmentForm</code>. Security dependency package bump was also included, as well as some files cleanup and maintenance.</p>"},{"location":"releases/v2.16.1/#new-features","title":"New features","text":"<ul> <li>Piotr cleaned up some files, directories, and performed small maintenance on the   data stored in repository (e.g. list of authors) - #1783</li> </ul>"},{"location":"releases/v2.16.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>dependabot upgraded cryptography due to security issue in that package</li> <li>Piotr fixed assignment form issue - #1793</li> </ul>"},{"location":"releases/v2.2.0/","title":"AMY release v2.2.0 - 2018-11-01","text":"<p>Major AMY v2.2.0 was released on 2018-11-01.</p> <p>Most notable feature of this release if the new unified workshop request form.</p>"},{"location":"releases/v2.2.0/#new-features","title":"New features","text":"<ul> <li>Piotr upgraded Python and front-end dependencies, and later discovered   that one Python dependency degraded, so it was reverted.</li> <li>Piotr disabled profile upgrade requests - from now on people are forced   to use their AMY account to upgrade.</li> <li>Piotr added bulk upload of manual scores for training applications.</li> <li>Piotr added multiple refinements to the all training requests page:</li> <li>display of <code>group</code> and <code>affiliation</code> columns,</li> <li>contact email changed to the one provided if no person is matching given     record, or to the one from matched person otherwise.</li> <li>Big: Piotr removed TODOs from AMY.</li> <li>Big: Piotr implemented a new unified workshop form, replacing three   now-deprecated models/forms: EventRequest, EventSubmission,   DCSelfOrganizedEventRequest. The mechanics of this new form (changing state,   accepting and creating an event, editing) are taken from the deprecated   forms.</li> <li>Piotr, as part of new unified form, added curriculum identificators to   the form and to event objects.</li> <li>Piotr added revision history tree to object history view, so that it's   possible to browse through various change revisions and compare them.</li> <li>Piotr implemented a new admin notification emails propagation - emails   are sent to various addresses depending on the country of the request object.</li> </ul>"},{"location":"releases/v2.2.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed bugs in Memberships filter.</li> <li>Piotr fixed instructor badges display bug.</li> <li>Kunal fixed outdated README.</li> <li>Piotr brought back removed code from Bootstrap3-&gt;4 migration, which was   used to display form buttons on top of the forms (as addition to only bottom   of the form).</li> <li>Piotr added missing instructor training seat details on the Organization   details page.</li> </ul>"},{"location":"releases/v2.2.1/","title":"AMY minor release v2.2.1 - 2018-10-06","text":"<p>Minor AMY release v2.2.1 was issued on 2018-10-06.</p> <p>It includes various small fixes to either bugs in API, or missed features from v2.1.0 big labels (instructor training seats in Memberships).</p>"},{"location":"releases/v2.2.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed duplicate results in <code>PersonViewSet</code> API list endpoint.</li> </ul>"},{"location":"releases/v2.2.1/#new-features","title":"New features","text":"<ul> <li>Tracy extended text for <code>requested_workshop_types</code> field in   <code>WorkshopRequest</code> model to include Library Carpentry.</li> </ul>"},{"location":"releases/v2.3.0/","title":"AMY release v2.3.0 - 2018-12-13","text":"<p>Major AMY v2.3.0 was released, with a delay, on 2018-12-13.</p> <p>The biggest highlight of this release is definitely not very visible to end-users: code reorganization into applications (modules). Current AMY internal modules structure is described in models in applications document.</p> <p>Changes made to workshop request form are also noticeable.</p>"},{"location":"releases/v2.3.0/#new-features","title":"New features","text":"<ul> <li>Piotr reorganized code into smaller and more themed modules (e.g. forms   accessible to unauthorized users are in <code>extforms</code>, user requests are in   <code>extrequests</code>, fiscal stuff is in <code>fiscal</code>, etc.).</li> <li>Piotr added a small warning for trainings that fall out of agreement   dates.</li> <li>Piotr updated <code>Person</code> model with a lesson publication consent field; the   field is editable from person edit form (by admins), from self-update form   (by users themselves), and is exposed to authorized users via API.</li> <li>Piotr added new <code>Tag</code>s: ITT, LSO and LMO, and also changed display of   tags in AMY (now they offer a tooltip with long name).</li> <li>Piotr removed <code>Event.admin_fee</code> and <code>Event.invoice_status</code> from display   in various places.</li> <li>Piotr started working on deployment automation, which resulted in   expanded test suite coverage (now for Python 3.6 and 3.7-dev!), and two   additional settings read from envvars.</li> <li>finally, Piotr fixed and improved multiple issues reported for workshop   request form.</li> </ul>"},{"location":"releases/v2.3.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Drew added missing Library Carpentry links that should be available on   form confirmation page.</li> <li>Piotr fixed bulk upload server error.</li> <li>Piotr fixed some corner-case migration file reading default encoding for   non-UTF-8 operating systems.</li> </ul>"},{"location":"releases/v2.4.0/","title":"AMY release v2.4.0 - 2019-01-02","text":"<p>Major AMY v2.4.0 was released on 2019-01-02.</p> <p>This release is sporting a new commenting system that replaces old \"notes\" fields on Events, Persons, Organizations, Memberships, Training Requests and Workshop Requests. The summary of other changes is available below.</p>"},{"location":"releases/v2.4.0/#new-features","title":"New features","text":"<ul> <li>Piotr enabled resizing for permission box on Person Edit Permissions   page.</li> <li>Piotr changed filtering logic in Find Workshop Staff - now instead of   conjoining badges (<code>badge1 AND badge2 AND badge3</code>), we're summing them   (<code>badge1 OR badge2 OR badge3</code>).</li> <li>Piotr added the Library Carpentry tag</li> <li>Piotr extended \"Instructors num taught\" by splitting the summary per   each tag (SWC, DC, LC, TTT), and adding <code>country</code> field.</li> <li>Piotr added commenting system, based on former Django Contrib   application <code>django-comments</code>.   Also the comments support Markdown now.</li> <li>Piotr extended \"Find Workshop Staff\" with CSV download (which required   a bit of internal changes).</li> <li>Piotr extended \"Workshops/Learners/Instructors over time\" with   additional filters.</li> </ul>"},{"location":"releases/v2.4.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr added redirects from old URLs (pre-v2.3.0), to new (v2.3.0+) ones.</li> </ul>"},{"location":"releases/v2.4.1/","title":"AMY minor release v2.4.1 - 2019-01-20","text":"<p>Minor AMY release v2.4.1 was issued on 2019-01-20.</p> <p>It includes fixes related to removal of \"Notes\" fields from various objects, and changes to the deployment documentation or Travis continuous integration testing.</p>"},{"location":"releases/v2.4.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr removed \"Comment\" column from Workshop Request list page, because   related field was already gone due to introduction of commenting system in   v2.4.0.</li> <li>Piotr fixed error related to adding comments when new memberships are   created - it was supposed to add comments when they are edited.</li> </ul>"},{"location":"releases/v2.4.1/#new-features","title":"New features","text":"<ul> <li>Piotr updated Travis configuration to work with Python 3.7, instead of   Python 3.7-dev.</li> <li>Piotr updated <code>procedures.md</code> with information about using Ansible   Playbooks for AMY deployment.</li> </ul>"},{"location":"releases/v2.5.0/","title":"AMY release v2.5.0 - 2019-02-03","text":"<p>Major AMY v2.5.0 was released on 2019-02-03.</p> <p>This release brings a bunch of fixes and contributions from other people.</p>"},{"location":"releases/v2.5.0/#new-features","title":"New features","text":"<ul> <li>Maneesha renamed 'Group Name' to 'Registration Code' in Training   Requests.</li> <li>Elizabeth updated email addresses on the training form page.</li> <li>Piotr added searching in comments, as this stopped working when we moved   from <code>notes</code> fields to comments system.</li> <li>Piotr added display of badge &amp; award data in membership details.</li> <li>Piotr added Datatables for tests in one table   (event tasks).  If it works out, we may add Datatables to other tables in   AMY.</li> </ul>"},{"location":"releases/v2.5.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed errors in <code>fake_database.py</code> script.</li> <li>Piotr fixed migration checking in Travis-CI script; now Travis correctly   checks for missing migrations as part of the continuous-integration.</li> <li>Maneesha fixed <code>Makefile</code> and wrong path to <code>git_version.py</code> file.</li> </ul>"},{"location":"releases/v2.5.0/#maintenance","title":"Maintenance","text":"<ul> <li>Piotr removed Invoice and Profile Update requests - both features haven't   been used for a long time.</li> </ul>"},{"location":"releases/v2.5.1/","title":"AMY minor release v2.5.1 - 2019-02-13","text":"<p>Minor AMY release v2.5.1 was issued on 2019-02-13.</p> <p>This issue concentrated on bringing a relatively big new feature: preserving checked checkboxes on All Training Requests page. This feature changes the way training requests are displayed, and what actions admins can take. More details in the pull request.</p>"},{"location":"releases/v2.5.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr updated the language registry, fixing the way some languages with   multiple names are represented (e.g. \"Dutch Flemish\" -&gt; \"Dutch, Flemish\").</li> </ul>"},{"location":"releases/v2.5.1/#new-features","title":"New features","text":"<ul> <li>Piotr made (big) changes to the All Training Requests page that include   preserving checkboxes along page refreshes.</li> <li>Piotr added <code>?next</code> URL parameter to the <code>action_required_policy</code> view,   thus enhancing its capabilities.</li> </ul>"},{"location":"releases/v2.6.0/","title":"AMY release v2.6.0 - 2019-03-05","text":"<p>Major AMY release v2.6.0 was issued on 2019-03-05.</p>"},{"location":"releases/v2.6.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr changed (again) the place jQuery is imported in <code>base.html</code>.</li> <li>Piotr enabled compression of CSS files (CSS maps were rendering   un-compressed files unusable).</li> <li>Piotr reworked the Makefile so that some potentially risky commands don't   behave in a risky way. More in #1476.</li> </ul>"},{"location":"releases/v2.6.0/#new-features","title":"New features","text":"<ul> <li>Piotr parametrized Django Admin URL (so now it's not available under   '/admin', but somewhere random).</li> <li>Piotr added Criterium model (for sending emails regarding workshops in   specific geographic areas to specific addresses) and Continent model (for   defining continents). Continents are used in searching (All Events and Find   Workshop Staff pages).</li> <li>Piotr changed wording and behavior of minority questions in Training   Request form. Now the field doesn't ask for details, and works with automatic   scoring.</li> <li>Piotr extended workshop tags validation to accept split latitude and   longitude tags. This feature was requested upstream in workshop template   repository.</li> <li>Piotr reworked Training Progress page in two Pull Requests: a warning   note (regarding missing data) was added, some misleading information and   links were updated.</li> <li>Piotr added Library Carpentry requirements to the training process.</li> </ul>"},{"location":"releases/v2.7.0/","title":"AMY release v2.7.0 - 2019-04-05","text":"<p>Major AMY release v2.7.0 was issued on 2019-04-05.</p>"},{"location":"releases/v2.7.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed some bugs related to Django Compressor use (especially   top navbar not sticky, and \"select all\" not working)</li> <li>Piotr updated Fake Database script with the newer better models.</li> </ul>"},{"location":"releases/v2.7.0/#new-features","title":"New features","text":"<ul> <li>Piotr added a <code>Trainer</code> badge to Find Workshop Staff + its API   endpoint</li> <li>Piotr changed the way attendance for events is calculated; now it's   a maximum of (manually entered attendance, 'learner' tasks count).</li> <li>Piotr added LC to the statistics at All Activity Over Time API/page.</li> <li>Piotr added prefilling of event form when admin Accepts &amp; creates   an event from a Workshop Request.</li> <li>Piotr added an email autoresponder to people who submit their   workshop requests.</li> </ul>"},{"location":"releases/v2.8.0/","title":"AMY release v2.8.0 - 2019-06-19","text":"<p>Major AMY release v2.8.0 was issued on 2019-06-19, more than two months after previous release v2.7.0.</p>"},{"location":"releases/v2.8.0/#new-features","title":"New features","text":"<ul> <li>Piotr reworked \"Find Duplicate Persons\" view, so that now it's using   a table and radio buttons for selecting merge candidates.</li> <li>Piotr also added \"mark as reviewed\" feature to \"Find Duplicate   Persons\", allowing to dismiss possible duplicates until they are updated.   If they are updated at least 1 minute after \"mark as reviewed\" timestamp,   then they will show up on \"Find Duplicate Persons\" page.</li> <li>Piotr added special log file for logging failed login attempts.   This will be later used for fail2ban to disallow IPs with too many   failed login attempts.</li> <li>Maneesha changed description of host responsibilities agreement   on the workshop request form.</li> </ul>"},{"location":"releases/v2.9.0/","title":"AMY release v2.9.0 - 2019-09-16","text":"<p>Major AMY release v2.9.0 was issued on 2019-09-16, almost three months after previous major release v2.8.0.</p> <p>This release sports a big project, three (instead of one) workshop request forms:</p> <ul> <li>inquiry form for people just coming to The Carpentries,</li> <li>request form for people who know precisely what they want,</li> <li>self-organised workshop submission form for instructors, who want their   self-organised workshop to be recorded.</li> </ul>"},{"location":"releases/v2.9.0/#new-features","title":"New features","text":"<ul> <li>Piotr upgraded Django to latest version v2.2.5.</li> <li>Piotr added new option for Lesson Publication Consent field.</li> <li>Piotr added \"Chemistry\" for auto-scoring mechanism for the   Instructor Training Request.</li> <li>Piotr implemented a big project called Three Workshop Request Forms.</li> <li>on top of that changes, Piotr changed Training Request form to work   better with people who tend to forget to provide registration code.</li> </ul>"},{"location":"releases/v2.9.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Maneesha fixed login page - now the columns have clear headers and in   case of troubles, a contact email is provided.</li> <li>Fran\u00e7ois fixed sysadmin email address (for error messages).</li> <li>Piotr added lesson publication consent field displayed in user's profile   after logging in.</li> <li>Piotr replaced troublesome Django-Autocomplete-Light with much better   (so far) Django-Select2 in his quest to use best autocompletion for AMY.</li> <li>Fran\u00e7ois fixed small typo in user profile's page.</li> <li>Maneesha replaced wrong GitHub repo address with correct one in the AMY   footer.</li> </ul>"},{"location":"releases/v2.9.1/","title":"AMY minor release v2.9.1 - 2019-09-24","text":"<p>Minor AMY release v2.9.1 was issued on 2019-09-24, and is a follow-up to previous major release v2.9.0.</p> <p>This release mostly consists of bugfixes following the release of a major feature, namely three workshop request forms.</p>"},{"location":"releases/v2.9.1/#new-features","title":"New features","text":"<ul> <li>Piotr extended CSV download of Training Requests with a <code>review_process</code>   (Application Type) column.</li> </ul>"},{"location":"releases/v2.9.1/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Piotr updated repository links in the <code>procedures.md</code> documentation file.</li> <li>Piotr updated missing pagination widgets on All Workshop Inquiries and   All Self-Organised Submissions pages.</li> <li>Piotr fixed super-narrow admin-selection widget (it only occurred if   there was no admin selected previously).</li> <li>Piotr fixed incorrect permission names in some workshop inquiries- and   self-organised submissions-related pages.</li> <li>Piotr fixed a data migration   (self-organised Workshop Requests -&gt; Self-Organised Submissions), which was   missing some fields</li> <li>Piotr enabled cache for Select2 widget queries, which fixed a bug related   to users' inability to search/autocomplete.</li> </ul>"},{"location":"releases/v2.9.2/","title":"AMY minor release v2.9.2 - 2019-09-25","text":"<p>Minor AMY release v2.9.2 was issued on 2019-09-25, and is a follow-up to previous major release v2.9.0.</p> <p>This release fixes two UI-related bugs.</p>"},{"location":"releases/v2.9.2/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Piotr fixed wrong link to \"assign\" buttons on Self-Organised Submission   and Workshop Inquiry details pages.</li> <li>Piotr updated invalid permission name for action buttons widget on both   Self-Organised Submissions and Workshop Inquiry details pages.</li> </ul>"},{"location":"releases/v2.9.3/","title":"AMY minor release v2.9.3 - 2019-09-28","text":"<p>Minor AMY release v2.9.3 was issued on 2019-09-28. It only enlarges font on buttons with CSS class <code>.btn-lg</code>.</p>"},{"location":"releases/v2.9.4/","title":"AMY minor release v2.9.4 - 2019-10-04","text":"<p>Minor AMY release v2.9.4 was issued on 2019-10-04. It fixes an invalid data validation/cleaning in EventForm when a \"Mix &amp; Match\" curriculum was selected (as it requires a corresponding tag \"Circuits\", and the validation didn't check this).</p>"},{"location":"releases/v2.9.5/","title":"AMY minor release v2.9.5 - 2019-12-08","text":"<p>Minor AMY release v2.9.5 was issued on 2019-12-08, and is another follow-up to previous major release v2.9.0.</p> <p>This release fixes some bugs and includes dependency upgrades.</p>"},{"location":"releases/v2.9.5/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Piotr fixed wrong link permission name for some WorkshopInquiryRequest   views (previous name: <code>change_workshopinquiry</code>, new correct name:   <code>change_workshopinquiryrequest</code>).</li> </ul>"},{"location":"releases/v2.9.5/#other","title":"Other","text":"<ul> <li>dependabot provided dependency upgrades for Django (v2.2.5 -&gt; v2.2.8)   and Pillow (v5.3.0 -&gt; v6.2.0).</li> </ul>"},{"location":"releases/v3.0.0/","title":"AMY release v3.0.0 - 2021-05-29","text":"<p>This major AMY release v3.0.0 contains three projects:</p> <ul> <li>new memberships (worked on by Piotr)</li> <li>new consents (worked on by LB)</li> <li>profile archival (worked on by LB).</li> </ul> <p>Memberships and profile archival are currently enabled, but consents will be enabled with v3.1.0 release.</p> <p>Each of the project contains a lot of features and bugfixes, as they underwent staging testing on a test server.</p> <p>Currently, some of the features are still worked on in memberships and consents projects.</p> <p>Ticket trackers for each of the projects:</p> <ul> <li>memberships: https://github.com/carpentries/amy/projects/2</li> <li>consents: https://github.com/carpentries/amy/projects/3</li> <li> <p>profile archival: https://github.com/carpentries/amy/projects/4</p> </li> <li> <p>Piotr asd - #1000</p> </li> <li>LB asd - #1000</li> <li>Maneesha asd - #1000</li> </ul>"},{"location":"releases/v3.0.0/#new-features","title":"New features","text":"<p>For complete list of features, please follow project links above.</p> <ul> <li>LB applied uniform formatting to whole codebase - #1814</li> <li>LB expanded Find Workshop Staff with knowledge domain search - #1806</li> <li>Piotr switched CI from Travis to GitHub - #1868</li> <li>Maneesha updated trainee progress view - #1864</li> <li>Piotr improved some workflows, removed obsolete files - #1876</li> <li>Maneesha updated trainee progress view - #1864</li> <li>Maneesha updated wording for pre-approved registration of trainees - #1863</li> <li>Piotr added pre-commit for isort (import sorting utility) - #1906</li> <li>Piotr added workshop URL validation - #1902</li> <li>Piotr brought back instructor survey links - #1910</li> </ul>"},{"location":"releases/v3.0.0/#bugfixes","title":"Bugfixes","text":"<p>For complete list of bugfixes, please follow project links above.</p> <ul> <li>LB fixed main branch name - #1802</li> <li>LB fixed help text for event country - #1803</li> <li>Maneesha updated documentation with new membership fields - #1789</li> <li>Maneesha updated database documentation - #1809</li> <li>Maneesha updated database documentation - #1825</li> <li>[Zhian][] updated database documentation - #1866</li> <li>Dependabot updated some dependencies:<ul> <li>https://github.com/carpentries/amy/pull/1818</li> <li>https://github.com/carpentries/amy/pull/1847</li> <li>https://github.com/carpentries/amy/pull/1846</li> <li>https://github.com/carpentries/amy/pull/1865</li> <li>https://github.com/carpentries/amy/pull/1894</li> <li>https://github.com/carpentries/amy/pull/1901</li> </ul> </li> <li>LB removed initial slug from \"Accept and create a new event\" forms - #1815</li> <li>Piotr fixed Django messages formatting in Django Admin - #1898</li> </ul>"},{"location":"releases/v3.1.0/","title":"AMY release v3.1.0 - 2021-06-16","text":"<p>Major AMY release v3.1.0. This release brings Consent project to production server. (The new features will be enabled soon after the release). There are also some bugfixes and dependency updates.</p>"},{"location":"releases/v3.1.0/#new-features","title":"New features","text":"<ul> <li>Piotr added code linting to GitHub Continuous Integration pipelines - #1966 and #1978</li> <li>LB removed old-style consents from Trainee Dashboard - #1971</li> <li>LB removed old-style consents from filter - #1970</li> <li>LB removed old-style consents from API serializers - #1967</li> <li>LB changed person serializer and view to only show active consents (API) - #1975</li> </ul>"},{"location":"releases/v3.1.0/#bugfixes","title":"Bugfixes","text":"<ul> <li>dependabot updated Django and Pillow dependencies</li> <li>Piotr fixed non-unique membership members being created in the development database script - #1980</li> <li>maneesha fixed documentation not mentioning a superuser created in the development database script - #1981</li> </ul>"},{"location":"releases/v3.2.0/","title":"AMY release v3.2.0 - 2021-07-03","text":"<p>Minor AMY release v3.2.0. This release brings two exciting new features.</p> <p>First - consents migration - means we can enable consents in the production server. Second - <code>Pipenv</code> tool - means we can install and manage AMY dependencies in a more secure way. Both features are very exciting.</p>"},{"location":"releases/v3.2.0/#new-features","title":"New features","text":"<ul> <li>LB migrated old consents to the new ones, which enables the new system in AMY - #1984</li> <li>Piotr switched AMY's Software Supply Chain to use Pipenv - #1965</li> </ul>"},{"location":"releases/v3.2.1/","title":"AMY release v3.2.1 - 2021-07-11","text":"<p>AMY bugfix release v3.2.1.</p> <p>This release contains two bugfixes, including a major one that prevented users for using AMY on some important pages.</p>"},{"location":"releases/v3.2.1/#bugfixes","title":"Bugfixes","text":"<ul> <li>Piotr fixed Countries Filter issue - #1997</li> <li>Piotr fixed warning membership message after invalid calculation issue - #1998</li> </ul>"},{"location":"releases/v3.3.0/","title":"AMY release v3.3.0 - 2021-09-20","text":"<p>Minor AMY release v3.3.0. It contains a lot of new features and some bugfixes. Worth noting: this release brings changes and improvements to the new Membership workflow.</p>"},{"location":"releases/v3.3.0/#new-features","title":"New features","text":"<ol> <li>LB Consents: Remove old actions required form - #1985</li> <li>LB Consents: Updated Merge person to handle new consents. - #2013</li> <li>maneesha Alacarte membership (new variant) - #1994</li> <li>Piotr updated <code>procedures.md</code> - #1990</li> <li>Piotr Memberships: List events on membership page, display event type of organization page - #2006</li> <li>Piotr Memberships: Add comment to membership extension - #2007</li> <li>Piotr Memberships: Membership Rollover form: remove default agreement link, move \"Copy ...?\" fields up - #2008</li> <li>Piotr Memberships: Confirm member removal - #2011</li> <li>Piotr Memberships: Membership: edit rolled values - #2010</li> <li>Piotr Memberships: Prepopulate workshop and public training seats based on selected membership variant - #2012</li> <li>Piotr Change Training Progress \"a\" state badge color - #2028</li> <li>Piotr Bunch of small fixes to Workshop Request forms - #2029</li> <li>Piotr \"Seats exceeded\" warning - #2035</li> <li>Piotr Memberships: Membership Extend: use new end date instead of number of days - #2036</li> <li>Piotr Memberships: Edit membership extensions - #2020</li> <li>Piotr Memberships: Log membership members change - #2009</li> <li>Piotr Fix Sites framework issue when running tests - #2042</li> <li>Piotr Require instructor availability conditionally - #2041</li> </ol>"},{"location":"releases/v3.3.0/#bugfixes","title":"Bugfixes","text":"<ol> <li>Dependabot updated 3 dependencies due to security releases (<code>urijs</code>, <code>pillow</code>, <code>sqlparse</code>)</li> <li>LB Fixed Consents updated for trainee dashboard - #2002</li> <li>LB Fixed Consents automatic emails' reply to value - #2031</li> <li>Piotr Fix: redirect if only 1 group of results is singular - #2017</li> <li>Piotr Null event latitude and longitude - #2040</li> </ol>"},{"location":"releases/v3.3.1/","title":"AMY release v3.3.1 - 2021-10-10","text":"<p>AMY bugfix release v3.3.1. This release contains some bugfixes.</p>"},{"location":"releases/v3.3.1/#bugfixes","title":"Bugfixes","text":"<ol> <li>Dependabot updated <code>datatables.net</code> due to it's security release</li> <li>Piotr Fix wrong template variable displayed in Organization page - #2057</li> <li>Piotr Fix for negative remaining values when rolling over - #2071</li> <li>Piotr Membership counting queryset adjustment - #2058</li> <li>Fran\u00e7ois  tweak privacy language on consent page - #2073</li> </ol>"},{"location":"releases/v3.3.2/","title":"AMY release v3.3.2 - 2021-10-26","text":"<p>AMY bugfix release v3.3.2. This release contains some changes to the Cookie Policy and updates to internal project dependencies.</p>"},{"location":"releases/v3.3.2/#changes","title":"Changes","text":"<ol> <li>Piotr Updated internal project dependencies - #2079</li> <li>Piotr Added cookie policy line to footer - #2077</li> <li>Piotr Reconfigured docs to be built from <code>develop</code> instead of <code>main</code> - #2080</li> <li>Fran\u00e7ois  tweaked cookie policy language - #2085</li> </ol>"},{"location":"releases/v3.4.0/","title":"AMY release v3.4.0 - 2022-01-03","text":"<p>Major AMY release v3.4.0. It contains some quite exciting features, like Community Roles and (disabled for now) basic Instructor Recruitment Process.</p>"},{"location":"releases/v3.4.0/#new-features","title":"New features","text":"<ol> <li>Piotr [#2021, #2022, #2023] Community Roles: basic models - #2084</li> <li>maneesha Remove old user guide - #2089</li> <li>maneesha update AMY contributor list - #2088</li> <li>Piotr [#2024] Person profile - Community Roles - #2091</li> <li>LB feat(Profile Archival) Add yearly reminders for the user to update their profile. - #2034</li> <li>Piotr Update packages - #2110</li> <li>Piotr [#2106] Increase security in generic_schedule_email redirect - #2107</li> <li>Piotr [#1811] Successful job result TTL is 1 year long - #2105</li> <li>Piotr [#2061][#2062] Instructor Recruitment basics - #2108</li> <li>Piotr [#2098] Change Fee Choices for request and inquiry forms - #2111</li> </ol>"},{"location":"releases/v3.4.0/#bugfixes","title":"Bugfixes","text":"<ol> <li>Piotr [#2097] Improve select2 widget keyboard navigation - #2104</li> </ol>"},{"location":"releases/v3.4.1/","title":"AMY release v3.4.1 - 2022-04-24","text":"<p>AMY minor release v3.4.1. This release contains upstream security updates (see https://www.djangoproject.com/weblog/2022/apr/11/security-releases/).</p>"},{"location":"releases/v4.0.0/","title":"AMY release v4.0.0 - 2022-10-15","text":"<p>This major AMY release v4.0.0 contains three projects:</p> <ul> <li>Community Roles</li> <li>Single Instructor Badge</li> <li>Instructor Selection</li> </ul> <p>Each of the project contains a lot of features and bugfixes, as they underwent staging testing on a test server.</p> <p>Ticket trackers for each of the projects:</p> <ul> <li>Community Roles: https://github.com/carpentries/amy/projects/5</li> <li>Single Instructor Badge: https://github.com/carpentries/amy/projects/7</li> <li> <p>Instructor Selection: https://github.com/carpentries/amy/projects/6</p> </li> <li> <p>Piotr asd - #1000</p> </li> <li>[LB][] asd - #1000</li> <li>Maneesha asd - #1000</li> </ul>"},{"location":"releases/v4.0.0/#new-features","title":"New features","text":"<p>For complete list of features, please follow project links above and milestone link.</p> <ul> <li>Community Roles project brings in better defined roles for every person in the   database. This includes, for example, links to resources they're maintaining, or   termination reason, along with enablement time period.</li> <li>Single Instructor Badge is a migration project, making changes to AMY to drop support   for Instructor Badges from various Carpentries; instead, a single Badge will exist for   all instructors.</li> <li>Instructor Selection is a project most important for the end users (instructors). It   implements a list of workshops looking for instructors. This will make the spreadsheet   where instructors sign up for workshops deprecated.</li> </ul>"},{"location":"releases/v4.0.0/#bugfixes","title":"Bugfixes","text":"<p>For complete list of bugfixes, please follow project links above.</p>"},{"location":"releases/v4.0.0/#other-contributions","title":"Other contributions","text":"<p>Apart from projects, there were some dependencies or code quality fixes, and we had some external contributions:</p> <ul> <li>Kamil fixed date range validation for Community Roles   (https://github.com/carpentries/amy/pull/2126)[#2126]</li> <li>Sylwester contributed a change to fix Marie Sk\u0142odowska-Curie's last name   (https://github.com/carpentries/amy/pull/2161)[#2161]</li> </ul> <p>We also saw some contributions from Maneesha and Sher!.</p>"},{"location":"releases/v4.0.1/","title":"AMY release v4.0.1 - 2022-10-23","text":"<p>AMY bugfix release v4.0.1. This release contains some bugfixes and an enhancement.</p>"},{"location":"releases/v4.0.1/#bugfixes","title":"Bugfixes","text":"<ol> <li>Piotr Award details and award-delete issues - #2248</li> <li>Piotr Fix issues with empty event dates on upcoming teaching opportunities - #2250</li> </ol>"},{"location":"releases/v4.0.1/#enhancement","title":"Enhancement","text":"<ol> <li>Piotr Sort instructor's workshop activity by event start date - #2251</li> </ol>"},{"location":"releases/v4.0.2/","title":"AMY release v4.0.2 - 2022-10-24","text":"<p>AMY hotfix release v4.0.2. This release contains one hotfix.</p>"},{"location":"releases/v4.0.2/#hotfixes","title":"Hotfixes","text":"<ol> <li>Piotr hotfix: Invalid argument name for template tags in upcoming_teaching_opportunities.html - 62bc5db</li> </ol>"},{"location":"releases/v4.0.3/","title":"AMY release v4.0.3 - 2022-10-31","text":"<p>AMY bugfix release v4.0.3. This release contains one bugfix.</p>"},{"location":"releases/v4.0.3/#bugfixes","title":"Bugfixes","text":"<ol> <li>Piotr Fix: unquote ?next value for redirection - #2265</li> </ol>"},{"location":"releases/v4.0.4/","title":"AMY release v4.0.4 - 2022-11-04","text":"<p>AMY bugfix release v4.0.4. This release contains one bugfix.</p>"},{"location":"releases/v4.0.4/#bugfixes","title":"Bugfixes","text":"<ol> <li>Piotr Extend AllCountriesFilter, AllCountriesMultipleFilter: conditionally extend countries - #2266</li> </ol>"},{"location":"users_guide/admin_index/","title":"Users Guide","text":""},{"location":"users_guide/admin_index/#amy-the-carpentries-internal-database","title":"AMY: The Carpentries' internal database","text":""},{"location":"users_guide/admin_index/#logging-in","title":"Logging in","text":"<ul> <li>Log in to AMY here. Administrative users may log in via GitHub or a user id.  Instructors should log in via GitHub.  Contact The Carpentries Core Team if you have difficulty logging in.</li> </ul>"},{"location":"users_guide/admin_index/#amy-dashboard","title":"AMY Dashboard","text":"<p>All menus and a search bar are displayed across the top. The main page has two columns, showing current workshops and in progress workshops.  This view can be filtered to show workshops assigned to the logged in administrator, another administrator, or unassigned workshops.</p> <p></p> <ul> <li>Current workshops have a complete start and end date, a valid url, and a complete location.</li> <li>In progress workshops are all workshops that do not meet these criteria.</li> </ul> <p>Current Data, Library, and Software Carpentry workshops will be listed on The Carpentries website, the corresponding lesson program website, and The Carpentries data feeds if the box to publish the workshop is checked.  Instructor Training events are not publicly listed.</p> <p>From here you can also add new events, organisations,  persons, or airports to the database.</p> <p></p>"},{"location":"users_guide/admin_index/#adding-a-new-organisation","title":"Adding a New Organisation","text":"<p>If an organisation is not already in AMY, add a new one by selecting \"New Organisation.\"  Domain and Full Name are required fields.  Enter in the domain (full website, such as <code>https://www.example.com/library</code>).  When known, enter in the country and latitude/longitude of the main location.  There is also a text box for open ended comments.</p> <p>The \"Affiliated Organization\" field is not being used; always leave this blank.</p> <p></p>"},{"location":"users_guide/admin_index/#memberships","title":"Memberships","text":"<p>AMY is also used to track all Carpentries memberships.  To create a new membership, the site must first be listed as an organisation in AMY.</p> <p>Select \"Memberships\" from the top menu bar to view a list of all Memberships. Memberships can be searched by Organisation name, Consortium status, Public/Private listing, Variant, Contribution type, Active status, and allowed or remaining training seats.</p>"},{"location":"users_guide/admin_index/#creating-memberships","title":"Creating memberships","text":"<p>New Memberships can be created one of two ways, based on whether it is an entirely new membership or a renewing membership:</p> <ul> <li>New memberships: If this is an entirely new membership, click on the \"New Membership\" button at the top of the membership page. This will take you to a blank new membership form.</li> </ul> <p></p> <ul> <li>Renewing memberships: If this is a renewal of a current membership, select that membership and click on the green \"Create new &amp; roll-over button\" at the bottom of that page.  This will take you to a new membership form with some information pre-populated.</li> </ul> <p></p>"},{"location":"users_guide/admin_index/#membership-fields","title":"Membership fields","text":"<p>The following fields are included in the Member view:</p> <ul> <li>Name The name of the membership.  If this is a single organisation, it will be that organisation's name.  If it is a consortium of several organisations, it will be their collective name.</li> <li>Consortium  If this box is checked, you will be able to assign multiple organisations to that membership.  If not, you will only be able to assign one organisation to that membership.</li> <li>Can this membership be publicized on The Carpentries websites If Public is selected, the membership will be listed on The Carpentries Members page and data feeds.  If Private is selected, it will not be listed.</li> <li>Variant This lists all the membership levels (Gold, Silver, Bronze, etc.)</li> <li>Agreement start and Agreement end Start and end dates of the membership agreement.  A notification displays if the membership is not approximately one year long.</li> <li>Extensions Extensions are created using the \"Extend\" button at the bottom of the main membership page. The duration of the extension can be edited here.</li> <li>Contribution type What the member contribution was (Financial, Person-days, or other)</li> <li>Registration code A unique registration code used to unlock Instructor Training registration in Eventbrite and match up the trainee's application to this membership. These are not automated. Eventbrite registration is manually set up within Eventbrite. Instructor training applications using the member code are manually matched to this member and a training event.</li> <li>Link to member agreement Link to the Google Drive folder with the member agreement.</li> <li>Workshops without admin fee per agreement Number of workshops allowed in the terms of the agreement.</li> <li>Public instructor training seats Number of public instructor training seats allowed in the terms of the agreement.</li> <li>Additional public instructor training seats Number of additional public seats the member may have purchased beyond the standard agreement.</li> <li>In-house instructor training seats Number of in-house instructor training seats allowed in the terms of the agreement. This will typically only apply to Platinum memberships.</li> <li>Additional in-house instructor training seats  Number of additional in-house seats the member may have purchased beyond the standard agreement.  This will typically only apply to Platinum memberships.</li> <li>Emergency contact Free text field to fill in emergency contact information.</li> </ul>"},{"location":"users_guide/admin_index/#consortium-memberships","title":"Consortium Memberships","text":"<p>If Consortium is checked, additional affiliated sites can be added to that membership.  These will display in the <code>Organisations (members)</code> line of the Member view. For single-site memberships, only the main site can be listed here.  For consortium memberships, additional member sites can be added in.  These sites must first be listed as an organisation in AMY.</p>"},{"location":"users_guide/admin_index/#membership-contacts","title":"Membership Contacts","text":"<p>Once a new membership has been created, contact people can be assigned to the membership.  Contact people can have one of three roles:</p> <ul> <li>Billing Contact Person responsible for contracts and invoicing.</li> <li>Programmatic Contact Person responsible for coordination of workshops and instructor training</li> <li>Trainer Person responsible for delivering instructor training</li> </ul> <p>When a new membership is created, a new field called <code>Persons</code> will display. Click <code>Edit</code> in this row to add or edit any contacts. Multiple contacts can have the same role; one contact can have both roles. Existing contacts will be listed here. These Persons must first be listed as a Person in AMY.</p> <p></p>"},{"location":"users_guide/admin_index/#extending-membership-dates","title":"Extending membership dates","text":"<p>If a membership is granted an extension to the membership date terms, do not change the original membership end date.  Instead, click the gray \"Extend\" button at the bottom of the membership view. Enter in the new membership end date.  The number of days of the extension will automatically be calculated.  Add in any comments, such as the context for the extension or a link to more information. Multiple extensions can be granted. The duration of the extension can be edited in the membership's edit view.  If a second extension is granted, do not edit the original. Instead, click on the gray \"Extend\" button again to enter in another extension.</p> <p></p> <p></p>"},{"location":"users_guide/admin_index/#renewing-memberships","title":"Renewing memberships","text":"<p>When a member site renews a membership, do not create a new member record. Instead, click the green \"Create new &amp; roll-over\" button at the bottom of the membership view. A new member view will appear, with the following fields pre-populated. Any of these values can be edited.  A membership can be rolled over only once.</p> <ul> <li>Name: Same as previous</li> <li>Can this membership be publicized?: Same as previous</li> <li>Variant: Same as previous</li> <li>Agreement start and Agreement end Starts on end date of previous membership; ends one year from start</li> <li>Contribution type: Same as previous</li> <li>Instructor training seats and workshops allowed: Same as previous or standard amounts allowed for that membership</li> </ul> <p>This also includes the options to automatically copy over member organisations (for consortiums only) and copy over associated persons and their roles.</p> <p>The number of workshops or instructor training seats rolled over from the previous membership should be manually entered.  These workshop/instructor training seats counts will be reflected in the available counts for both the new and previous memberships.</p>"},{"location":"users_guide/admin_index/#adding-a-new-person","title":"Adding a New Person","text":"<p>A Person record can be created by accepting an Instructor Training application or a Workshop Request form.  A Person record can also be created independent of this activity.  If a person's record does not exist in the database, it can be added individually or as part of a bulk upload.</p>"},{"location":"users_guide/admin_index/#adding-an-individual-person-record","title":"Adding an Individual Person Record","text":"<p>Select \"New person\" and enter in as much information as possible.  At minimum a personal name is required.  If the airport is not listed, it will need to be added in.</p> <p></p>"},{"location":"users_guide/admin_index/#adding-bulk-person-records","title":"Adding Bulk Person Records","text":"<p><code>Person</code> records can also be added in bulk from a <code>.csv</code> file using the <code>Bulk add people</code> menu option in the  <code>New</code> menu at the top right or the <code>More</code> menu. Use the blank template to generate a well formed CSV noting each person's personal name, family name (optional), email address (optional), role, and associated event. Any additional information about the person must be entered manually.  Note: To bulk add records, the persons must have a role specified (instructor, helper, learner, host) associated with a specific event.  Because the learner role at an Instructor Training event requires a membership or open application affiliation, Instructor Training learner roles can not be bulk added.</p> <p></p> <p>The column for role name must exactly match the instructions here. The event slug must exactly match the slug for the event recorded in AMY. This may include invisible space characters.</p> <p>This will take you to a screen where you can verify each record, correct any errors, and submit them for bulk upload.  If a person with the same name and email already exists in the database, you will be able to match the new entry to the existing record.  Otherwise a new person record will be created.</p>"},{"location":"users_guide/admin_index/#consents","title":"Consents","text":"<p>AMY asks all users for the following consents:</p> <p>Mandatory consents:</p> <ul> <li>I have read and agree to the privacy policy of The Carpentries.</li> <li>I acknowledge that I am at least 16 years old.</li> <li>Do you agree to the transfer of your data outside of the European Economic Area/United Kingdom?</li> </ul> <p>Optional consents:</p> <ul> <li>Can we contact you for volunteering opportunities, surveys, feedback, etc.?</li> <li>Do you consent to publish your profile on The Carpentries website?</li> <li>Do you consent to have your name or identity associated with lesson publications?</li> </ul> <p>By default, all consents have null values (i.e., neither yes nor no). After a Person's record has been created, the individual can log in to AMY and edit their own consents. Admin users may also make these edits on behalf of the user, but this should be used only in rare circumstances. Consents are edited in the \"Consents\" tab in the Person view. This tab also shows the full consent history for the Person.</p> <p>Some of the questions above are also asked during the instructor training application. If a Person record is created from a training request, the consents from that training request will be carried across to the Person.</p>"},{"location":"users_guide/admin_index/#adding-a-new-airport","title":"Adding a New Airport","text":"<p>Airports are used as approximate geographic identifiers for our instructors.  Instructors can self-select the airport closest to them or the airport they most frequently use. Instructors can select an airport only after it has been added to AMY by an admin.  Each airport is identified by its three character IATA code which can be looked up using the link in AMY.</p> <p>Enter in the airport's IATA code, full name, country, and latitude and longitude.</p> <p></p>"},{"location":"users_guide/admin_index/#adding-a-new-event","title":"Adding a New Event","text":"<p>New events can be created one of several ways:</p> <ul> <li>Create a new event manually</li> <li>Create a new event from URL</li> <li>Create a new event from workshop request</li> </ul> <p>Regardless of how an event is created, roles such as Instructor, Host, and helper can be assigned after the event is created and saved.</p>"},{"location":"users_guide/admin_index/#creating-a-new-event-manually","title":"Creating a New Event Manually","text":"<p>Go to the New Event page by clicking on <code>New &gt;&gt; New Event</code> in the top right corner, or clicking on the <code>New Event</code> button on the Events listing page.</p> <p></p> <p>All fields will need to be manually entered in.</p>"},{"location":"users_guide/admin_index/#creating-a-new-event-from-url","title":"Creating a New Event from URL","text":"<p>If you already have the event's URL with properly formatted metadata using The Carpentries workshop template, some information can automatically be imported.  Go to the New Event page by clicking on <code>New &gt;&gt; New Event</code> in the top right corner, or clicking on the <code>New Event</code> button on the Events listing page.  Click on the \"Import from URL\" button and enter the link to the workshop website OR GitHub URL.</p> <p></p> <p>If the website repo contained properly formatted data, the slug, start/end dates, and location may automatically be populated. All other fields will need to be manually entered in.</p> <p>Instructor and helper names will be in the notes field but not assigned in the database.</p>"},{"location":"users_guide/admin_index/#creating-a-new-event-from-a-workshop-request","title":"Creating a New Event from a Workshop Request","text":"<p>A workshop can be requested from a host site, and this information can be used to create an event in AMY. In the \"Requests\" menu, select one of the following options:</p> <ul> <li>Workshop requests</li> <li>Workshop inquiries</li> <li>Self-Organised submissions</li> </ul> <p></p> <p>This will take you to a summary view of the workshop requests, workshop inquiries, or self-organised submissions.  Click on the \"information\" icon at the right of each row to see more details.</p> <p></p> <p>At the bottom of the request information page, the user has the option to accept or discard the request. All requests should be accepted (unless spam or otherwise inappropriate) so The Carpentries can maintain a history of workshop requests. Events can later be tagged as stalled or cancelled. Choosing \"Change state to Accepted\" will mark it as accepted in the workshop request list but will not create a new event. Select \"Accept and create a new event\" to create a new event from this request.</p> <p>This will open a page with a side by side view of the request details and view to create a new event, similar to the general new event page. The new event can be created manually or if available, from the URL, as described above.</p> <p></p>"},{"location":"users_guide/admin_index/#event-fields","title":"Event fields","text":"<ul> <li> <p>Slug Create the workshop slug. This must be in the form <code>YYYY-MM-DD-sitename</code> (for example, <code>2018-01-01-hawkins</code>.  The same slug should be used for the workshop's GitHub page and any other place the workshop is identified. If the exact date is not known, <code>XX</code> can replace the month and/or day (for example, <code>2018-01-xx-starfleet</code>).</p> </li> <li> <p>Workshop Dates If known, enter in the workshop start and dates.</p> </li> <li> <p>Completed Do not check the \"Completed\" box yet -- this will be checked after the workshop is over to indicate all associated wrap up work is finished.</p> </li> <li> <p>Host Select the Host name from the drop down menu. The Host is the institution where the workshop is actually being held (or would be held for online workshops). If the Host does not appear on the list, create a new organisation.</p> </li> <li> <p>Sponsor Select the Sponsor name from the drop down menu.  The Sponsor is the institution responsible for funding or organising the workshop and is often the same as the Host.</p> </li> <li> <p>Membership Select the Membership this event should be applied to, by membership term and membership dates.</p> </li> <li> <p>Administrator Select the administrator from the drop down menu.  This will always be  <code>Data Carpentry</code>, <code>Library Carpentry</code>, <code>Software Carpentry</code>,  <code>Instructor Training</code>, <code>Collaborative Lesson Development Training</code> or <code>Self-Organised</code>.</p> </li> <li> <p>Is this workshop public If the workshop Host consents, choose \"Public.\" This will list the workshop on the websites for The Carpentries, the associated lesson programs, and The Carpentries data feeds.  If \"Private\" it will not be listed publicly anywhere.</p> </li> <li> <p>Assigned to Select the name of The Carpentries team member responsible for managing this workshop.  Only AMY admin users appear in this list.  This assignment is used in the views throught AMY.</p> </li> <li> <p>Event Tags  Tags are used for several purposes as noted below, including event type, event status, lesson program, event status, and administrative attributes. Multiple tags can be selected for any event.</p> <ul> <li>automated-email: Administrative. Automated emails are sent only for workshops with this tag.</li> <li>DC: Lesson Program. Identifies workshops teaching from Data Carpentry curricula.</li> <li>LC: Lesson Program. Identifies workshops teaching from Library Carpentry curricula.</li> <li>SWC: Lesson Program. Identifies workshops teaching from Software Carpentry curricula.</li> <li>Circuits: Lesson Program.  Identifies \"mix and match\" workshops teaching across lesson programs.</li> <li>online: Administrative. Identifies workshops taking place on line.</li> <li>TTT: Event type. Identifies Instructor Training events.</li> <li>ITT: Event type. Identifies Trainer Training events.</li> <li>CLDT Event type.  Identifies Collaborative Lesson Development Training events.</li> <li>Pilot: Event type. Identifies workshops teaching pilot curricula.</li> <li>for-profit: Administrative. Identifies workshops run by for-profit institutions.</li> <li>Scholarship: Administrative. Identifies sponsored workshops.</li> <li>private-event: Deprecated. Formerly used before explicit private/public field existed.</li> <li>cancelled: Event status. Identifies workshops that got canceled after they were fully scheduled.</li> <li>unresponsive: Event status. Identifies workshops whose Hosts/Instructors are not sending attendance data.</li> <li>stalled: Event status. Identifies workshops where planning began but workshops did not happen.</li> <li>LMO: Event type.  Identifies Lesson Maintainer Onboarding sessions (for Lesson Maintainers).</li> <li>LSO: Event type.  Identifies Lesson Specific Onboarding sessions (for Instructors).</li> <li>hackathon: Event type.</li> <li>WiSE: Event audience. Identifies workshops for Women in Science and Engineering. </li> </ul> </li> <li> <p>TTT Open applications For instructor training events only, member sites become associated with the event as individuals from that member site are assigned to that event. Checking this box will allow people from the open application pool to be matched to this event as well.  This box is automatically checked for events with the <code>TTT</code> tag.</p> </li> <li> <p>Curricula taught at the workshop Select the curricula taught at this workshop.</p> </li> <li> <p>Lessons covered Placeholder section for lessons covered</p> </li> <li> <p>URL Enter in the workshop's url (to the website, not the repo). This is generally in the format <code>https://username.github.io/YYYY-MM-DD-sitename</code>.  It is created using the template in this GitHub repo.</p> </li> <li> <p>Language  Enter in the human language the workshop is taught in. This is especially important for The Carpentries to track workshops in languages other than English.</p> </li> <li> <p>Eventbrite  If the workshop is using The Carpentries Eventbrite for registration, enter the Eventbrite key. This is not needed if the host site is using their own Eventbrite account or any other registration system.</p> </li> <li> <p>Manual Attendance   After the event is over, record the total number of learners who attended the workshop.  This is compared to the count of learner tasks at that event.  In the end, the higher value will be displayed.  Note The Carpentries does not currently maintain attendance data on its workshops.</p> </li> <li> <p>Additional people to contact  Enter only email addresses for any additional contact people for this event. This is intended for people who do not have an official role (Host, Instructor, etc.) at the workshop.  Enter emails addresses, one at a time.  These individuals do not need a Person record in AMY.  They will be included on any automated emails.</p> </li> <li> <p>Location details  Add in the location including the country, venue name, address, and latitude/longitude coordinates.</p> </li> <li> <p>Comment  Add in any other notes that may not be covered in any fields above.  This will be transformed into a timestamped notes log once the event is saved.  Comments can be formatted in Markdown.</p> </li> </ul>"},{"location":"users_guide/admin_index/#recruiting-instructors-for-workshops","title":"Recruiting Instructors for Workshops","text":"<p>AMY admins can create a sign up process for badged and active Instructors to express interest in teaching opportunities. The following criteria must be met to begin the instructor signup process:</p> <ul> <li>Centrally-Organised workshop</li> <li>Start date in future</li> <li>Complete location information</li> </ul> <p>Once these criteria are met, the admin will see an option to begin the Instructor signup (selection) process:</p> <p></p> <p>You will then be taken to a screen to add in more information about this workshop.  A priority can be automatically assigned based on how far out the workshop is.  This priority can be changed here. You can also share additional notes such as a description of the workshop audience, COVID policy, or other information.  Click \"Add sign up page\" to add this to the sign up page visible to badged and active Instructors.</p> <p>Automatic priority is defined as follows:</p> <ul> <li>For online events: LOW if start &gt;= 60 days; MEDIUM if start &gt; 30 days; HIGH otherwise.</li> <li>For in-person events: LOW if start &gt;= 90 days; MEDIUM if start &gt; 60 days; HIGH otherwise.</li> </ul> <p></p> <p>At this point, the workshop will be available for badged and active Instructors to view and consider.</p> <p>As Instructors register their interest, an admin can track their status from the event page itself to view details of just that workshop, or by selecting the \"More &gt;&gt; Instructor selection/recruitment\" menu option.  The next screen will show who has signed up so far, a summary of their activity as a Helper and Instructor; the Instructor's country; and notes left by the Instructor.</p> <p>The admin can edit their own notes for each person using the blue edit button, and confirm or decline the Instructor to teach using the confirm or decline buttons.  Once an Instructor has been confirmed in this way, an Instructor task is automatically created for this individual.</p> <p>Once at least two Instructors have been confirmed, the admin may close signups for this workshop.  This workshop will then no longer appear on the list of Instructor opportunities.</p> <p></p>"},{"location":"users_guide/admin_index/#assigning-people-to-events","title":"Assigning People to Events","text":"<p>Regardless of how events are created, adding the people associated with each event can not easily be automated. Name matching is hard.</p> <p>People can be associated with events one by one or as a bulk upload.  The person must already be in AMY before assigning them to a role at an event.  If an Instructor is assigned via the Instructor Recruitment process, the Instructor role is automatically assigned.</p>"},{"location":"users_guide/admin_index/#assigning-people-to-events-one-by-one","title":"Assigning People to Events, One by One","text":"<p>Go to the event page and click the \"Edit\" button at the top of the page.  Select the \"Tasks\" tab.</p> <p></p> <p>Fill in the following fields:</p> <ul> <li>Person Start typing in the person's name.  Auto-completed suggested names will appear.</li> <li>Role Add the person's role in the event (Helper, Instructor, Supporting Instructor, Workshop Host, Learner, Workshop Organiser. Contributed to Lesson Materials is not used in this context.).</li> <li>Title and URL are not used in this context.</li> </ul> <p>If a person's name does not appear in the dropdown, they will need to be added to the database.</p> <p>If this is a learner role at an Instructor Training event, the following fields should also be filled in.  These fields apply only to Instructor Training, and can be left blank for other types of events.</p> <ul> <li>Associated member site in TTT event Note the membership (institution name and membership year) that this seat should be assigned to.</li> <li>Count seat as public or in-house? Note whether the learner seat should be counted as public or inhouse.  Most seats will be public. Inhouse only applies to select Platinum level memberships.</li> <li>Open training seat Note whether this learner came through our open program, and is not affiliated with a member site.</li> </ul> <p>Click \"Submit\" to save your changes.</p> <p>Below this form, a list of all people assigned to this event is displayed, with three options at the end of the row.</p> <ul> <li>\"i\" icon opens a detailed view of this Person's role at this event</li> <li>pencil icon opens an edit view of this Person's role at this event</li> <li>red X icon deletes this Person's role at this event</li> </ul> <p></p>"},{"location":"users_guide/admin_index/#assigning-people-to-events-in-bulk","title":"Assigning People to Events in Bulk","text":"<p>See section above.</p>"},{"location":"users_guide/admin_index/#instructor-training","title":"Instructor Training","text":""},{"location":"users_guide/admin_index/#accepting-trainee-applications","title":"Accepting Trainee Applications","text":"<p>In addition to tracking workshops, AMY also allows us to track applications to instructor training events. The public facing application is here. Applicants are given a registration code if participating in a member training event and should select \"Profile Creation for Pre-approved Trainees\" using this code. Open applicants will not have a registration code.</p> <p>Once an individual submits the form, they receive an email that confirms their application has been received and includes a copy of the individual's responses. An admin user can then view the record by going to Requests --&gt; Training Requests.</p> <p></p> <p>This will display a list of all applications that are Pending or Accepted and Unmatched to an existing person. Applications can then be searched by individual name, email address, group (registration code), status (pending, accepted, discarded, or withdrawn), affiliation, or location.  Affiliation and location searches rely on text strings, so UCLA will not return University of California Los Angeles and Joburg ZA will not return Johannesburg or South Africa.</p> <p></p> <p>Some trainees will already be in AMY. If there is a record with a matching name and email address, they will show up with a \"matched trainee\" when you search for them. You can match the application to this trainee, or if the match was incorrect, search for a different Person record or create a new Person.</p> <p></p> <p>If \"matched trainee\" is blank, it means a match was not found.  If you think a match exists, you can search for it.  Otherwise, you will need to create a new person record for them.  If you know this person is in AMY under a different name or email address, look this person up here and click \"Match to selected trainee account.\"  If this is a new person, click \"Create new trainee account.\"  This will create a new Person record for that trainee.</p> <p></p> <p>This will return you to the instructor training application search screen, and this person's record will be updated with the new trainee account.</p> <p>Continue doing this until all relevant applications have a new trainee account. This must be done individually; it can not be done in bulk.</p> <p>Once all trainees for a given event have trainee accounts, we can assign them to a specific training event and associate them with a specific member contract. This part can be done in bulk for each group of trainees with a unique training date and member site affiliation. The event and the member agreement must already have been created in AMY.</p> <p>Check all the names to be assigned to the training event and membership, and then select the training event from the first drop down menu.  Select the member agreement from the second drop down menu. If the trainees are coming through the open application process rather than a member agreement, check this box instead of choosing a member agreement.</p> <p>Click \"Accept &amp; match selected trainees to chosen training.\" The search screen will then update to show that the trainees have been matched to this event. The event page will also update to list these trainees as learners at that event.</p> <p></p>"},{"location":"users_guide/admin_index/#tracking-checkout-progress","title":"Tracking Checkout Progress","text":"<p>The above steps note that a trainee was accepted in to a training event. Completion of the training event and three steps towards trainee checkout can be tracked in AMY.</p> <p>A list of all current trainees and their progress can be seen on the \"Trainees\" page under the \"More\" menu.</p> <p></p> <p></p> <p>The colour of each item represents its state:</p> <ul> <li>Green: Passed</li> <li>Blue: Asked to repeat</li> <li>Yellow: Not evaluated yet</li> <li>Red: Failed</li> </ul> <p>Hover over any item to see more information about it, including its state, date, and any notes.</p> <p>Click on the plus sign next to a trainee's progress to track a new step for that trainee. Click on the \"information\" or \"pencil\" icon at the right of each row to view or edit the trainee's profile.</p> <p>Each person's individual record also has a line for Instructor Training Progress, where these steps can be tracked and edited in the same way.</p> <p>Individuals may have multiple entries for any step, especially if they were asked to repeat.  Do not edit the previous step; create a new entry if they repeat a step.</p> <p></p> <p>Again, hover over any item to see more information, or click the plus sign to add another item.</p>"},{"location":"users_guide/admin_index/#adding-checkout-progress-one-by-one","title":"Adding checkout progress one by one","text":"<p>Click the plus sign in the \"Trainees\" page or an individual person's record to add a new progress item.</p> <p></p> <ul> <li>Trainee The page will pre-fill the trainee if possible. Otherwise, start typing in the person's name.  Auto-completed suggested names will appear.</li> <li>Type This will be the training event (Training), the welcome session (Welcome Session), the teaching demo (Demo), or a community contribution (Get Involved). When a choice is made, additional fields may appear (see below).</li> <li>State For the checkout type noted above, indicate if the trainee passed, was asked to repeat, or failed.  Failed should only be used in extreme circumstances.</li> <li>Notes Any free notes from the admin. Notes are required if the state is set to Failed, or if certain Get Involved activities have been selected (see table).</li> </ul> <p>Additional fields will appear depending on the Type selection:</p> <ul> <li>Event The training event that the trainee attended. The trainee should have a learner task at this event (see Assigning people to events). This field is only required when Type is set to Training.</li> <li>Get Involved activity The activity that the trainee completed for the Get Involved step. This field is only required when Type is set to Get Involved. Each activity, when selected, requires some or all of the URL, Date, and Notes fields to be filled as well. The community user guide contains a table of these requirements. When you submit the form, the form will check that the correct fields have been filled and tell you if changes are needed.</li> <li>URL A URL to a GitHub contribution, workshop website, or other contribution. This field is only required for some Get Involved activities (see table).</li> <li>Date The date of the activity (not the date of submission). If the activity took place across multiple days, use the first day. This field is required for all Get Involved activities (see table).</li> </ul>"},{"location":"users_guide/admin_index/#adding-checkout-progress-in-bulk","title":"Adding checkout progress in bulk","text":"<p>Checkout progress can only be added in bulk if all selected Trainees have the exact same information for that checkout step (i.e., the same status for the same event). \"Get Involved\" submissions can not be accepted in bulk. Go to the \"Trainees\" page under the \"More\" menu.</p> <p>To add the same step to many trainees, select the relevant trainees using the checkboxes on the left of each row, then complete the form at the bottom of the page. This form has the same fields as the individual progress form, minus the Trainee field. When the form is submitted, an identical item will be added to each selected trainee.</p> <p></p>"},{"location":"users_guide/admin_index/#updating-and-deleting-checkout-progress","title":"Updating and deleting checkout progress","text":"<p>Click on any progress item in the \"Trainees\" view or a person's individual record to view and update the details of that item. On the update page, there is also a \"Delete\" button in the top right, which will remove the item completely.</p> <p>Items cannot be updated or deleted in bulk.</p>"},{"location":"users_guide/admin_index/#evaluating-get-involved-submissions","title":"Evaluating Get Involved submissions","text":"<p>Trainees may submit a contribution for the Get Involved checkout step through the instructor dashboard - see the community user guide to understand how their side of the submission works.</p> <p>Submissions must be evaluated by an administrator to ensure that the contribution is valid.</p> <p>In the \"Trainees\" page (under the \"More\" menu), select the filter \"Only trainees with unevaluated Get Involved submission\" in the left sidebar, then click \"Submit\" at the bottom of the sidebar. This will update the page to show only trainees awaiting evaluation.</p> <p></p> <p>The relevant items are shown with a yellow background, which represents the \"Not evaluated yet\" state. Clicking on any of these items takes you to view the details of the submission and update its state. Notice there is an extra non-editable field: Trainee notes, which contains information provided by the trainee as part of their submission. Change this selection to \"Passed\" if this is a valid contribution.  Otherwise, change this to \"Asked to repeat\" and contact the individual to inform them.</p> <p></p>"},{"location":"users_guide/admin_index/#issuing-instructor-badge","title":"Issuing Instructor Badge","text":"<p>The Instructor badge can be issued through a person's record (see Issuing Badges) or through the Trainees page.</p> <p>On the Trainees page, the Eligible column shows whether the trainee has passed all checkout steps and is eligible for an instructor badge. If the trainee is eligible, the \"instructor badge\" button will appear green and can be clicked to award the badge. If the trainee is not eligible, the button appears grey and the text is struck through.</p> <p></p> <p>This list can also be filtered to only display trainees eligible to be certified using the left side menu.</p> <p></p> <p>If eligible, clicking the green \"instructor badge\" button on that person's row takes you to a screen where the details of the badge can be added. See Issuing Badges for guidance on completing this form. The Person and Event fields will be pre-filled.</p>"},{"location":"users_guide/admin_index/#issuing-badges","title":"Issuing Badges","text":"<p>The Carpentries has various badges that can be issued, including Instructor, Trainer, Maintainer, and more.</p> <p>An individual badge can be issued by going to a person's record and clicking the <code>Edit</code> button.  Choose the <code>Awards</code> tab on the next screen.</p> <ul> <li>Badge The specific badge that is being awarded</li> <li>Awarded The date the badge is being awarded on</li> <li>Event Used only if the badge was offered after an event, such as Instructor Training or Maintainer Onboarding</li> <li>Awarded by The admin user awarding the badge.  Not required.</li> </ul> <p></p>"},{"location":"users_guide/admin_index/#reports","title":"Reports","text":"<p>AMY comes with several built in reporting features that can be accessed by clicking <code>Reports</code> in the top menu.</p> <ul> <li>Membership training statistics Lists all memberships by variant, agreement dates, contribution type, and total/used/remaining instructor training seats (inhouse and public)</li> <li>Workshop issues and Instructor issues identify specific workshops and instructors with gaps in data.</li> <li>Find duplicate persons and Find duplicate training requests identifies Persons or Training Requests that may be listed as duplicates due to having the same name or email address, and allows the user to merge them. Read more on how to merge duplicates</li> </ul>"},{"location":"users_guide/admin_index/#user-and-administrator-roles","title":"User and Administrator Roles","text":"<p>What you are able to edit or view depends on your assigned role as a user or administrator in AMY.</p>"},{"location":"users_guide/admin_index/#instructor-login","title":"Instructor Login","text":"<p>Instructors can log in to AMY to view and update their own information. To do so, they must have a valid GitHub username in their profile. Instructors should visit the AMY login page and click on <code>Log in with your GitHub account</code>.  More information for the user can be found in the community users guide.</p> <p>If an instructor is having trouble logging in, an administrator can verify the following information.</p> <ul> <li>Be sure the GitHub user name is accurate.</li> <li>Click on <code>Change permissions</code> and be sure <code>Is active</code> is checked. No other permissions should be checked unless the instructor is also an otherwise authorised user.</li> <li><code>Logging in allowed</code> should show next to the GitHub name in the profile. If it says <code>Allow logging in with GitHub</code>, click this to allow logging in. This must be done after setting permissions to active above.</li> </ul>"},{"location":"users_guide/admin_index/#admin-roles","title":"Admin Roles","text":"<p>Admin users will have rights to view and edit many other parts of the AMY database.  The Django admin panel can be accessed from the top right menu, under the user's name, generating a unique URL for the session.</p> <p>An admin user can view their profile as if they were an ordinary user on this dashboard page.</p>"},{"location":"users_guide/admin_index/#automated-emails","title":"Automated emails","text":"<p>AMY sends automated emails for membership, instructor training, and workshop administration. This system was completely revamped in October 2024.</p> <p>Email templates and status of scheduled emails can be viewed directly through the user interface under the \"More\" menu.  Not all templated emails are currently active.</p> <p>Email recipients, schedule, and conditions are all set in the AMY codebase.  All automated emails depend on recipients having a valid email address in AMY.</p> <p>From, Reply to, CC, and BCC are all set in the AMY interface.  The email subject and body are also set in the AMY interface. These fields can all be modified by admin users at any time.</p>"},{"location":"users_guide/admin_index/#active-emails-workshops","title":"Active emails (Workshops)","text":"Admin Signs Instructor Up for Workshop <p>View in AMY Email description:  Send email to Instructor informing them the admin has signed them up as interested in teaching a workshop Sent to:  Instructor Date sent:   One hour after admin action</p> Ask for website <p>View in AMY Email description:  Send email to workshop Instructors reminding them to send us workshop website link Sent to:  Instructors Date sent:  One month before event start Conditions: Has administrator; Has at least one Instructor; Tagged SWC/DC/LC; Start date in future; not stalled/cancelled/unresponsive; Missing website</p> Host-instructors introduction <p>View in AMY Email description:  Send email introducing workshop Hosts &amp; Instructors providing general information Sent to:  Instructors and Hosts Date sent:  Immediately after conditions are met Conditions: Centrally-Organised; Instructor recruitment closed; Not stalled/cancelled; Has at least two Instructors; Has host; Tagged SWC/DC/LC; At least seven days in future</p> Instructor confirmed for workshop <p>View in AMY Email description: Emails instructor to confirm they have been assigned to a workshop Sent to:  Instructor Date sent: One hour after conditions are met Conditions: Instructor task created (either through recruitment process or manual data entry); Tagged SWC/DC/LC; Centrally-Organised; Start date in future</p> Instructor declined for workshop <p>View in AMY Email description: Emails instructor to inform them they have not been assigned to a workshop Sent to:  Instructor Date sent: One hour after conditions are met Conditions: Instructor declined in recruitment process</p> Instructor Signs Up for Workshop <p>View in AMY Email description: Emails instructor to confirm they have expressed interest in a workshop Sent to:  Instructor Date sent: One hour after conditions are met Conditions: Instructor signs up in recruitment process</p> New Self-Organised Workshop <p>View in AMY Email description: Emails Self-Organised workshop host to confirm their submission has been accepted Sent to:  Contacts from Self-Organised Workshop submission form Date sent: One hour after conditions are met Conditions: Self organized submission form accepted and linked to event; start date in future; not stalled/cancelled/unresponsive;</p> Post Workshop 7 days <p>View in AMY Email description: Follow up one week after Centrally-Organised or Self-Organised workshop is complete Sent to: Hosts and Instructors Date sent: Later of seven days after workshop end or seven days from now Conditions: Centrally-Organised or Self-Organised; At least one host; At least one Instructor;  Tagged SWC/DC/LC; Not CLDT; end date in future; not stalled/cancelled/unresponsive</p> Recruit helpers <p>View in AMY Email description: Reminder to host to recruit helpers Sent to: Hosts and Instructors Date sent: 21 days before event Conditions: Centrally-Organised; Tagged SWC/DC/LC; Not stalled/cancelled; At least one host; At least one Instructor; No helpers; Start date at least 14 days in future; not stalled/cancelled/unresponsive</p>"},{"location":"users_guide/admin_index/#active-emails-instructor-training","title":"Active emails (Instructor Training)","text":"Instructor Training (One month away) <p>View in AMY Email description: Send Trainers information about upcoming Instructor Training Sent to: Trainers Date sent: One month before event start Conditions: Tag TTT; At least 2 Trainers; Start date in future</p>"},{"location":"users_guide/admin_index/#active-emails-memberships","title":"Active emails (Memberships)","text":"New / renewing membership starting (member onboarding) <p>View in AMY Email description:  Onboarding message for new/renewing memberships Sent to:   Programmatic and billing contacts Date sent: One month before membership start date or immediately (whichever is later) Conditions: Membership roles exist; membership variant is bronze, silver, gold or platinum.</p>"},{"location":"users_guide/admin_index/#inactive-emails","title":"Inactive emails","text":"<ul> <li>Instructor Badge awarded</li> <li>Instructor Training completed but not yet badged</li> <li>Person records are merged</li> </ul>"},{"location":"users_guide/admin_index/#managing-scheduled-emails","title":"Managing scheduled emails","text":"<p>When an email is scheduled, it will be listed in the relevant event or person page.  It will also be listed on the main Scheduled Emails page.</p> <p>Click on the listing for an individual scheduled email to see more information about it, to reschedule it, or to edit the recipients, subject, or body.</p>"},{"location":"users_guide/admin_index/#other-tasks","title":"Other Tasks","text":""},{"location":"users_guide/admin_index/#merging-duplicate-persons-training-requests-or-events","title":"Merging Duplicate Persons, Training Requests, or Events","text":"<p>If duplicate Person, Training Request, or Event records exist, they can be merged.  If you know which two records should be merged, you can select them directly.  You can also search for possible duplicate records.</p>"},{"location":"users_guide/admin_index/#merging-two-known-duplicate-records","title":"Merging two known duplicate records.","text":"<p>Once you select Merge Persons, Merge Events, or Merge Training Requests you will be taken to a screen to select the two Persons, Events, or Training Requests you would like to merge. Start typing in the name or slug, and AMY will autocomplete with possible options.</p> <p></p> <p>This will take you to a screen listing all the information in that Person's record, and allowing you to choose whether to keep the values in record A or record B.  For fields allowing multiple values (such as event tasks), you will also have the option to combine (include all values). For consents, no choice is provided, as the most recently provided consents will always be kept and older consents will be archived. Click \"Submit\" on the bottom of this screen to complete the merge process.</p> <p></p>"},{"location":"users_guide/admin_index/#searching-for-possible-duplicate-person-or-training-request-records","title":"Searching for possible duplicate Person or Training Request records","text":"<p>If you want to check for duplicate Person or Training Requests in general, you can review a list of possible duplicate records. Select the appropriate option from the \"Reports\" menu.</p> <p></p> <p>Here, you will see two lists:</p> <ul> <li>Possible duplicate persons. This will include records where another record exists with the personal and family names switched, or a single person with the same personal and family name.</li> <li>Persons with the same names.  This compares people with the same personal and family names.</li> </ul> <p>In either case, if these records should be merged, select records A and B.  This will take you to the Merge Persons screen (see above).  If these individuals are not the same person, select \"Mark as Reviewed\" and they will not show up in the list of possible duplicates again.</p> <p></p>"},{"location":"users_guide/admin_index/#searching","title":"Searching","text":""},{"location":"users_guide/admin_index/#general-search","title":"General Search","text":"<p>The quickest and easiest way to search is using the search box in the top menu bar. This will perform a case insensitive search of any field in AMY, including searching for partial matches. For example:</p> <ul> <li><code>12-12-</code> will match any workshop slug containing that string (essentially any workshop on December 12 of any year.)</li> <li><code>ola tes</code> will match <code>Nikola Tesla</code> and <code>Nolan Bates</code></li> <li><code>stanford</code> will match any one with a <code>stanford</code> email address, with <code>stanford</code> in their name, any workshops with <code>stanford</code> in the slug, or the site <code>Stanford University</code>.</li> </ul> <p>If only one result is found across all fields, AMY will automatically redirect to that result.  Otherwise, AMY will redirect to a search results view.  The search results view will include a new search box, with results appearing in a tabbed view, separated by Organisations, Memberships, Events, Persons, Airports, Training Requests, and Comments.</p> <p>This search view can also be accessed directly from the More menu.</p>"},{"location":"users_guide/admin_index/#searching-for-qualified-instructors","title":"Searching for Qualified Instructors","text":"<p>Under the \"More\" menu, select \"Find Workshop Staff.\"  Here you can filter by the following criteria:</p> <ul> <li>Airport: This returns a list of all Instructors beginning with those who list that airport as their closest airport, and then continues reaching farther out.</li> <li>Country: This returns a list of all Instructors who are in that country.  It does not continue to any proximate countries.</li> <li>Latitude and Longitude: Like the Airport search, this begins with people whose listed airport is closest to that latitude and longitude, and then continues reaching farther out.</li> <li>Has active Instructor Community Role, Has Trainer badge, Was helper at least once before, Was organiser at least once before, Is an in-progress instructor trainee are based on AMY's current records</li> <li>Languages, Knowledge Domains, Gender, and Lessons come from the Person record for that individual. If multiple options are selected, only Instructors who have all of those options on their record will be shown.</li> </ul>"},{"location":"users_guide/admin_index/#searching-for-events","title":"Searching for Events","text":"<p>Clicking \"Events\" on the top menu bar will take you to a list of all recorded events - past, present, and future, including those that were stalled or cancelled. Here you can filter by the following criteria:</p> <ul> <li>Assigned to: The admin user the event is assigned to</li> <li>Tags: Any tags applied to that event</li> <li>Host: The organisation hosting the event</li> <li>Administrator The event administrator (A lesson program for centrally organised workshops, self organised, Instructor Training, or Collaborative Lesson Development Training)</li> <li>Completed Whether the \"completed\" box has been checked, indicating all necessary work for that event is complete</li> <li>Country Country from the event's location</li> <li>Continent Continent based on the country</li> <li>Status Whether the event is active, past, ongoing, upcoming, unpublished, published, detected changes in metadata</li> <li>Ordering Select sort order for returned list</li> </ul>"},{"location":"users_guide/admin_index/#searching-for-organisations","title":"Searching for Organisations","text":"<p>Clicking \"Organisations\" on the top menu bar will take you to a list of all recorded organisations, regardless of their involvement with The Carpentries. Here you can filter by the following criteria:</p> <ul> <li>Country: Country the organisation is based in</li> <li>Memberships (current or past): Whether the organisation has had any current or past membership, by selected membership variant</li> <li>Ordering Select sort order for returned list</li> </ul>"},{"location":"users_guide/admin_index/#searching-for-memberships","title":"Searching for Memberships","text":"<p>Clicking \"Memberships\" on the top menu bar will take you to a list of all Carpentries memberships - past, present, and future.  Here you can filter by the following criteria:</p> <ul> <li>Organisation Name: For most memberships, this will be the name of the main organisation. For consortium memberships, this will be the name of the consortium.</li> <li>Consortium:  Whether the membership is listed as a consortium</li> <li>Can this membership be publicized on The carpentries websites?: Whether public/private has been selected, allowing the membership to be listed on The Carpentries website</li> <li>Variant: The membership level (bronze, silver, gold, etc.)</li> <li>Contribution type: Financial, Person-days, etc.</li> <li>Only show active memberships</li> <li>Only show memberships with non-zero allowed training seats</li> <li>Only show memberships with zero or less remaining seats</li> <li>Ordering Select sort order for returned list</li> </ul>"},{"location":"users_guide/admin_index/#searching-for-persons","title":"Searching for Persons","text":"<p>Clicking \"Persons\" on the top menu bar will take you to a list of all recorded persons, regardless of their involvement with The Carpentries. Here you can filter by the following criteria:</p> <ul> <li>Badges This will return Persons who have any of the selected badges</li> <li>Taught at workshops of type This will list Persons who have taught at workshops with any of the selected tags</li> <li>Ordering Select sort order for returned list</li> </ul> <p>See the section above to search specifically for qualified instructors.</p>"},{"location":"users_guide/community_index/","title":"AMY Community Users Guide","text":""},{"location":"users_guide/community_index/#logging-in","title":"Logging in","text":"<ul> <li>Active Carpentries community members can log in to AMY here via GitHub.  Contact The Carpentries Core Team if you have difficulty logging in.</li> </ul>"},{"location":"users_guide/community_index/#user-profiles","title":"User profiles","text":"<p>The Carpentries can maintain the following information about individuals in our program. Any of the following can be updated directly by the individual, except for email and GitHub username as these two fields are used for login.  Personal (first) name is the only required field.</p> <ul> <li>Personal (first) name</li> <li>Middle name</li> <li>Family (last) name</li> <li>Email address (Primary email address, used for communication and as a login.)</li> <li>Secondary email address (This is an optional, secondary email address we can use to contact you.)</li> <li>Gender (options include Prefer not to say, Female, Gender variant, Male, Other)</li> <li>Country</li> <li>Airport (Airports are used as approximate geographic identifiers for our instructors. Instructors can self-select the airport closest to them or the airport they most frequently use. If your aiport is not in the drop down, please contact team@carpentries.org so we can add it in.)</li> <li>Affiliation</li> <li>GitHub username</li> <li>Twitter username</li> <li>Bluesky username</li> <li>Mastodon url</li> <li>Personal website</li> <li>Current occupation/career stage</li> <li>ORCID ID</li> <li>Personal notes</li> <li>Topics and lessons you're comfortable teaching (a non-exhaustive list of lessons taught by The Carpentries)</li> <li>Areas of expertise  (List of academic/scientific/professional domains)</li> <li>Languages (human languages)</li> <li>Comments (additional notes or comments from individual)</li> <li> <p>Consents (Note consents can be changed by the individual at any time)</p> <p>Mandatory consents:</p> <ul> <li>I have read and agree to the privacy policy of The Carpentries.</li> <li>I acknowledge that I am at least 16 years old.</li> <li>Do you agree to the transfer of your data outside of the European Economic Area/United Kingdom?</li> </ul> <p>Optional consents:</p> <ul> <li>Can we contact you for volunteering opportunities, surveys, feedback, etc.?</li> <li>Do you consent to publish your profile on The Carpentries website?</li> <li>Do you consent to have your name or identity associated with lesson publications?</li> </ul> </li> </ul>"},{"location":"users_guide/community_index/#additional-user-information","title":"Additional user information","text":"<p>In addition to the following information, The Carpentries also maintains data on user activity.  This may include:</p> <ul> <li>tasks at an event (learner, helper, Instructor, Host, etc.)</li> <li>progress toward badges such as Trainer, Instructor, Maintainer, etc. See the Instructor Training section for more inforamtion.</li> <li>awards received such as Trainer, Instructor, Maintainer, etc.</li> <li>other roles the individual may have or have had, such as Core Team member, Executive Team member, etc.</li> <li>whether the individual is actively serving in a role</li> </ul> <p>Individuals can view this information but can not edit it directly.  Please contact team@carpentries.org with questions about this information.</p>"},{"location":"users_guide/community_index/#instructor-training","title":"Instructor Training","text":"<p>Carpentries Instructor trainees can log in to AMY to view their checkout progress towards their Instructor badge and submit their \"Get Involved\" step towards certification.  More information about the Instructor Training checkout process is in our curriculum.  Log into your AMY profile and click on \"Training Progress\" in the top menu bar:</p> <p></p> <p>You may submit your \"Get Involved\" step here, to be evaluated by The Carpentries Instructor Training team.  The Instructor Training team will also record your status in completing the Teaching Demo and Welcome Session requirements and award your certificate upon successful completion of the Training and all three checkout steps.</p> <p>Please allow 7-10 days for each of these steps to be evaluated and recorded.</p>"},{"location":"users_guide/community_index/#submitting-your-get-involved-step","title":"Submitting your \"Get Involved\" step","text":"<p>To submit your \"Get Involved\" step, click on the blue \"Submit a Get Involved Activity\" button.</p> <p></p> <p>This will take you to a page where you can select what type of activity you are submitting and provide additional information. The table below shows which information must be provided for each activity.</p> <p></p>"},{"location":"users_guide/community_index/#information-required-for-each-get-involved-activity","title":"Information required for each Get Involved activity","text":"Activity Date required? URL required? Additional information required? Attended a regional meetup, skill-up, or other community meeting yes no yes, description of event Submitted a contribution to a Carpentries repository on GitHub yes yes, to a contribution to a repo in a Carpentries organisation no Served as an Instructor or a helper at a Carpentries workshop yes yes, to a workshop website no Other yes no yes, description of contribution"},{"location":"users_guide/community_index/#after-submitting","title":"After submitting","text":"<p>Once you submit your Get Involved step, your summary page will show your submission is pending.  Please come back to this page to check on your progress. You may edit or delete your information at any time before it is evaluated.  If you are asked to repeat, follow the same steps to submit a new \"Get Involved\" step.</p>"},{"location":"users_guide/community_index/#teaching-demonstration","title":"Teaching Demonstration","text":"<p>The Trainer leading your Teaching Demonstration will inform the Instructor Training Team whether you passed or were asked to repeat your teaching demo, and your participation will be recorded by our Instructor Training team.</p>"},{"location":"users_guide/community_index/#welcome-session","title":"Welcome Session","text":"<p>If you signed in on the Welcome Session Etherpad, your participation will be recorded by our Instructor Training team.</p>"},{"location":"users_guide/community_index/#certificate","title":"Certificate","text":"<p>Once you have completed all three steps, your summary page will show your status as complete.  The Instructor Training team will award your badge and you will receive an email with a pdf certificate attached.</p> <p></p>"},{"location":"users_guide/community_index/#viewing-teaching-opportunities","title":"Viewing teaching opportunities","text":"<p>Currently badged and active Instructors can view and sign up for upcoming teaching opportunities at Centrally-Organised workshops by clicking the \"View upcoming teaching opportunities with The Carpentries\" button at the top of their profile page. This button is available only to currently badged and active Instructors.</p> <p></p> <p>The next page will list all upcoming teaching opportunites.  This list can be sorted and filtered by criteria such as country and curriculum.</p> <p></p> <p>Instructors can then register their interest in teaching specific workshop.</p> <p></p> <p>A workshop administrator will follow up shortly to confirm or decline each instructor.</p>"},{"location":"users_guide/community_index/#notes-about-signing-up","title":"Notes about signing up","text":"<ul> <li>Instructors will get a warning if they sign up as interested in concurrent workshops or workshops within two weeks of confirmed workshops.  This is to remind Instructors about possible scheduling conflicts and that they may be overextending themsleves.  This does not prevent Instructors from signing up.</li> <li>Instructors will be blocked from signing up for workshops if they are already confirmed to teach a concurrent workshop. This is to prevent actual scheduling conflicts.  Instructors may contact workshops@carpentries.org if they are interested in teaching concurrent workshops to discuss scheduling options.</li> </ul>"}]}