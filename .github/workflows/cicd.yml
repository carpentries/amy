name: CI/CD

on:
  push:
    branches:
    - main
    - develop
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Python ${{ matrix.python-version }} test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.11' ]

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_amy
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install pipenv
        pipenv sync --dev

    - name: Install NodeJS dependencies
      run: npm install

    - name: Check migrations
      run: |
        pipenv run python manage.py makemigrations --dry-run --check;
        if [[ $? != "0" ]]; then
          exit 1;
        fi;
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_amy

    - name: Collect static files
      run: |
        pipenv run python manage.py collectstatic --no-input;
        if [[ $? != "0" ]]; then
          exit 1;
        fi;

    - name: Test
      run: pipenv run python manage.py test
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_amy

  build:
    name: Build Docker image and push to ECR
    needs: test
    # conditionally run only on pushes to develop
    if: github.event == "push" && github.ref == "refs/heads/develop"
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ secrets.AWS_ECR_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.AMY_ECR_REPO_NAME }}
        IMAGE_TAG: ${{ env.GITHUB_SHA }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

